
NissanSunnyRz1DigitalFuelGaugeSignalConverterSTM32F303Nucleo32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e14  08009e14  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08009e14  08009e14  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e14  08009e14  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  2000007c  08009ea0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002710  08009ea0  00022710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048605  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071ea  00000000  00000000  000686b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cd8  00000000  00000000  0006f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b10  00000000  00000000  00071578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219fc  00000000  00000000  00073088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019912  00000000  00000000  00094a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5989  00000000  00000000  000ae396  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085a0  00000000  00000000  00173d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000003c  00000000  00000000  0017c33c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0017c378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b5c 	.word	0x08009b5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009b5c 	.word	0x08009b5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <BSP_LED_Init+0x60>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <BSP_LED_Init+0x60>)
 8000290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000294:	6153      	str	r3, [r2, #20]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <BSP_LED_Init+0x60>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80002a2:	2308      	movs	r3, #8
 80002a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a6:	2301      	movs	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ae:	2303      	movs	r3, #3
 80002b0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <BSP_LED_Init+0x64>)
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	f107 020c 	add.w	r2, r7, #12
 80002be:	4611      	mov	r1, r2
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fa05 	bl	80016d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <BSP_LED_Init+0x64>)
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	2108      	movs	r1, #8
 80002d0:	2200      	movs	r2, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fc48 	bl	8001b68 <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	20000000 	.word	0x20000000

080002e8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <BSP_LED_On+0x24>)
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	2108      	movs	r1, #8
 80002fc:	2201      	movs	r2, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fc32 	bl	8001b68 <HAL_GPIO_WritePin>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000000 	.word	0x20000000

08000310 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_Init+0x28>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <HAL_Init+0x28>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000320:	2003      	movs	r0, #3
 8000322:	f001 f84d 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000326:	200f      	movs	r0, #15
 8000328:	f000 f810 	bl	800034c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800032c:	f000 f806 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000330:	2300      	movs	r3, #0
}
 8000332:	4618      	mov	r0, r3
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40022000 	.word	0x40022000

0800033c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_InitTick+0x54>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_InitTick+0x58>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000362:	fbb3 f3f1 	udiv	r3, r3, r1
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	4618      	mov	r0, r3
 800036c:	f001 f86b 	bl	8001446 <HAL_SYSTICK_Config>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000376:	2301      	movs	r3, #1
 8000378:	e00e      	b.n	8000398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b0f      	cmp	r3, #15
 800037e:	d80a      	bhi.n	8000396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000380:	2200      	movs	r2, #0
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f001 f825 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800038c:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <HAL_InitTick+0x5c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000392:	2300      	movs	r3, #0
 8000394:	e000      	b.n	8000398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000396:	2301      	movs	r3, #1
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000000c 	.word	0x2000000c
 80003a4:	20000008 	.word	0x20000008
 80003a8:	20000004 	.word	0x20000004

080003ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <HAL_IncTick+0x20>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_IncTick+0x24>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4413      	add	r3, r2
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <HAL_IncTick+0x24>)
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000008 	.word	0x20000008
 80003d0:	20002708 	.word	0x20002708

080003d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <HAL_GetTick+0x14>)
 80003da:	681b      	ldr	r3, [r3, #0]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20002708 	.word	0x20002708

080003ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b09c      	sub	sp, #112	; 0x70
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003f4:	2300      	movs	r3, #0
 80003f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80003fa:	2300      	movs	r3, #0
 80003fc:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d101      	bne.n	800040c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000408:	2301      	movs	r3, #1
 800040a:	e170      	b.n	80006ee <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	691b      	ldr	r3, [r3, #16]
 8000410:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000416:	f003 0310 	and.w	r3, r3, #16
 800041a:	2b00      	cmp	r3, #0
 800041c:	d176      	bne.n	800050c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000422:	2b00      	cmp	r3, #0
 8000424:	d152      	bne.n	80004cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2200      	movs	r2, #0
 800042a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f007 fa01 	bl	8007848 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d13b      	bne.n	80004cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f000 fe6d 	bl	8001134 <ADC_Disable>
 800045a:	4603      	mov	r3, r0
 800045c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	2b00      	cmp	r3, #0
 800046a:	d12f      	bne.n	80004cc <HAL_ADC_Init+0xe0>
 800046c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000470:	2b00      	cmp	r3, #0
 8000472:	d12b      	bne.n	80004cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000478:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800047c:	f023 0302 	bic.w	r3, r3, #2
 8000480:	f043 0202 	orr.w	r2, r3, #2
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000496:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	689a      	ldr	r2, [r3, #8]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004a8:	4b93      	ldr	r3, [pc, #588]	; (80006f8 <HAL_ADC_Init+0x30c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a93      	ldr	r2, [pc, #588]	; (80006fc <HAL_ADC_Init+0x310>)
 80004ae:	fba2 2303 	umull	r2, r3, r2, r3
 80004b2:	0c9a      	lsrs	r2, r3, #18
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80004be:	e002      	b.n	80004c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1f9      	bne.n	80004c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d007      	beq.n	80004ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80004e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80004e8:	d110      	bne.n	800050c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ee:	f023 0312 	bic.w	r3, r3, #18
 80004f2:	f043 0210 	orr.w	r2, r3, #16
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004fe:	f043 0201 	orr.w	r2, r3, #1
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000510:	f003 0310 	and.w	r3, r3, #16
 8000514:	2b00      	cmp	r3, #0
 8000516:	f040 80dd 	bne.w	80006d4 <HAL_ADC_Init+0x2e8>
 800051a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800051e:	2b00      	cmp	r3, #0
 8000520:	f040 80d8 	bne.w	80006d4 <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 80d0 	bne.w	80006d4 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000538:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800053c:	f043 0202 	orr.w	r2, r3, #2
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000544:	4b6e      	ldr	r3, [pc, #440]	; (8000700 <HAL_ADC_Init+0x314>)
 8000546:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000550:	d102      	bne.n	8000558 <HAL_ADC_Init+0x16c>
 8000552:	4b6c      	ldr	r3, [pc, #432]	; (8000704 <HAL_ADC_Init+0x318>)
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	e002      	b.n	800055e <HAL_ADC_Init+0x172>
 8000558:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800055c:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	f003 0303 	and.w	r3, r3, #3
 8000568:	2b01      	cmp	r3, #1
 800056a:	d108      	bne.n	800057e <HAL_ADC_Init+0x192>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b01      	cmp	r3, #1
 8000578:	d101      	bne.n	800057e <HAL_ADC_Init+0x192>
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <HAL_ADC_Init+0x194>
 800057e:	2300      	movs	r3, #0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d11c      	bne.n	80005be <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000584:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000586:	2b00      	cmp	r3, #0
 8000588:	d010      	beq.n	80005ac <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	2b01      	cmp	r3, #1
 8000594:	d107      	bne.n	80005a6 <HAL_ADC_Init+0x1ba>
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <HAL_ADC_Init+0x1ba>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e000      	b.n	80005a8 <HAL_ADC_Init+0x1bc>
 80005a6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d108      	bne.n	80005be <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80005ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	431a      	orrs	r2, r3
 80005ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005bc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	035b      	lsls	r3, r3, #13
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80005c8:	2a01      	cmp	r2, #1
 80005ca:	d002      	beq.n	80005d2 <HAL_ADC_Init+0x1e6>
 80005cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d0:	e000      	b.n	80005d4 <HAL_ADC_Init+0x1e8>
 80005d2:	2200      	movs	r2, #0
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	431a      	orrs	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005e4:	4313      	orrs	r3, r2
 80005e6:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d11b      	bne.n	8000628 <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d109      	bne.n	800060c <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fc:	3b01      	subs	r3, #1
 80005fe:	045a      	lsls	r2, r3, #17
 8000600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000602:	4313      	orrs	r3, r2
 8000604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000608:	66bb      	str	r3, [r7, #104]	; 0x68
 800060a:	e00d      	b.n	8000628 <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000610:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000614:	f043 0220 	orr.w	r2, r3, #32
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000620:	f043 0201 	orr.w	r2, r3, #1
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062c:	2b01      	cmp	r3, #1
 800062e:	d007      	beq.n	8000640 <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4313      	orrs	r3, r2
 800063a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800063c:	4313      	orrs	r3, r2
 800063e:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f003 030c 	and.w	r3, r3, #12
 800064a:	2b00      	cmp	r3, #0
 800064c:	d113      	bne.n	8000676 <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800065c:	f023 0302 	bic.w	r3, r3, #2
 8000660:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	039a      	lsls	r2, r3, #14
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4313      	orrs	r3, r2
 8000670:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000672:	4313      	orrs	r3, r2
 8000674:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <HAL_ADC_Init+0x31c>)
 800067e:	4013      	ands	r3, r2
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	6812      	ldr	r2, [r2, #0]
 8000684:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000686:	430b      	orrs	r3, r1
 8000688:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d10c      	bne.n	80006ac <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f023 010f 	bic.w	r1, r3, #15
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30
 80006aa:	e007      	b.n	80006bc <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f022 020f 	bic.w	r2, r2, #15
 80006ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0201 	orr.w	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
 80006d2:	e00a      	b.n	80006ea <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d8:	f023 0312 	bic.w	r3, r3, #18
 80006dc:	f043 0210 	orr.w	r2, r3, #16
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80006e4:	2301      	movs	r3, #1
 80006e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80006ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3770      	adds	r7, #112	; 0x70
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000000c 	.word	0x2000000c
 80006fc:	431bde83 	.word	0x431bde83
 8000700:	50000300 	.word	0x50000300
 8000704:	50000100 	.word	0x50000100
 8000708:	fff0c007 	.word	0xfff0c007

0800070c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 809c 	bne.w	8000860 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800072e:	2b01      	cmp	r3, #1
 8000730:	d101      	bne.n	8000736 <HAL_ADC_Start+0x2a>
 8000732:	2302      	movs	r3, #2
 8000734:	e097      	b.n	8000866 <HAL_ADC_Start+0x15a>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 fc9a 	bl	8001078 <ADC_Enable>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 8083 	bne.w	8000856 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000764:	4b42      	ldr	r3, [pc, #264]	; (8000870 <HAL_ADC_Start+0x164>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <HAL_ADC_Start+0x6e>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000778:	d115      	bne.n	80007a6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d027      	beq.n	80007e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000798:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800079c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80007a4:	e01e      	b.n	80007e4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ba:	d004      	beq.n	80007c6 <HAL_ADC_Start+0xba>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <HAL_ADC_Start+0x168>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d10e      	bne.n	80007e4 <HAL_ADC_Start+0xd8>
 80007c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d007      	beq.n	80007e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f0:	d106      	bne.n	8000800 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	f023 0206 	bic.w	r2, r3, #6
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	649a      	str	r2, [r3, #72]	; 0x48
 80007fe:	e002      	b.n	8000806 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	221c      	movs	r2, #28
 8000814:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_ADC_Start+0x164>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	2b00      	cmp	r3, #0
 8000820:	d010      	beq.n	8000844 <HAL_ADC_Start+0x138>
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_ADC_Start+0x164>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 031f 	and.w	r3, r3, #31
 800082a:	2b05      	cmp	r3, #5
 800082c:	d00a      	beq.n	8000844 <HAL_ADC_Start+0x138>
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_ADC_Start+0x164>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f003 031f 	and.w	r3, r3, #31
 8000836:	2b09      	cmp	r3, #9
 8000838:	d004      	beq.n	8000844 <HAL_ADC_Start+0x138>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000842:	d10f      	bne.n	8000864 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0204 	orr.w	r2, r2, #4
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	e006      	b.n	8000864 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800085e:	e001      	b.n	8000864 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000860:	2302      	movs	r3, #2
 8000862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	50000300 	.word	0x50000300
 8000874:	50000100 	.word	0x50000100

08000878 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	2b08      	cmp	r3, #8
 800088c:	d102      	bne.n	8000894 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800088e:	2308      	movs	r3, #8
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e02e      	b.n	80008f2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <HAL_ADC_PollForConversion+0x188>)
 8000896:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 031f 	and.w	r3, r3, #31
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d112      	bne.n	80008ca <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d11d      	bne.n	80008ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f043 0220 	orr.w	r2, r3, #32
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e096      	b.n	80009f8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f043 0220 	orr.w	r2, r3, #32
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e084      	b.n	80009f8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <HAL_ADC_PollForConversion+0x188>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f003 031f 	and.w	r3, r3, #31
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <HAL_ADC_PollForConversion+0x90>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000906:	d104      	bne.n	8000912 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e003      	b.n	800091a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000912:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800091a:	f7ff fd5b 	bl	80003d4 <HAL_GetTick>
 800091e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000920:	e01a      	b.n	8000958 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d016      	beq.n	8000958 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <HAL_ADC_PollForConversion+0xc8>
 8000930:	f7ff fd50 	bl	80003d4 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d20b      	bcs.n	8000958 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	f043 0204 	orr.w	r2, r3, #4
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e04f      	b.n	80009f8 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4013      	ands	r3, r2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0dd      	beq.n	8000922 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800097c:	2b00      	cmp	r3, #0
 800097e:	d131      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000986:	2b00      	cmp	r3, #0
 8000988:	d12c      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	2b08      	cmp	r3, #8
 8000996:	d125      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d112      	bne.n	80009cc <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d112      	bne.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f043 0201 	orr.w	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	645a      	str	r2, [r3, #68]	; 0x44
 80009ca:	e00b      	b.n	80009e4 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	f043 0220 	orr.w	r2, r3, #32
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009dc:	f043 0201 	orr.w	r2, r3, #1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	50000300 	.word	0x50000300

08000a04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d101      	bne.n	8000a3a <HAL_ADCEx_Calibration_Start+0x1c>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e057      	b.n	8000aea <HAL_ADCEx_Calibration_Start+0xcc>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 fb76 	bl	8001134 <ADC_Disable>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d146      	bne.n	8000ae0 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000a66:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d107      	bne.n	8000a7e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000a7c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a8c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000a8e:	f7ff fca1 	bl	80003d4 <HAL_GetTick>
 8000a92:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000a94:	e014      	b.n	8000ac0 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000a96:	f7ff fc9d 	bl	80003d4 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	2b0a      	cmp	r3, #10
 8000aa2:	d90d      	bls.n	8000ac0 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa8:	f023 0312 	bic.w	r3, r3, #18
 8000aac:	f043 0210 	orr.w	r2, r3, #16
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e014      	b.n	8000aea <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ace:	d0e2      	beq.n	8000a96 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f023 0303 	bic.w	r3, r3, #3
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b09d      	sub	sp, #116	; 0x74
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d101      	bne.n	8000b16 <HAL_ADC_ConfigChannel+0x22>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e2a5      	b.n	8001062 <HAL_ADC_ConfigChannel+0x56e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f040 8289 	bne.w	8001040 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d81c      	bhi.n	8000b70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	461a      	mov	r2, r3
 8000b4a:	231f      	movs	r3, #31
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4019      	ands	r1, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa00 f203 	lsl.w	r2, r0, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b6e:	e063      	b.n	8000c38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d81e      	bhi.n	8000bb6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	3b1e      	subs	r3, #30
 8000b8c:	221f      	movs	r2, #31
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	4019      	ands	r1, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	3b1e      	subs	r3, #30
 8000ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb4:	e040      	b.n	8000c38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b0e      	cmp	r3, #14
 8000bbc:	d81e      	bhi.n	8000bfc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	3b3c      	subs	r3, #60	; 0x3c
 8000bd2:	221f      	movs	r2, #31
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4019      	ands	r1, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	3b3c      	subs	r3, #60	; 0x3c
 8000bee:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8000bfa:	e01d      	b.n	8000c38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3b5a      	subs	r3, #90	; 0x5a
 8000c10:	221f      	movs	r2, #31
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	4019      	ands	r1, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	3b5a      	subs	r3, #90	; 0x5a
 8000c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 80e5 	bne.w	8000e12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d91c      	bls.n	8000c8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6999      	ldr	r1, [r3, #24]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	3b1e      	subs	r3, #30
 8000c62:	2207      	movs	r2, #7
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4019      	ands	r1, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	6898      	ldr	r0, [r3, #8]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b1e      	subs	r3, #30
 8000c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	e019      	b.n	8000cbe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6959      	ldr	r1, [r3, #20]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	6898      	ldr	r0, [r3, #8]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d84f      	bhi.n	8000d80 <HAL_ADC_ConfigChannel+0x28c>
 8000ce0:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <HAL_ADC_ConfigChannel+0x1f4>)
 8000ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce6:	bf00      	nop
 8000ce8:	08000cf9 	.word	0x08000cf9
 8000cec:	08000d1b 	.word	0x08000d1b
 8000cf0:	08000d3d 	.word	0x08000d3d
 8000cf4:	08000d5f 	.word	0x08000d5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cfe:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <HAL_ADC_ConfigChannel+0x484>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	0691      	lsls	r1, r2, #26
 8000d08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d18:	e07e      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d20:	4b95      	ldr	r3, [pc, #596]	; (8000f78 <HAL_ADC_ConfigChannel+0x484>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	0691      	lsls	r1, r2, #26
 8000d2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d3a:	e06d      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000d42:	4b8d      	ldr	r3, [pc, #564]	; (8000f78 <HAL_ADC_ConfigChannel+0x484>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	0691      	lsls	r1, r2, #26
 8000d4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d5c:	e05c      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000d64:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <HAL_ADC_ConfigChannel+0x484>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	0691      	lsls	r1, r2, #26
 8000d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d70:	430a      	orrs	r2, r1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d7e:	e04b      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	069b      	lsls	r3, r3, #26
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d107      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000da2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	069b      	lsls	r3, r3, #26
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d107      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000dc6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	069b      	lsls	r3, r3, #26
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d107      	bne.n	8000dec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000dea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	069b      	lsls	r3, r3, #26
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10a      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000e0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000e10:	e001      	b.n	8000e16 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000e12:	bf00      	nop
 8000e14:	e000      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000e16:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x344>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x344>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x346>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f040 810b 	bne.w	8001056 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00f      	beq.n	8000e68 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	400a      	ands	r2, r1
 8000e62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000e66:	e049      	b.n	8000efc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2201      	movs	r2, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b09      	cmp	r3, #9
 8000e88:	d91c      	bls.n	8000ec4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6999      	ldr	r1, [r3, #24]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b1b      	subs	r3, #27
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4019      	ands	r1, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	6898      	ldr	r0, [r3, #8]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b1b      	subs	r3, #27
 8000eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	e01b      	b.n	8000efc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6959      	ldr	r1, [r3, #20]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4019      	ands	r1, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6898      	ldr	r0, [r3, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_ADC_ConfigChannel+0x488>)
 8000efe:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	d105      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d015      	beq.n	8000f40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d105      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00b      	beq.n	8000f40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000f2c:	2b12      	cmp	r3, #18
 8000f2e:	f040 8092 	bne.w	8001056 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 808b 	bne.w	8001056 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f48:	d102      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x45c>
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_ADC_ConfigChannel+0x48c>)
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	e002      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x462>
 8000f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f54:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10f      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x490>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x490>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e007      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x492>
 8000f76:	bf00      	nop
 8000f78:	83fff000 	.word	0x83fff000
 8000f7c:	50000300 	.word	0x50000300
 8000f80:	50000100 	.word	0x50000100
 8000f84:	2300      	movs	r3, #0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d150      	bne.n	800102c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f8a:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d010      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d107      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x4b8>
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x4b8>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <HAL_ADC_ConfigChannel+0x4ba>
 8000fac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d13c      	bne.n	800102c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b10      	cmp	r3, #16
 8000fb8:	d11d      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x502>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc2:	d118      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fce:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_ADC_ConfigChannel+0x57c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <HAL_ADC_ConfigChannel+0x580>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9a      	lsrs	r2, r3, #18
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000fe6:	e002      	b.n	8000fee <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f9      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ff4:	e02e      	b.n	8001054 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b11      	cmp	r3, #17
 8000ffc:	d10b      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x522>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001006:	d106      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001012:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001014:	e01e      	b.n	8001054 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b12      	cmp	r3, #18
 800101c:	d11a      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800101e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800102a:	e013      	b.n	8001054 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	f043 0220 	orr.w	r2, r3, #32
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800103e:	e00a      	b.n	8001056 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	f043 0220 	orr.w	r2, r3, #32
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001052:	e000      	b.n	8001056 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001054:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800105e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001062:	4618      	mov	r0, r3
 8001064:	3774      	adds	r7, #116	; 0x74
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000000c 	.word	0x2000000c
 8001074:	431bde83 	.word	0x431bde83

08001078 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <ADC_Enable+0x2c>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <ADC_Enable+0x2c>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <ADC_Enable+0x2e>
 80010a4:	2300      	movs	r3, #0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d13c      	bne.n	8001124 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <ADC_Enable+0xb8>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00d      	beq.n	80010d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f043 0210 	orr.w	r2, r3, #16
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e028      	b.n	8001126 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80010e4:	f7ff f976 	bl	80003d4 <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010ea:	e014      	b.n	8001116 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010ec:	f7ff f972 	bl	80003d4 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d90d      	bls.n	8001116 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	d1e3      	bne.n	80010ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	8000003f 	.word	0x8000003f

08001134 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <ADC_Disable+0x2c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <ADC_Disable+0x2c>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <ADC_Disable+0x2e>
 8001160:	2300      	movs	r3, #0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d040      	beq.n	80011e8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030d 	and.w	r3, r3, #13
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10f      	bne.n	8001194 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0202 	orr.w	r2, r2, #2
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2203      	movs	r2, #3
 800118a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800118c:	f7ff f922 	bl	80003d4 <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001192:	e022      	b.n	80011da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f043 0210 	orr.w	r2, r3, #16
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e01c      	b.n	80011ea <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011b0:	f7ff f910 	bl	80003d4 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d90d      	bls.n	80011da <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f043 0210 	orr.w	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e007      	b.n	80011ea <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d0e3      	beq.n	80011b0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <NVIC_EnableIRQ+0x30>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <NVIC_DisableIRQ+0x30>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	3320      	adds	r3, #32
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da0b      	bge.n	80012ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <NVIC_SetPriority+0x4c>)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	3b04      	subs	r3, #4
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ea:	e009      	b.n	8001300 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <NVIC_SetPriority+0x50>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	e000e100 	.word	0xe000e100

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff13 	bl	80011f4 <NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff28 	bl	800123c <NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff1b 	bl	8001258 <NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff27 	bl	800128c <NVIC_DisableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff94 	bl	800137c <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e014      	b.n	800149a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f002 ff42 	bl	800430a <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2202      	movs	r2, #2
 800148a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80014a2:	b480      	push	{r7}
 80014a4:	b087      	sub	sp, #28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	3308      	adds	r3, #8
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e004      	b.n	80014d6 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	3314      	adds	r3, #20
 80014d4:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	461a      	mov	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	795b      	ldrb	r3, [r3, #5]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_DAC_Start+0x16>
 80014fe:	2302      	movs	r3, #2
 8001500:	e039      	b.n	8001576 <HAL_DAC_Start+0x8a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	409a      	lsls	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10f      	bne.n	8001548 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001532:	2b3c      	cmp	r3, #60	; 0x3c
 8001534:	d118      	bne.n	8001568 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	e00f      	b.n	8001568 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001552:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001556:	d107      	bne.n	8001568 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0202 	orr.w	r2, r2, #2
 8001566:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	795b      	ldrb	r3, [r3, #5]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_DAC_ConfigChannel+0x20>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e04e      	b.n	8001642 <HAL_DAC_ConfigChannel+0xbe>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2202      	movs	r2, #2
 80015ae:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_DAC_ConfigChannel+0xcc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d112      	bne.n	80015e8 <HAL_DAC_ConfigChannel+0x64>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10f      	bne.n	80015e8 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80015c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	4013      	ands	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	e00e      	b.n	8001606 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80015e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	4013      	ands	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	22c0      	movs	r2, #192	; 0xc0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40007400 	.word	0x40007400

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001666:	2b02      	cmp	r3, #2
 8001668:	d005      	beq.n	8001676 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2204      	movs	r2, #4
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e027      	b.n	80016c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020e 	bic.w	r2, r2, #14
 8001684:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
    } 
  }
  return status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80016e6:	e14e      	b.n	8001986 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8140 	beq.w	8001980 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x40>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d123      	bne.n	8001758 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	6939      	ldr	r1, [r7, #16]
 8001754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d00b      	beq.n	80017ac <HAL_GPIO_Init+0xdc>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	2b11      	cmp	r3, #17
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d130      	bne.n	800180e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e2:	2201      	movs	r2, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f003 0201 	and.w	r2, r3, #1
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 809a 	beq.w	8001980 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x2d4>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a54      	ldr	r2, [pc, #336]	; (80019a4 <HAL_GPIO_Init+0x2d4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_GPIO_Init+0x2d4>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001864:	4a50      	ldr	r2, [pc, #320]	; (80019a8 <HAL_GPIO_Init+0x2d8>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1e8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a46      	ldr	r2, [pc, #280]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1e4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a45      	ldr	r2, [pc, #276]	; (80019b0 <HAL_GPIO_Init+0x2e0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a44      	ldr	r2, [pc, #272]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1dc>
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1ea>
 80018ac:	2305      	movs	r3, #5
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1ea>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1ea>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1ea>
 80018b8:	2300      	movs	r3, #0
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018ca:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x2d8>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d8:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018fc:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f aea9 	bne.w	80016e8 <HAL_GPIO_Init+0x18>
  }
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 80019d2:	e0b2      	b.n	8001b3a <HAL_GPIO_DeInit+0x17e>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1U << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a5 	beq.w	8001b34 <HAL_GPIO_DeInit+0x178>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2103      	movs	r1, #3
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	08d2      	lsrs	r2, r2, #3
 8001a20:	4019      	ands	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2103      	movs	r1, #3
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	401a      	ands	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60da      	str	r2, [r3, #12]

  
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 8001a6a:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <HAL_GPIO_DeInit+0x198>)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a92:	d013      	beq.n	8001abc <HAL_GPIO_DeInit+0x100>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <HAL_GPIO_DeInit+0x19c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_GPIO_DeInit+0xfc>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2f      	ldr	r2, [pc, #188]	; (8001b5c <HAL_GPIO_DeInit+0x1a0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d007      	beq.n	8001ab4 <HAL_GPIO_DeInit+0xf8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <HAL_GPIO_DeInit+0x1a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_GPIO_DeInit+0xf4>
 8001aac:	2303      	movs	r3, #3
 8001aae:	e006      	b.n	8001abe <HAL_GPIO_DeInit+0x102>
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	e004      	b.n	8001abe <HAL_GPIO_DeInit+0x102>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_DeInit+0x102>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_GPIO_DeInit+0x102>
 8001abc:	2300      	movs	r3, #0
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	f002 0203 	and.w	r2, r2, #3
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d132      	bne.n	8001b34 <HAL_GPIO_DeInit+0x178>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001ade:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_GPIO_DeInit+0x198>)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43da      	mvns	r2, r3
 8001aee:	4819      	ldr	r0, [pc, #100]	; (8001b54 <HAL_GPIO_DeInit+0x198>)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	400a      	ands	r2, r1
 8001af6:	3302      	adds	r3, #2
 8001af8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4917      	ldr	r1, [pc, #92]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4910      	ldr	r1, [pc, #64]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <HAL_GPIO_DeInit+0x1a8>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f af46 	bne.w	80019d4 <HAL_GPIO_DeInit+0x18>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f000 beda 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 816e 	beq.w	8001e9e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bc2:	4bb5      	ldr	r3, [pc, #724]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d00c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bce:	4bb2      	ldr	r3, [pc, #712]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d15a      	bne.n	8001c90 <HAL_RCC_OscConfig+0xf8>
 8001bda:	4baf      	ldr	r3, [pc, #700]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d153      	bne.n	8001c90 <HAL_RCC_OscConfig+0xf8>
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001bfc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x82>
 8001c14:	4ba0      	ldr	r3, [pc, #640]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0xae>
 8001c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c32:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c36:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c42:	4b95      	ldr	r3, [pc, #596]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c4a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c4e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c52:	fa92 f2a2 	rbit	r2, r2
 8001c56:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001c5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b252      	sxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b252      	sxtb	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f002 021f 	and.w	r2, r2, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 810f 	beq.w	8001e9c <HAL_RCC_OscConfig+0x304>
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 8109 	bne.w	8001e9c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f000 be6b 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x112>
 8001c9c:	4b7e      	ldr	r3, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a7d      	ldr	r2, [pc, #500]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e030      	b.n	8001d0c <HAL_RCC_OscConfig+0x174>
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x136>
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a74      	ldr	r2, [pc, #464]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e01e      	b.n	8001d0c <HAL_RCC_OscConfig+0x174>
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x15c>
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6b      	ldr	r2, [pc, #428]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x174>
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a64      	ldr	r2, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0c:	4b62      	ldr	r3, [pc, #392]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f023 020f 	bic.w	r2, r3, #15
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	495f      	ldr	r1, [pc, #380]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d05a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fb53 	bl	80003d4 <HAL_GetTick>
 8001d2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7fe fb4e 	bl	80003d4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	; 0x64
 8001d42:	d902      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	f000 be0e 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>
 8001d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001d5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e015      	b.n	8001da8 <HAL_RCC_OscConfig+0x210>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001da4:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dac:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001db0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001db4:	fa92 f2a2 	rbit	r2, r2
 8001db8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001dbc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b252      	sxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b252      	sxtb	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0aa      	beq.n	8001d34 <HAL_RCC_OscConfig+0x19c>
 8001dde:	e05e      	b.n	8001e9e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe faf8 	bl	80003d4 <HAL_GetTick>
 8001de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dea:	f7fe faf3 	bl	80003d4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d902      	bls.n	8001e00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f000 bdb3 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001e14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_OscConfig+0x29a>
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x2c6>
 8001e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_RCC_OscConfig+0x300>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e62:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e66:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001e72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e76:	fab2 f282 	clz	r2, r2
 8001e7a:	b252      	sxtb	r2, r2
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	b252      	sxtb	r2, r2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1aa      	bne.n	8001dea <HAL_RCC_OscConfig+0x252>
 8001e94:	e003      	b.n	8001e9e <HAL_RCC_OscConfig+0x306>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8170 	beq.w	800218e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eae:	4bd0      	ldr	r3, [pc, #832]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eba:	4bcd      	ldr	r3, [pc, #820]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d16d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
 8001ec6:	4bca      	ldr	r3, [pc, #808]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d167      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001ee4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x36a>
 8001efc:	4bbc      	ldr	r3, [pc, #752]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e013      	b.n	8001f2a <HAL_RCC_OscConfig+0x392>
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f26:	4bb2      	ldr	r3, [pc, #712]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f30:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001f3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b252      	sxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b252      	sxtb	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3d6>
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d002      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f000 bcfc 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4ba0      	ldr	r3, [pc, #640]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	23f8      	movs	r3, #248	; 0xf8
 8001f7e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001f8e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	4995      	ldr	r1, [pc, #596]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa0:	e0f5      	b.n	800218e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8085 	beq.w	80020b8 <HAL_RCC_OscConfig+0x520>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001fc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe f9fc 	bl	80003d4 <HAL_GetTick>
 8001fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7fe f9f7 	bl	80003d4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d902      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f000 bcb7 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800200a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_RCC_OscConfig+0x490>
 8002022:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	e013      	b.n	8002050 <HAL_RCC_OscConfig+0x4b8>
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002040:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2202      	movs	r2, #2
 8002052:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002056:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800205a:	fa92 f2a2 	rbit	r2, r2
 800205e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002062:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002066:	fab2 f282 	clz	r2, r2
 800206a:	b252      	sxtb	r2, r2
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	b252      	sxtb	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f002 021f 	and.w	r2, r2, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ae      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6959      	ldr	r1, [r3, #20]
 8002092:	23f8      	movs	r3, #248	; 0xf8
 8002094:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80020a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	494f      	ldr	r1, [pc, #316]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
 80020b6:	e06a      	b.n	800218e <HAL_RCC_OscConfig+0x5f6>
 80020b8:	2301      	movs	r3, #1
 80020ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80020ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	461a      	mov	r2, r3
 80020de:	2300      	movs	r3, #0
 80020e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe f977 	bl	80003d4 <HAL_GetTick>
 80020e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ec:	f7fe f972 	bl	80003d4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d902      	bls.n	8002102 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	f000 bc32 	b.w	8002966 <HAL_RCC_OscConfig+0xdce>
 8002102:	2302      	movs	r3, #2
 8002104:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002114:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d102      	bne.n	8002132 <HAL_RCC_OscConfig+0x59a>
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e013      	b.n	800215a <HAL_RCC_OscConfig+0x5c2>
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002144:	2302      	movs	r3, #2
 8002146:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800214a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2202      	movs	r2, #2
 800215c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002160:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002164:	fa92 f2a2 	rbit	r2, r2
 8002168:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800216c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b252      	sxtb	r2, r2
 8002176:	f042 0220 	orr.w	r2, r2, #32
 800217a:	b252      	sxtb	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ae      	bne.n	80020ec <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80d8 	beq.w	800234e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d067      	beq.n	8002278 <HAL_RCC_OscConfig+0x6e0>
 80021a8:	2301      	movs	r3, #1
 80021aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80021ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_OscConfig+0x65c>)
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	461a      	mov	r2, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe f900 	bl	80003d4 <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d8:	e00e      	b.n	80021f8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021da:	f7fe f8fb 	bl	80003d4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d906      	bls.n	80021f8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e3bb      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	10908120 	.word	0x10908120
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	4ba5      	ldr	r3, [pc, #660]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800223e:	2102      	movs	r1, #2
 8002240:	6019      	str	r1, [r3, #0]
 8002242:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f1a3 	rbit	r1, r3
 800224c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002250:	6019      	str	r1, [r3, #0]
  return(result);
 8002252:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b25b      	sxtb	r3, r3
 800225e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002262:	b25b      	sxtb	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0b1      	beq.n	80021da <HAL_RCC_OscConfig+0x642>
 8002276:	e06a      	b.n	800234e <HAL_RCC_OscConfig+0x7b6>
 8002278:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800228e:	601a      	str	r2, [r3, #0]
  return(result);
 8002290:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002294:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x938>)
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7fe f894 	bl	80003d4 <HAL_GetTick>
 80022ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	e009      	b.n	80022c6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7fe f88f 	bl	80003d4 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e34f      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 80022c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022ca:	2202      	movs	r2, #2
 80022cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fa:	2202      	movs	r2, #2
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800230c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230e:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002312:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002316:	2102      	movs	r1, #2
 8002318:	6019      	str	r1, [r3, #0]
 800231a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f1a3 	rbit	r1, r3
 8002324:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002328:	6019      	str	r1, [r3, #0]
  return(result);
 800232a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b25b      	sxtb	r3, r3
 8002336:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800233a:	b25b      	sxtb	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1b1      	bne.n	80022b2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8159 	beq.w	8002610 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d112      	bne.n	8002396 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b56      	ldr	r3, [pc, #344]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a55      	ldr	r2, [pc, #340]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	61d3      	str	r3, [r2, #28]
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <HAL_RCC_OscConfig+0x93c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b4c      	ldr	r3, [pc, #304]	; (80024d4 <HAL_RCC_OscConfig+0x93c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a4b      	ldr	r2, [pc, #300]	; (80024d4 <HAL_RCC_OscConfig+0x93c>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe f811 	bl	80003d4 <HAL_GetTick>
 80023b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	e009      	b.n	80023cc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe f80c 	bl	80003d4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e2cc      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x93c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ef      	beq.n	80023b8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x858>
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a39      	ldr	r2, [pc, #228]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	e02f      	b.n	8002450 <HAL_RCC_OscConfig+0x8b8>
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x87c>
 80023fa:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a33      	ldr	r2, [pc, #204]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0x8b8>
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x8a0>
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b28      	ldr	r3, [pc, #160]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x8b8>
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d06b      	beq.n	8002532 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fd ffbb 	bl	80003d4 <HAL_GetTick>
 800245e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fd ffb6 	bl	80003d4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e274      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 800247c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002480:	2202      	movs	r2, #2
 8002482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002498:	2202      	movs	r2, #2
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024aa:	601a      	str	r2, [r3, #0]
  return(result);
 80024ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d108      	bne.n	80024d8 <HAL_RCC_OscConfig+0x940>
 80024c6:	4b01      	ldr	r3, [pc, #4]	; (80024cc <HAL_RCC_OscConfig+0x934>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	e013      	b.n	80024f4 <HAL_RCC_OscConfig+0x95c>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	10908120 	.word	0x10908120
 80024d4:	40007000 	.word	0x40007000
 80024d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024dc:	2202      	movs	r2, #2
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	4bbb      	ldr	r3, [pc, #748]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024f8:	2102      	movs	r1, #2
 80024fa:	6011      	str	r1, [r2, #0]
 80024fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	fa92 f1a2 	rbit	r1, r2
 8002506:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800250a:	6011      	str	r1, [r2, #0]
  return(result);
 800250c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b252      	sxtb	r2, r2
 8002518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251c:	b252      	sxtb	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d099      	beq.n	8002464 <HAL_RCC_OscConfig+0x8cc>
 8002530:	e064      	b.n	80025fc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fd ff4f 	bl	80003d4 <HAL_GetTick>
 8002536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fd ff4a 	bl	80003d4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e208      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 8002554:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002582:	601a      	str	r2, [r3, #0]
  return(result);
 8002584:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002588:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_OscConfig+0xa0c>
 800259e:	4b90      	ldr	r3, [pc, #576]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	e00d      	b.n	80025c0 <HAL_RCC_OscConfig+0xa28>
 80025a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025a8:	2202      	movs	r2, #2
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025c4:	2102      	movs	r1, #2
 80025c6:	6011      	str	r1, [r2, #0]
 80025c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	fa92 f1a2 	rbit	r1, r2
 80025d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025d6:	6011      	str	r1, [r2, #0]
  return(result);
 80025d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b252      	sxtb	r2, r2
 80025e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e8:	b252      	sxtb	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d19f      	bne.n	800253c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4a75      	ldr	r2, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 800260a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 81a4 	beq.w	8002964 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	f000 819b 	beq.w	8002960 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b02      	cmp	r3, #2
 8002632:	f040 8113 	bne.w	800285c <HAL_RCC_OscConfig+0xcc4>
 8002636:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800263a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800264e:	601a      	str	r2, [r3, #0]
  return(result);
 8002650:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002654:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	461a      	mov	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fd feb3 	bl	80003d4 <HAL_GetTick>
 800266e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002672:	e009      	b.n	8002688 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fd feae 	bl	80003d4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e16e      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 8002688:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800268c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026a0:	601a      	str	r2, [r3, #0]
  return(result);
 80026a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_OscConfig+0xb2a>
 80026bc:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e01b      	b.n	80026fa <HAL_RCC_OscConfig+0xb62>
 80026c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002702:	6011      	str	r1, [r2, #0]
 8002704:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	fa92 f1a2 	rbit	r1, r2
 800270e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002712:	6011      	str	r1, [r2, #0]
  return(result);
 8002714:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b252      	sxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b252      	sxtb	r2, r2
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f002 021f 	and.w	r2, r2, #31
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d19d      	bne.n	8002674 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	430b      	orrs	r3, r1
 800274e:	4924      	ldr	r1, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800276c:	601a      	str	r2, [r3, #0]
  return(result);
 800276e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002772:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	2301      	movs	r3, #1
 8002786:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fd fe24 	bl	80003d4 <HAL_GetTick>
 800278c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fd fe1f 	bl	80003d4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0df      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 80027a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027be:	601a      	str	r2, [r3, #0]
  return(result);
 80027c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d104      	bne.n	80027e4 <HAL_RCC_OscConfig+0xc4c>
 80027da:	4b01      	ldr	r3, [pc, #4]	; (80027e0 <HAL_RCC_OscConfig+0xc48>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xc84>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f2a3 	rbit	r2, r3
 80027f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <HAL_RCC_OscConfig+0xdd8>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	fa92 f1a2 	rbit	r1, r2
 8002830:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002834:	6011      	str	r1, [r2, #0]
  return(result);
 8002836:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b252      	sxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b252      	sxtb	r2, r2
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f002 021f 	and.w	r2, r2, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d09b      	beq.n	8002792 <HAL_RCC_OscConfig+0xbfa>
 800285a:	e083      	b.n	8002964 <HAL_RCC_OscConfig+0xdcc>
 800285c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002874:	601a      	str	r2, [r3, #0]
  return(result);
 8002876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	461a      	mov	r2, r3
 800288c:	2300      	movs	r3, #0
 800288e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fd fda0 	bl	80003d4 <HAL_GetTick>
 8002894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	e009      	b.n	80028ae <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7fd fd9b 	bl	80003d4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e05b      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028c6:	601a      	str	r2, [r3, #0]
  return(result);
 80028c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d102      	bne.n	80028e8 <HAL_RCC_OscConfig+0xd50>
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCC_OscConfig+0xdd8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0xd88>
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f107 0318 	add.w	r3, r7, #24
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_RCC_OscConfig+0xdd8>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f107 0214 	add.w	r2, r7, #20
 8002924:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002928:	6011      	str	r1, [r2, #0]
 800292a:	f107 0214 	add.w	r2, r7, #20
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	fa92 f1a2 	rbit	r1, r2
 8002934:	f107 0210 	add.w	r2, r7, #16
 8002938:	6011      	str	r1, [r2, #0]
  return(result);
 800293a:	f107 0210 	add.w	r2, r7, #16
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	b252      	sxtb	r2, r2
 8002946:	f042 0220 	orr.w	r2, r2, #32
 800294a:	b252      	sxtb	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f002 021f 	and.w	r2, r2, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d19d      	bne.n	800289a <HAL_RCC_OscConfig+0xd02>
 800295e:	e001      	b.n	8002964 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b09e      	sub	sp, #120	; 0x78
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e164      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b8f      	ldr	r3, [pc, #572]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	498d      	ldr	r1, [pc, #564]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e14c      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b84      	ldr	r3, [pc, #528]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4981      	ldr	r1, [pc, #516]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80df 	beq.w	8002ba6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d13d      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80029fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d102      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xa6>
 8002a14:	4b71      	ldr	r3, [pc, #452]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	e00f      	b.n	8002a3a <HAL_RCC_ClockConfig+0xc6>
 8002a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	667b      	str	r3, [r7, #100]	; 0x64
 8002a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a36:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a42:	fa92 f2a2 	rbit	r2, r2
 8002a46:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002a48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b252      	sxtb	r2, r2
 8002a50:	f042 0220 	orr.w	r2, r2, #32
 8002a54:	b252      	sxtb	r2, r2
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	f002 021f 	and.w	r2, r2, #31
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d17d      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0f4      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d13d      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x17c>
 8002a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x12a>
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e00f      	b.n	8002abe <HAL_RCC_ClockConfig+0x14a>
 8002a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aba:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac6:	fa92 f2a2 	rbit	r2, r2
 8002aca:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b252      	sxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b252      	sxtb	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f002 021f 	and.w	r2, r2, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d13b      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b2      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
 8002af0:	2302      	movs	r3, #2
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x1a4>
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e00d      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1c0>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	2302      	movs	r3, #2
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	61ba      	str	r2, [r7, #24]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	617a      	str	r2, [r7, #20]
  return(result);
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b252      	sxtb	r2, r2
 8002b48:	f042 0220 	orr.w	r2, r2, #32
 8002b4c:	b252      	sxtb	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f002 021f 	and.w	r2, r2, #31
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e078      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 0203 	bic.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	491a      	ldr	r1, [pc, #104]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b76:	f7fd fc2d 	bl	80003d4 <HAL_GetTick>
 8002b7a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7e:	f7fd fc29 	bl	80003d4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e060      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 020c 	and.w	r2, r3, #12
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d1eb      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d215      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 0207 	bic.w	r2, r3, #7
 8002bbc:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d006      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e03f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e2>
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCC_ClockConfig+0x2ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4919      	ldr	r1, [pc, #100]	; (8002c60 <HAL_RCC_ClockConfig+0x2ec>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCC_ClockConfig+0x2ec>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4911      	ldr	r1, [pc, #68]	; (8002c60 <HAL_RCC_ClockConfig+0x2ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c1e:	f000 f825 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c22:	4601      	mov	r1, r0
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCC_ClockConfig+0x2ec>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c2c:	23f0      	movs	r3, #240	; 0xf0
 8002c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCC_ClockConfig+0x2f0>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	fa21 f303 	lsr.w	r3, r1, r3
 8002c4a:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <HAL_RCC_ClockConfig+0x2f4>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f7fd fb7c 	bl	800034c <HAL_InitTick>
  
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3778      	adds	r7, #120	; 0x78
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08009d68 	.word	0x08009d68
 8002c68:	2000000c 	.word	0x2000000c

08002c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b08b      	sub	sp, #44	; 0x2c
 8002c70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x30>
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8002c9a:	e03c      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c9e:	623b      	str	r3, [r7, #32]
      break;
 8002ca0:	e03c      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002cac:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	607b      	str	r3, [r7, #4]
  return(result);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	230f      	movs	r3, #15
 8002cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	e004      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	623b      	str	r3, [r7, #32]
      break;
 8002d14:	e002      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d18:	623b      	str	r3, [r7, #32]
      break;
 8002d1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	372c      	adds	r7, #44	; 0x2c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	08009b74 	.word	0x08009b74
 8002d38:	08009b84 	.word	0x08009b84
 8002d3c:	003d0900 	.word	0x003d0900

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	2000000c 	.word	0x2000000c

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d5e:	f7ff ffef 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d62:	4601      	mov	r1, r0
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d70:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	603b      	str	r3, [r7, #0]
  return(result);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08009d78 	.word	0x08009d78

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002da2:	f7ff ffcd 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002da6:	4601      	mov	r1, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002db0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002db4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	603b      	str	r3, [r7, #0]
  return(result);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08009d78 	.word	0x08009d78

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b092      	sub	sp, #72	; 0x48
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80cf 	beq.w	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e04:	4b86      	ldr	r3, [pc, #536]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10e      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b83      	ldr	r3, [pc, #524]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4a82      	ldr	r2, [pc, #520]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	61d3      	str	r3, [r2, #28]
 8002e1c:	4b80      	ldr	r3, [pc, #512]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b7d      	ldr	r3, [pc, #500]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a79      	ldr	r2, [pc, #484]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fd fac5 	bl	80003d4 <HAL_GetTick>
 8002e4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fd fac1 	bl	80003d4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0da      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	4b70      	ldr	r3, [pc, #448]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d07c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d075      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b56      	ldr	r3, [pc, #344]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002edc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d046      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd fa74 	bl	80003d4 <HAL_GetTick>
 8002eec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fd fa70 	bl	80003d4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e087      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002f06:	2302      	movs	r3, #2
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	2302      	movs	r3, #2
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d102      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002f34:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	e007      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	613a      	str	r2, [r7, #16]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	fa92 f2a2 	rbit	r2, r2
 8002f54:	60fa      	str	r2, [r7, #12]
  return(result);
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b252      	sxtb	r2, r2
 8002f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f62:	b252      	sxtb	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f002 021f 	and.w	r2, r2, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0bc      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4927      	ldr	r1, [pc, #156]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f023 0203 	bic.w	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f023 0210 	bic.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4913      	ldr	r1, [pc, #76]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	490b      	ldr	r1, [pc, #44]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003010:	4313      	orrs	r3, r2
 8003012:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3748      	adds	r7, #72	; 0x48
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	10908100 	.word	0x10908100

0800302c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e043      	b.n	80030c6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f873 	bl	800313e <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f9e1 	bl	8003438 <UART_SetConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e022      	b.n	80030c6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb3b 	bl	8003704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fbc2 	bl	8003848 <UART_CheckIdleState>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e02a      	b.n	8003136 <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f81e 	bl	8003152 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_UART_Transmit_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	4613      	mov	r3, r2
 8003172:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	d132      	bne.n	80031e6 <HAL_UART_Transmit_IT+0x80>
  {
    if((pData == NULL ) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_UART_Transmit_IT+0x26>
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e02b      	b.n	80031e8 <HAL_UART_Transmit_IT+0x82>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_UART_Transmit_IT+0x38>
 800319a:	2302      	movs	r3, #2
 800319c:	e024      	b.n	80031e8 <HAL_UART_Transmit_IT+0x82>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031e0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_UART_Transmit_IT+0x82>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_UART_IRQHandler+0x42>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fc41 	bl	8003ab6 <UART_Receive_IT>
      return;
 8003234:	e0fa      	b.n	800342c <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80ba 	beq.w	80033ba <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80af 	beq.w	80033ba <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <HAL_UART_IRQHandler+0x90>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <HAL_UART_IRQHandler+0xb8>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <HAL_UART_IRQHandler+0xe0>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2204      	movs	r2, #4
 80032c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032cc:	f043 0202 	orr.w	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d013      	beq.n	8003306 <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2208      	movs	r2, #8
 80032f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fe:	f043 0208 	orr.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 808d 	beq.w	800342a <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_UART_IRQHandler+0x136>
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fbc6 	bl	8003ab6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d131      	bne.n	80033a8 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb12 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d123      	bne.n	80033a0 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003366:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003374:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <HAL_UART_IRQHandler+0x240>)
 8003376:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f969 	bl	8001654 <HAL_DMA_Abort_IT>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d016      	beq.n	80033b6 <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003392:	4610      	mov	r0, r2
 8003394:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003396:	e00e      	b.n	80033b6 <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f004 f9e4 	bl	8007766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339e:	e00a      	b.n	80033b6 <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f004 f9e0 	bl	8007766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a6:	e006      	b.n	80033b6 <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f004 f9dc 	bl	8007766 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80033b4:	e039      	b.n	800342a <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	bf00      	nop
    return;
 80033b8:	e037      	b.n	800342a <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_UART_IRQHandler+0x1fc>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d010      	beq.n	80033f0 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033d6:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fbce 	bl	8003b8a <HAL_UARTEx_WakeupCallback>
    return;
 80033ee:	e01d      	b.n	800342c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_UART_IRQHandler+0x218>
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fae6 	bl	80039d6 <UART_Transmit_IT>
    return;
 800340a:	e00f      	b.n	800342c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_UART_IRQHandler+0x238>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb30 	bl	8003a86 <UART_EndTransmit_IT>
    return;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_UART_IRQHandler+0x238>
    return;
 800342a:	bf00      	nop
  }

}
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	080039ab 	.word	0x080039ab

08003438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003444:	2310      	movs	r3, #16
 8003446:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003448:	2300      	movs	r3, #0
 800344a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800344c:	2300      	movs	r3, #0
 800344e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b9f      	ldr	r3, [pc, #636]	; (80036f0 <UART_SetConfig+0x2b8>)
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	430b      	orrs	r3, r1
 800347e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8e      	ldr	r2, [pc, #568]	; (80036f4 <UART_SetConfig+0x2bc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d121      	bne.n	8003504 <UART_SetConfig+0xcc>
 80034c0:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <UART_SetConfig+0x2c0>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d817      	bhi.n	80034fc <UART_SetConfig+0xc4>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <UART_SetConfig+0x9c>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f1 	.word	0x080034f1
 80034dc:	080034f7 	.word	0x080034f7
 80034e0:	080034eb 	.word	0x080034eb
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
 80034e8:	e01e      	b.n	8003528 <UART_SetConfig+0xf0>
 80034ea:	2302      	movs	r3, #2
 80034ec:	75fb      	strb	r3, [r7, #23]
 80034ee:	e01b      	b.n	8003528 <UART_SetConfig+0xf0>
 80034f0:	2304      	movs	r3, #4
 80034f2:	75fb      	strb	r3, [r7, #23]
 80034f4:	e018      	b.n	8003528 <UART_SetConfig+0xf0>
 80034f6:	2308      	movs	r3, #8
 80034f8:	75fb      	strb	r3, [r7, #23]
 80034fa:	e015      	b.n	8003528 <UART_SetConfig+0xf0>
 80034fc:	2310      	movs	r3, #16
 80034fe:	75fb      	strb	r3, [r7, #23]
 8003500:	bf00      	nop
 8003502:	e011      	b.n	8003528 <UART_SetConfig+0xf0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7c      	ldr	r2, [pc, #496]	; (80036fc <UART_SetConfig+0x2c4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d102      	bne.n	8003514 <UART_SetConfig+0xdc>
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
 8003512:	e009      	b.n	8003528 <UART_SetConfig+0xf0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a79      	ldr	r2, [pc, #484]	; (8003700 <UART_SetConfig+0x2c8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d102      	bne.n	8003524 <UART_SetConfig+0xec>
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
 8003522:	e001      	b.n	8003528 <UART_SetConfig+0xf0>
 8003524:	2310      	movs	r3, #16
 8003526:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d16f      	bne.n	8003612 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d857      	bhi.n	80035e8 <UART_SetConfig+0x1b0>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <UART_SetConfig+0x108>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003565 	.word	0x08003565
 8003544:	08003581 	.word	0x08003581
 8003548:	0800359d 	.word	0x0800359d
 800354c:	080035e9 	.word	0x080035e9
 8003550:	080035b7 	.word	0x080035b7
 8003554:	080035e9 	.word	0x080035e9
 8003558:	080035e9 	.word	0x080035e9
 800355c:	080035e9 	.word	0x080035e9
 8003560:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003564:	f7ff fbf8 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003568:	4603      	mov	r3, r0
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	82bb      	strh	r3, [r7, #20]
        break;
 800357e:	e036      	b.n	80035ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003580:	f7ff fc0c 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8003584:	4603      	mov	r3, r0
 8003586:	005a      	lsls	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	441a      	add	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	82bb      	strh	r3, [r7, #20]
        break;
 800359a:	e028      	b.n	80035ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6852      	ldr	r2, [r2, #4]
 80035ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b2:	82bb      	strh	r3, [r7, #20]
        break;
 80035b4:	e01b      	b.n	80035ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035b6:	f7ff fb59 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 80035ba:	4603      	mov	r3, r0
 80035bc:	005a      	lsls	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ce:	82bb      	strh	r3, [r7, #20]
        break;
 80035d0:	e00d      	b.n	80035ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	82bb      	strh	r3, [r7, #20]
        break;
 80035e6:	e002      	b.n	80035ee <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	74fb      	strb	r3, [r7, #19]
        break;
 80035ec:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80035ee:	8abb      	ldrh	r3, [r7, #20]
 80035f0:	f023 030f 	bic.w	r3, r3, #15
 80035f4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f6:	8abb      	ldrh	r3, [r7, #20]
 80035f8:	105b      	asrs	r3, r3, #1
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	b29a      	uxth	r2, r3
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	4313      	orrs	r3, r2
 8003606:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	897a      	ldrh	r2, [r7, #10]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	e069      	b.n	80036e6 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d863      	bhi.n	80036e0 <UART_SetConfig+0x2a8>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x1e8>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003645 	.word	0x08003645
 8003624:	08003665 	.word	0x08003665
 8003628:	08003685 	.word	0x08003685
 800362c:	080036e1 	.word	0x080036e1
 8003630:	080036a5 	.word	0x080036a5
 8003634:	080036e1 	.word	0x080036e1
 8003638:	080036e1 	.word	0x080036e1
 800363c:	080036e1 	.word	0x080036e1
 8003640:	080036c5 	.word	0x080036c5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003644:	f7ff fb88 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
        break;
 8003662:	e040      	b.n	80036e6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003664:	f7ff fb9a 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60da      	str	r2, [r3, #12]
        break;
 8003682:	e030      	b.n	80036e6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800368e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6852      	ldr	r2, [r2, #4]
 8003696:	fbb3 f3f2 	udiv	r3, r3, r2
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60da      	str	r2, [r3, #12]
        break;
 80036a2:	e020      	b.n	80036e6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036a4:	f7ff fae2 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60da      	str	r2, [r3, #12]
        break;
 80036c2:	e010      	b.n	80036e6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60da      	str	r2, [r3, #12]
        break;
 80036de:	e002      	b.n	80036e6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	74fb      	strb	r3, [r7, #19]
        break;
 80036e4:	bf00      	nop
    }
  }

  return ret;
 80036e6:	7cfb      	ldrb	r3, [r7, #19]

}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	efff69f3 	.word	0xefff69f3
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40004400 	.word	0x40004400
 8003700:	40004800 	.word	0x40004800

08003704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003802:	d10a      	bne.n	800381a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800385a:	f7fc fdbb 	bl	80003d4 <HAL_GetTick>
 800385e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d10e      	bne.n	800388c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f82c 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e022      	b.n	80038d2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d10e      	bne.n	80038b8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f816 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e00c      	b.n	80038d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	e02c      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d028      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0x30>
 80038fa:	f7fc fd6b 	bl	80003d4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	429a      	cmp	r2, r3
 8003908:	d21d      	bcs.n	8003946 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d0c3      	beq.n	80038ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f003 fecc 	bl	8007766 <HAL_UART_ErrorCallback>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	d146      	bne.n	8003a78 <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d111      	bne.n	8003a1a <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a04:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e02f      	b.n	8003a7a <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	d114      	bne.n	8003a4e <UART_Transmit_IT+0x78>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d110      	bne.n	8003a4e <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a4c:	e009      	b.n	8003a62 <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b292      	uxth	r2, r2
 8003a60:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e000      	b.n	8003a7a <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
  }
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 ff4e 	bl	8004948 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ab6:	b590      	push	{r4, r7, lr}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ac4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b22      	cmp	r3, #34	; 0x22
 8003ad0:	d14e      	bne.n	8003b70 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ad8:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae2:	d112      	bne.n	8003b0a <UART_Receive_IT+0x54>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10e      	bne.n	8003b0a <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003af2:	89ba      	ldrh	r2, [r7, #12]
 8003af4:	89fb      	ldrh	r3, [r7, #14]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
 8003b08:	e00b      	b.n	8003b22 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b0a:	89bb      	ldrh	r3, [r7, #12]
 8003b0c:	b2d9      	uxtb	r1, r3
 8003b0e:	89fb      	ldrh	r3, [r7, #14]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	1c5c      	adds	r4, r3, #1
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	6544      	str	r4, [r0, #84]	; 0x54
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d118      	bne.n	8003b6c <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b48:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 ff08 	bl	8004978 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e00a      	b.n	8003b82 <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e008      	b.n	8003b82 <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0208 	orr.w	r2, r2, #8
 8003b7e:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	6039      	str	r1, [r7, #0]
 8003ba8:	71fb      	strb	r3, [r7, #7]
    return memory_order(__m & int(__mod));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b25a      	sxtb	r2, r3
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
  }
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZNSt6atomicIbEaSEb>:
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
    { return _M_base.operator=(__i); }
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f817 	bl	8003c0a <_ZNSt13__atomic_baseIbEaSEb>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IivEERKT_>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
 8003be6:	b490      	push	{r4, r7}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	e9c2 3400 	strd	r3, r4, [r2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc90      	pop	{r4, r7}
 8003c08:	4770      	bx	lr

08003c0a <_ZNSt13__atomic_baseIbEaSEb>:

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	70fb      	strb	r3, [r7, #3]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	72fb      	strb	r3, [r7, #11]
 8003c1e:	2305      	movs	r3, #5
 8003c20:	72bb      	strb	r3, [r7, #10]
      }

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 8003c22:	7abb      	ldrb	r3, [r7, #10]
 8003c24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ffb8 	bl	8003b9e <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	7afa      	ldrb	r2, [r7, #11]
 8003c36:	f3bf 8f5b 	dmb	ish
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	f3bf 8f5b 	dmb	ish
	return __i;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
      }
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZSt4moveIRPN6std_ex6thread6_StateEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZSt3maxIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	da01      	bge.n	8003c7a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	e000      	b.n	8003c7c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8003c7a:	687b      	ldr	r3, [r7, #4]
    }
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <_ZN6std_ex6thread6_StateC1Ev>:
		      }
#endif

	    // Abstract base class for types that wrap arbitrary functors to be
	    // invoked in the new thread of execution.
	    struct _State
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <_ZN6std_ex6thread6_StateC1Ev+0x1c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	08009da4 	.word	0x08009da4

08003cb8 <_ZN7drivers10GenericADCD1Ev>:

	class GenericADC
	{
	public:
		/** Destructor */
		virtual ~GenericADC() {}
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <_ZN7drivers10GenericADCD1Ev+0x1c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	08009db8 	.word	0x08009db8

08003cd8 <_ZN7drivers10GenericADCD0Ev>:
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ffe9 	bl	8003cb8 <_ZN7drivers10GenericADCD1Ev>
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f005 f951 	bl	8008f90 <_ZdlPvj>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_ZN7drivers10GenericADCC1Ev>:
	class GenericADC
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <_ZN7drivers10GenericADCC1Ev+0x1c>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	08009db8 	.word	0x08009db8

08003d18 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft>:


namespace drivers
{
	/** Parameter constructor */
	STM32ADC::STM32ADC(ADCResolution en_resolution, ADC_TypeDef* pt_adc_peripheral, uint32_t u32_adc_channel, GPIO_TypeDef* pt_gpio_block, uint16_t u16_gpio_pin)
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b098      	sub	sp, #96	; 0x60
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	460b      	mov	r3, r1
 8003d26:	72fb      	strb	r3, [r7, #11]

	//STM32ADC::STM32ADC(ADCResolution en_resolution, ADC_TypeDef* pt_adc_peripheral, GPIO_TypeDef* pt_gpio_block, uint16_t u16_gpio_pin)
		: m_en_adc_resolution(en_resolution), m_u32_adc_channel(u32_adc_channel),
		  m_u16_gpio_pin(u16_gpio_pin), m_pt_gpio_block(pt_gpio_block)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ffe4 	bl	8003cf8 <_ZN7drivers10GenericADCC1Ev>
 8003d30:	4a72      	ldr	r2, [pc, #456]	; (8003efc <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e4>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	7afa      	ldrb	r2, [r7, #11]
 8003d3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003d50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		static DMA_HandleTypeDef  DmaHandle;
		RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

		/*##-1- Enable peripherals and GPIO Clocks #################################*/
		/* Enable clock of GPIO associated to the peripheral channels */
		if (GPIOA == pt_gpio_block)
 8003d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d5a:	d10b      	bne.n	8003d74 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x5c>
		{
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5c:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d66:	6153      	str	r3, [r2, #20]
 8003d68:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]
		}

		/* Enable clock of ADCx peripheral */
		if (ADC1 == pt_adc_peripheral)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d7a:	d10c      	bne.n	8003d96 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x7e>
		{
			__HAL_RCC_ADC1_CLK_ENABLE();
 8003d7c:	4b60      	ldr	r3, [pc, #384]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	4a5f      	ldr	r2, [pc, #380]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6153      	str	r3, [r2, #20]
 8003d88:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	e00f      	b.n	8003db6 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x9e>
		}
		else if (ADC2 == pt_adc_peripheral)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a5a      	ldr	r2, [pc, #360]	; (8003f04 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1ec>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10b      	bne.n	8003db6 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x9e>
		{
			__HAL_RCC_ADC2_CLK_ENABLE();
 8003d9e:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4a57      	ldr	r2, [pc, #348]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6153      	str	r3, [r2, #20]
 8003daa:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1e8>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
		/*       "__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1)" or function         */
		/*       "HAL_RCCEx_PeriphCLKConfig()" (refer to comments in file           */
		/*       "stm32f3_hal_adc.c_ex" header).                                    */

		/* Enable asynchronous clock source of ADCx */
		RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
		RCC_PeriphCLKInitStruct.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8003dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f80b 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
		//__HAL_RCC_DMA2_CLK_ENABLE();


		/*##-2- Configure peripheral GPIO ##########################################*/
		/* Configure GPIO pin of the selected ADC channel */
		GPIO_InitStruct.Pin = m_u16_gpio_pin;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	653b      	str	r3, [r7, #80]	; 0x50
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	657b      	str	r3, [r7, #84]	; 0x54
		HAL_GPIO_Init(m_pt_gpio_block, &GPIO_InitStruct);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fc73 	bl	80016d0 <HAL_GPIO_Init>

		/* NVIC configuration for ADC interrupt */
		/* Priority: high-priority */
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003dea:	2200      	movs	r2, #0
 8003dec:	2100      	movs	r1, #0
 8003dee:	2012      	movs	r0, #18
 8003df0:	f7fd faf1 	bl	80013d6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003df4:	2012      	movs	r0, #18
 8003df6:	f7fd fb0a 	bl	800140e <HAL_NVIC_EnableIRQ>

		/* Configuration of ADCx init structure: ADC parameters and regular group */
#ifdef HAL_ADC_MODULE_ENABLED
		// TODO make sure to zero-initialize the structure
		m_adc_handle.State = 0u;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	649a      	str	r2, [r3, #72]	; 0x48
		m_adc_handle.Instance = pt_adc_peripheral;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]

		m_adc_handle.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e0c:	609a      	str	r2, [r3, #8]
		if (ADC_RESOLUTION_12BIT == m_en_adc_resolution)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d102      	bne.n	8003e1e <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x106>
		{
			m_adc_handle.Init.Resolution = ADC_RESOLUTION_12B;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
		}
		m_adc_handle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
		m_adc_handle.Init.ScanConvMode          = DISABLE;                       /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	615a      	str	r2, [r3, #20]
		m_adc_handle.Init.EOCSelection          = ADC_EOC_SEQ_CONV;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	619a      	str	r2, [r3, #24]
		m_adc_handle.Init.LowPowerAutoWait      = DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	61da      	str	r2, [r3, #28]
		m_adc_handle.Init.ContinuousConvMode    = ENABLE;                       /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	621a      	str	r2, [r3, #32]
		m_adc_handle.Init.NbrOfConversion       = 1;                             /* Parameter discarded because sequencer is disabled */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
		m_adc_handle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
		m_adc_handle.Init.NbrOfDiscConversion   = 1;                             /* Parameter discarded because sequencer is disabled */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c
		m_adc_handle.Init.ExternalTrigConv      =  ADC_SOFTWARE_START;   // ???
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
		m_adc_handle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34
		m_adc_handle.Init.DMAContinuousRequests = DISABLE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
		m_adc_handle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	63da      	str	r2, [r3, #60]	; 0x3c

		if (HAL_ADC_Init(&m_adc_handle) != HAL_OK)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fabe 	bl	80003ec <HAL_ADC_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x16e>
		{
			/* ADC initialization error */
			Error_Handler();
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8ba 	bl	8003ffa <_ZN7drivers8STM32ADC13Error_HandlerEv>
		/* Configuration of channel on ADCx regular group on sequencer rank 1 */
		/* Note: Considering IT occurring after each ADC conversion if ADC          */
		/*       conversion is out of the analog watchdog widow selected (ADC IT    */
		/*       enabled), select sampling time and ADC clock with sufficient       */
		/*       duration to not create an overhead situation in IRQHandler.        */
		sConfig.Channel      = m_u32_adc_channel;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	61fb      	str	r3, [r7, #28]
		sConfig.Rank         = ADC_REGULAR_RANK_1;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	623b      	str	r3, [r7, #32]
		sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8003e90:	2306      	movs	r3, #6
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.SingleDiff   = ADC_SINGLE_ENDED;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sConfig.Offset       = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30

		if (HAL_ADC_ConfigChannel(&m_adc_handle, &sConfig) != HAL_OK)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	f107 021c 	add.w	r2, r7, #28
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fe22 	bl	8000af4 <HAL_ADC_ConfigChannel>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1ae>
		{
			/* Channel Configuration Error */
			Error_Handler();
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f89a 	bl	8003ffa <_ZN7drivers8STM32ADC13Error_HandlerEv>
		}

		/* Run the ADC calibration in single-ended mode */
		if (HAL_ADCEx_Calibration_Start(&m_adc_handle, ADC_SINGLE_ENDED) != HAL_OK)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fda6 	bl	8000a1e <HAL_ADCEx_Calibration_Start>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft+0x1d0>
		{
			/* Calibration Error */
			Error_Handler();
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f889 	bl	8003ffa <_ZN7drivers8STM32ADC13Error_HandlerEv>
		}

		HAL_ADC_Start(&m_adc_handle);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fc0d 	bl	800070c <HAL_ADC_Start>
#endif
	}
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3760      	adds	r7, #96	; 0x60
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	08009b9c 	.word	0x08009b9c
 8003f00:	40021000 	.word	0x40021000
 8003f04:	50000100 	.word	0x50000100

08003f08 <_ZN7drivers8STM32ADCD1Ev>:

	/** Destructor. */
	STM32ADC::~STM32ADC()
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	4a11      	ldr	r2, [pc, #68]	; (8003f58 <_ZN7drivers8STM32ADCD1Ev+0x50>)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
	{
		  /*##-1- Reset peripherals ##################################################*/
		  ADCx_FORCE_RESET();
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <_ZN7drivers8STM32ADCD1Ev+0x54>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <_ZN7drivers8STM32ADCD1Ev+0x54>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6293      	str	r3, [r2, #40]	; 0x28
		  ADCx_RELEASE_RESET();
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <_ZN7drivers8STM32ADCD1Ev+0x54>)
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <_ZN7drivers8STM32ADCD1Ev+0x54>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6293      	str	r3, [r2, #40]	; 0x28

		  /*##-2- Disable peripherals and GPIO Clocks ################################*/
		  /* De-initialize GPIO pin of the selected ADC channel */
		  HAL_GPIO_DeInit(m_pt_gpio_block, m_u16_gpio_pin);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fd fd3e 	bl	80019bc <HAL_GPIO_DeInit>

		  /* Disable the NVIC configuration for ADC interrupt */
		  HAL_NVIC_DisableIRQ(ADC1_2_IRQn);
 8003f40:	2012      	movs	r0, #18
 8003f42:	f7fd fa72 	bl	800142a <HAL_NVIC_DisableIRQ>
	STM32ADC::~STM32ADC()
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff feb5 	bl	8003cb8 <_ZN7drivers10GenericADCD1Ev>
	}
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	08009b9c 	.word	0x08009b9c
 8003f5c:	40021000 	.word	0x40021000

08003f60 <_ZN7drivers8STM32ADCD0Ev>:
	STM32ADC::~STM32ADC()
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	}
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ffcd 	bl	8003f08 <_ZN7drivers8STM32ADCD1Ev>
 8003f6e:	2168      	movs	r1, #104	; 0x68
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f005 f80d 	bl	8008f90 <_ZdlPvj>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_ZNK7drivers8STM32ADC17get_adc_min_valueEv>:

	uint32_t STM32ADC::get_adc_min_value() const
	{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
			return 0u;
 8003f88:	2300      	movs	r3, #0

	}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <_ZNK7drivers8STM32ADC17get_adc_max_valueEv>:

	uint32_t STM32ADC::get_adc_max_value() const
	{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
		if (ADC_RESOLUTION_12BIT == m_en_adc_resolution)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d102      	bne.n	8003fae <_ZNK7drivers8STM32ADC17get_adc_max_valueEv+0x18>
		{
			return 0x0FFF;
 8003fa8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003fac:	e001      	b.n	8003fb2 <_ZNK7drivers8STM32ADC17get_adc_max_valueEv+0x1c>
		}
		return 0xFFFF;
 8003fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <_ZN7drivers8STM32ADC14read_adc_valueEv>:

	uint32_t STM32ADC::read_adc_value()
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
#ifdef HAL_ADC_MODULE_ENABLED
        if (HAL_ADC_PollForConversion(&m_adc_handle, 1) == HAL_OK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fc53 	bl	8000878 <HAL_ADC_PollForConversion>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <_ZN7drivers8STM32ADC14read_adc_valueEv+0x32>
        {
            return HAL_ADC_GetValue(&m_adc_handle);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fd0c 	bl	8000a04 <HAL_ADC_GetValue>
 8003fec:	4603      	mov	r3, r0
 8003fee:	e000      	b.n	8003ff2 <_ZN7drivers8STM32ADC14read_adc_valueEv+0x34>
        }
#endif
        return 0u;
 8003ff0:	2300      	movs	r3, #0
	}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZN7drivers8STM32ADC13Error_HandlerEv>:

	void STM32ADC::Error_Handler(void)
	{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
#ifdef USE_STM32_F3_DISCO
		  BSP_LED_Toggle(LED_RED);
#elif defined USE_STM32F3XX_NUCLEO_32
		  //BSP_LED_Toggle(LED_GREEN);
#endif
	    HAL_Delay(1000);
 8004002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004006:	f003 fc30 	bl	800786a <HAL_Delay>
 800400a:	e7fa      	b.n	8004002 <_ZN7drivers8STM32ADC13Error_HandlerEv+0x8>

0800400c <_ZN7drivers10GenericDACC1Ev>:
#include "generic_dac.hpp"

namespace drivers
{
GenericDAC::GenericDAC() {}
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <_ZN7drivers10GenericDACC1Ev+0x1c>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	08009bb8 	.word	0x08009bb8

0800402c <_ZN7drivers10GenericDACD1Ev>:
GenericDAC::~GenericDAC(){}
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <_ZN7drivers10GenericDACD1Ev+0x1c>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	08009bb8 	.word	0x08009bb8

0800404c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft>:
#define DACx_RELEASE_RESET()            __HAL_RCC_DAC1_RELEASE_RESET()

namespace drivers
{

	STM32DAC::STM32DAC(DAC_TypeDef* pt_dac_peripheral, GPIO_TypeDef* pt_gpio_block, uint16_t u16_gpio_pin)
 800404c:	b5b0      	push	{r4, r5, r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	807b      	strh	r3, [r7, #2]
		: m_pt_dac_peripheral(pt_dac_peripheral)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ffd5 	bl	800400c <_ZN7drivers10GenericDACC1Ev>
 8004062:	4a35      	ldr	r2, [pc, #212]	; (8004138 <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xec>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	605a      	str	r2, [r3, #4]
	{
		this->m_dac_handle.Instance = m_pt_dac_peripheral;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	609a      	str	r2, [r3, #8]

		// Initialize the DAC GPIO peripheral
		if (GPIOA == pt_gpio_block)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800407c:	d10b      	bne.n	8004096 <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0x4a>
		{
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf0>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4a2e      	ldr	r2, [pc, #184]	; (800413c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf0>)
 8004084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004088:	6153      	str	r3, [r2, #20]
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf0>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	69bb      	ldr	r3, [r7, #24]
		}
		if (DAC1 == pt_dac_peripheral)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a29      	ldr	r2, [pc, #164]	; (8004140 <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10b      	bne.n	80040b6 <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0x6a>
		{
			__HAL_RCC_DAC1_CLK_ENABLE();
 800409e:	4b27      	ldr	r3, [pc, #156]	; (800413c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf0>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a26      	ldr	r2, [pc, #152]	; (800413c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf0>)
 80040a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040a8:	61d3      	str	r3, [r2, #28]
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xf0>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
		}

		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = u16_gpio_pin;
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ba:	2303      	movs	r3, #3
 80040bc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(pt_gpio_block, &GPIO_InitStruct);
 80040c2:	f107 031c 	add.w	r3, r7, #28
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fd fb01 	bl	80016d0 <HAL_GPIO_Init>

#ifdef HAL_DAC_MODULE_ENABLED
		 if (HAL_DAC_Init(&this->m_dac_handle) != HAL_OK)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3308      	adds	r3, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd f9c3 	bl	800145e <HAL_DAC_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xa2>
		 {
		   /* Initialization Error */
		   Error_Handler();
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f905 	bl	80042f8 <_ZN7drivers8STM32DAC13Error_HandlerEv>
		 }

		 /*##-2- Configure DAC channel1 #############################################*/
		 this->m_dac_channel_config.DAC_Trigger = DAC_TRIGGER_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	61da      	str	r2, [r3, #28]
		 this->m_dac_channel_config.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2202      	movs	r2, #2
 80040f8:	621a      	str	r2, [r3, #32]

		 if (HAL_DAC_ConfigChannel(&this->m_dac_handle, &this->m_dac_channel_config, get_dac_channel()) != HAL_OK)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f103 0408 	add.w	r4, r3, #8
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f103 051c 	add.w	r5, r3, #28
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8e2 	bl	80042d0 <_ZNK7drivers8STM32DAC15get_dac_channelEv>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	4629      	mov	r1, r5
 8004112:	4620      	mov	r0, r4
 8004114:	f7fd fa36 	bl	8001584 <HAL_DAC_ConfigChannel>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft+0xe2>
		 {
		   /* Channel configuration Error */
		   Error_Handler();
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f8e5 	bl	80042f8 <_ZN7drivers8STM32DAC13Error_HandlerEv>
		 }
#endif
	}
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4618      	mov	r0, r3
 8004132:	3730      	adds	r7, #48	; 0x30
 8004134:	46bd      	mov	sp, r7
 8004136:	bdb0      	pop	{r4, r5, r7, pc}
 8004138:	08009be4 	.word	0x08009be4
 800413c:	40021000 	.word	0x40021000
 8004140:	40007400 	.word	0x40007400

08004144 <_ZN7drivers8STM32DACD1Ev>:

	STM32DAC::~STM32DAC()
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	4a0b      	ldr	r2, [pc, #44]	; (800417c <_ZN7drivers8STM32DACD1Ev+0x38>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
	{
		/* Enable DAC reset state */
		DACx_FORCE_RESET();
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <_ZN7drivers8STM32DACD1Ev+0x3c>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <_ZN7drivers8STM32DACD1Ev+0x3c>)
 8004158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800415c:	6113      	str	r3, [r2, #16]

		/* Release DAC from reset state */
		DACx_RELEASE_RESET();
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <_ZN7drivers8STM32DACD1Ev+0x3c>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <_ZN7drivers8STM32DACD1Ev+0x3c>)
 8004164:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004168:	6113      	str	r3, [r2, #16]
	STM32DAC::~STM32DAC()
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff5d 	bl	800402c <_ZN7drivers10GenericDACD1Ev>
	}
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	08009be4 	.word	0x08009be4
 8004180:	40021000 	.word	0x40021000

08004184 <_ZN7drivers8STM32DACD0Ev>:
	STM32DAC::~STM32DAC()
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	}
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ffd9 	bl	8004144 <_ZN7drivers8STM32DACD1Ev>
 8004192:	2128      	movs	r1, #40	; 0x28
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f004 fefb 	bl	8008f90 <_ZdlPvj>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_ZN7drivers8STM32DAC16set_output_valueEm>:

	/** Function to set the output by value */
	int32_t STM32DAC::set_output_value(uint32_t value)
	{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
		//value = std::min(value, this->get_max_value());
		//value = std::max(value, this->get_min_value());
#ifdef HAL_DAC_MODULE_ENABLED
		/*##-3- Set DAC Channel1 DHR register ######################################*/
		if (HAL_DAC_SetValue(&this->m_dac_handle, get_dac_channel(), DAC_ALIGN_8B_R, static_cast<uint8_t>(value)) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f103 0408 	add.w	r4, r3, #8
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f88b 	bl	80042d0 <_ZNK7drivers8STM32DAC15get_dac_channelEv>
 80041ba:	4601      	mov	r1, r0
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2208      	movs	r2, #8
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7fd f96d 	bl	80014a2 <HAL_DAC_SetValue>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <_ZN7drivers8STM32DAC16set_output_valueEm+0x3a>
		{
			/* Setting value Error */
			return -1;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	e016      	b.n	800420c <_ZN7drivers8STM32DAC16set_output_valueEm+0x68>
		}

		/*##-4- Enable DAC Channel1 ################################################*/
		if (HAL_DAC_Start(&this->m_dac_handle, get_dac_channel()) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f103 0408 	add.w	r4, r3, #8
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f873 	bl	80042d0 <_ZNK7drivers8STM32DAC15get_dac_channelEv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4619      	mov	r1, r3
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7fd f97c 	bl	80014ec <HAL_DAC_Start>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <_ZN7drivers8STM32DAC16set_output_valueEm+0x66>
		{
			/* Start Error */
			return -2;
 8004204:	f06f 0301 	mvn.w	r3, #1
 8004208:	e000      	b.n	800420c <_ZN7drivers8STM32DAC16set_output_valueEm+0x68>
		}
#endif
		return 0;
 800420a:	2300      	movs	r3, #0

	}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}

08004214 <_ZNK7drivers8STM32DAC13get_max_valueEv>:

	uint32_t STM32DAC::get_max_value() const
	{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
		return 0xFF;
 800421c:	23ff      	movs	r3, #255	; 0xff
	}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_ZNK7drivers8STM32DAC13get_min_valueEv>:

	uint32_t STM32DAC::get_min_value() const
	{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
		return 0x0;
 8004232:	2300      	movs	r3, #0
	}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <_ZNK7drivers8STM32DAC15get_max_voltageEv>:

	int32_t STM32DAC::get_max_voltage() const
	{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
		return 3100; // VDDA - 0.2V
 8004248:	f640 431c 	movw	r3, #3100	; 0xc1c
	}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <_ZNK7drivers8STM32DAC15get_min_voltageEv>:

	int32_t STM32DAC::get_min_voltage() const
	{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
		return 200; // 0.2V
 8004260:	23c8      	movs	r3, #200	; 0xc8
	}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <_ZN7drivers8STM32DAC18set_output_voltageEl>:

	int32_t STM32DAC::set_output_voltage(int32_t i32_value)
	{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
		i32_value = std::max(i32_value, static_cast<int32_t>(0));
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	463b      	mov	r3, r7
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fcea 	bl	8003c60 <_ZSt3maxIlERKT_S2_S2_>
 800428c:	4603      	mov	r3, r0
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	603b      	str	r3, [r7, #0]
		const uint32_t u32_adc_value = static_cast<uint32_t>(i32_value * get_max_value()) / 3300u;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	4603      	mov	r3, r0
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	4a08      	ldr	r2, [pc, #32]	; (80042cc <_ZN7drivers8STM32DAC18set_output_voltageEl+0x5c>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	60fb      	str	r3, [r7, #12]
		return set_output_value(u32_adc_value);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
 80042c0:	4603      	mov	r3, r0
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	09ee009f 	.word	0x09ee009f

080042d0 <_ZNK7drivers8STM32DAC15get_dac_channelEv>:

	uint32_t STM32DAC::get_dac_channel() const
	{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
		if (m_pt_dac_peripheral == DAC1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <_ZNK7drivers8STM32DAC15get_dac_channelEv+0x24>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <_ZNK7drivers8STM32DAC15get_dac_channelEv+0x16>
		{
			return DAC_CHANNEL_1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <_ZNK7drivers8STM32DAC15get_dac_channelEv+0x18>
		}
		return DAC_CHANNEL_2;
 80042e6:	2310      	movs	r3, #16
	}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40007400 	.word	0x40007400

080042f8 <_ZN7drivers8STM32DAC13Error_HandlerEv>:

	void STM32DAC::Error_Handler(void)
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
#ifdef USE_STM32_F3_DISCO
		  BSP_LED_Toggle(LED_RED);
#elif defined USE_STM32F3XX_NUCLEO_32
		 // BSP_LED_Toggle(LED_GREEN);
#endif
	    HAL_Delay(1000);
 8004300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004304:	f003 fab1 	bl	800786a <HAL_Delay>
 8004308:	e7fa      	b.n	8004300 <_ZN7drivers8STM32DAC13Error_HandlerEv+0x8>

0800430a <HAL_DAC_MspInit>:


extern "C"
{
	void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac)
	{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
	  //DACx_CHANNEL_GPIO_CLK_ENABLE();
	  /* DAC Periph clock enable */
	  //DACx_CLK_ENABLE();

	  /* Do not initialize the GPIO here, do it in the constructor of the DAC class */
	}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <_ZN7drivers11GenericUARTC1Ev>:
#include "generic_uart.hpp"

namespace drivers
{
GenericUART::GenericUART(){}
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <_ZN7drivers11GenericUARTC1Ev+0x1c>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	08009c0c 	.word	0x08009c0c

08004340 <_ZN7drivers11GenericUARTD1Ev>:
	//GenericUART(GPIO_TypeDef* pt_rx_gpio_block,  uint16_t u16_rx_pin, GPIO_TypeDef* pt_tx_gpio_block,  uint16_t u16_tx_pin);
GenericUART::~GenericUART(){}
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	4a04      	ldr	r2, [pc, #16]	; (800435c <_ZN7drivers11GenericUARTD1Ev+0x1c>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	08009c0c 	.word	0x08009c0c

08004360 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f805 	bl	8004396 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
    }
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:

#if __cplusplus < 201103L
	  _Rb_tree_impl()
	  { }
#else
	  _Rb_tree_impl() = default;
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fb02 	bl	80049d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEC1Ev>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb16 	bl	8004a04 <_ZNSt20_Rb_tree_key_compareISt4lessIPK18UART_HandleTypeDefEEC1Ev>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ffcb 	bl	8004378 <_ZNSt15_Rb_tree_headerC1Ev>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
        struct _Rb_tree_impl
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 faf9 	bl	80049ec <_ZNSaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEED1Ev>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ffd7 	bl	80043c2 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ffeb 	bl	8004404 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EEC1Ev>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl() = default;
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 faff 	bl	8004a44 <_ZNSaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEC1Ev>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fb13 	bl	8004a74 <_ZNSt20_Rb_tree_key_compareISt4lessIKlEEC1Ev>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff90 	bl	8004378 <_ZNSt15_Rb_tree_headerC1Ev>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
        struct _Rb_tree_impl
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 faf6 	bl	8004a5c <_ZNSaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEED1Ev>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>:
      _Rb_tree() = default;
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ffd7 	bl	8004438 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEC1Ev>:
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ffeb 	bl	800447a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t>:
namespace drivers
{
	std::map<const UART_HandleTypeDef*, STM32HardwareUART*> map_uart_handles_to_object;
	std::map<const int32_t, STM32HardwareUART*> map_uart_peripheral_id_to_object;

	STM32HardwareUART::STM32HardwareUART(GPIO_TypeDef* pt_rx_gpio_block,  uint16_t u16_rx_pin, \
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b09a      	sub	sp, #104	; 0x68
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	80fb      	strh	r3, [r7, #6]
			GPIO_TypeDef* pt_tx_gpio_block,  uint16_t u16_tx_pin)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff2c 	bl	8004320 <_ZN7drivers11GenericUARTC1Ev>
 80044c8:	4a6d      	ldr	r2, [pc, #436]	; (8004680 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1d0>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
	{
		UartReady = RESET;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		m_uart_rx_interrupt_status = RESET;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		m_o_uart_handle = {};
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3318      	adds	r3, #24
 80044e2:	2270      	movs	r2, #112	; 0x70
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fe9c 	bl	8009224 <memset>

		// add to map
		map_uart_handles_to_object.emplace(&this->m_o_uart_handle, this);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3318      	adds	r3, #24
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
 80044f6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80044fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004502:	4960      	ldr	r1, [pc, #384]	; (8004684 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1d4>)
 8004504:	f000 faec 	bl	8004ae0 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE7emplaceIJPS0_S5_EEES8_ISt17_Rb_tree_iteratorISA_EbEDpOT_>
//#define USARTx_IRQn                      USART2_IRQn
//#define USARTx_IRQHandler                USART2_IRQHandler

		}
#elif defined USE_STM32F3XX_NUCLEO_32
		if (pt_rx_gpio_block == GPIOC && u16_rx_pin == GPIO_PIN_5 &&
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a5f      	ldr	r2, [pc, #380]	; (8004688 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1d8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d156      	bne.n	80045be <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x10e>
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b20      	cmp	r3, #32
 8004514:	d153      	bne.n	80045be <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x10e>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	4a5b      	ldr	r2, [pc, #364]	; (8004688 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1d8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d14f      	bne.n	80045be <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x10e>
			pt_tx_gpio_block == GPIOC && u16_tx_pin == GPIO_PIN_4)
 800451e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004522:	2b10      	cmp	r3, #16
 8004524:	d14b      	bne.n	80045be <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x10e>
		{
			/*##-1- Enable peripherals and GPIO Clocks #################################*/
			/* Enable GPIO TX/RX clock */
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8004526:	4b59      	ldr	r3, [pc, #356]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4a58      	ldr	r2, [pc, #352]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 800452c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004530:	6153      	str	r3, [r2, #20]
 8004532:	4b56      	ldr	r3, [pc, #344]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	6a3b      	ldr	r3, [r7, #32]

			/* Enable USARTx clock */
			__HAL_RCC_USART1_CLK_ENABLE();
 800453e:	4b53      	ldr	r3, [pc, #332]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	4a52      	ldr	r2, [pc, #328]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 8004544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004548:	6193      	str	r3, [r2, #24]
 800454a:	4b50      	ldr	r3, [pc, #320]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	69fb      	ldr	r3, [r7, #28]

			/*##-2- Configure peripheral GPIO ##########################################*/
			/* UART TX GPIO pin configuration  */
			GPIO_InitStruct.Pin       = u16_tx_pin;
 8004556:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800455c:	2302      	movs	r3, #2
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004560:	2301      	movs	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004564:	2303      	movs	r3, #3
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
			GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004568:	2307      	movs	r3, #7
 800456a:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800456c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004570:	4619      	mov	r1, r3
 8004572:	4847      	ldr	r0, [pc, #284]	; (8004690 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1e0>)
 8004574:	f7fd f8ac 	bl	80016d0 <HAL_GPIO_Init>

			/* UART RX GPIO pin configuration  */
			GPIO_InitStruct.Pin = u16_rx_pin;
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800457c:	2307      	movs	r3, #7
 800457e:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004584:	4619      	mov	r1, r3
 8004586:	4842      	ldr	r0, [pc, #264]	; (8004690 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1e0>)
 8004588:	f7fd f8a2 	bl	80016d0 <HAL_GPIO_Init>

			/*##-3- Configure the NVIC for UART ########################################*/
			/* NVIC for USART */
			HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 800458c:	2201      	movs	r2, #1
 800458e:	2100      	movs	r1, #0
 8004590:	2025      	movs	r0, #37	; 0x25
 8004592:	f7fc ff20 	bl	80013d6 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004596:	2025      	movs	r0, #37	; 0x25
 8004598:	f7fc ff39 	bl	800140e <HAL_NVIC_EnableIRQ>


			// STM32F303 UART2 peripherals
			m_o_uart_handle.Instance        = USART1;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a3d      	ldr	r2, [pc, #244]	; (8004694 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1e4>)
 80045a0:	619a      	str	r2, [r3, #24]
			map_uart_peripheral_id_to_object.emplace(2, this);
 80045a2:	2302      	movs	r3, #2
 80045a4:	653b      	str	r3, [r7, #80]	; 0x50
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	657b      	str	r3, [r7, #84]	; 0x54
 80045aa:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80045ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80045b6:	4938      	ldr	r1, [pc, #224]	; (8004698 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1e8>)
 80045b8:	f000 fab6 	bl	8004b28 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE7emplaceIJiS3_EEES6_ISt17_Rb_tree_iteratorIS7_EbEDpOT_>
 80045bc:	e05b      	b.n	8004676 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1c6>
		}
		else if (pt_rx_gpio_block == GPIOA && u16_rx_pin == GPIO_PIN_3 &&
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045c4:	d157      	bne.n	8004676 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1c6>
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d154      	bne.n	8004676 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1c6>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045d2:	d150      	bne.n	8004676 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1c6>
				pt_tx_gpio_block == GPIOA && u16_tx_pin == GPIO_PIN_2)
 80045d4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d14c      	bne.n	8004676 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1c6>
		{
			/*##-1- Enable peripherals and GPIO Clocks #################################*/
			/* Enable GPIO TX/RX clock */
			__HAL_RCC_GPIOA_CLK_ENABLE();
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	4a2a      	ldr	r2, [pc, #168]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 80045e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e6:	6153      	str	r3, [r2, #20]
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	69bb      	ldr	r3, [r7, #24]

			/* Enable USARTx clock */
			__HAL_RCC_USART2_CLK_ENABLE();
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4a24      	ldr	r2, [pc, #144]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 80045fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fe:	61d3      	str	r3, [r2, #28]
 8004600:	4b22      	ldr	r3, [pc, #136]	; (800468c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1dc>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]

			/*##-2- Configure peripheral GPIO ##########################################*/
			/* UART TX GPIO pin configuration  */
			GPIO_InitStruct.Pin       = u16_tx_pin;
 800460c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004616:	2301      	movs	r3, #1
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800461a:	2303      	movs	r3, #3
 800461c:	633b      	str	r3, [r7, #48]	; 0x30
			GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800461e:	2307      	movs	r3, #7
 8004620:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800462c:	f7fd f850 	bl	80016d0 <HAL_GPIO_Init>

			/* UART RX GPIO pin configuration  */
			GPIO_InitStruct.Pin = u16_rx_pin;
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004634:	2307      	movs	r3, #7
 8004636:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463c:	4619      	mov	r1, r3
 800463e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004642:	f7fd f845 	bl	80016d0 <HAL_GPIO_Init>

			/*##-3- Configure the NVIC for UART ########################################*/
			/* NVIC for USART */
			HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8004646:	2201      	movs	r2, #1
 8004648:	2100      	movs	r1, #0
 800464a:	2026      	movs	r0, #38	; 0x26
 800464c:	f7fc fec3 	bl	80013d6 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004650:	2026      	movs	r0, #38	; 0x26
 8004652:	f7fc fedc 	bl	800140e <HAL_NVIC_EnableIRQ>


			// STM32F303 UART2 peripherals
			m_o_uart_handle.Instance        = USART2;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a10      	ldr	r2, [pc, #64]	; (800469c <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1ec>)
 800465a:	619a      	str	r2, [r3, #24]
			map_uart_peripheral_id_to_object.emplace(2, this);
 800465c:	2302      	movs	r3, #2
 800465e:	663b      	str	r3, [r7, #96]	; 0x60
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	667b      	str	r3, [r7, #100]	; 0x64
 8004664:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004668:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800466c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004670:	4909      	ldr	r1, [pc, #36]	; (8004698 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t+0x1e8>)
 8004672:	f000 fa59 	bl	8004b28 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE7emplaceIJiS3_EEES6_ISt17_Rb_tree_iteratorIS7_EbEDpOT_>
		}
#endif
	}
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4618      	mov	r0, r3
 800467a:	3768      	adds	r7, #104	; 0x68
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08009c4c 	.word	0x08009c4c
 8004684:	20000098 	.word	0x20000098
 8004688:	48000800 	.word	0x48000800
 800468c:	40021000 	.word	0x40021000
 8004690:	48000c00 	.word	0x48000c00
 8004694:	40013800 	.word	0x40013800
 8004698:	200000b0 	.word	0x200000b0
 800469c:	40004400 	.word	0x40004400

080046a0 <_ZN7drivers17STM32HardwareUARTD1Ev>:

	STM32HardwareUART::~STM32HardwareUART()
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <_ZN7drivers17STM32HardwareUARTD1Ev+0x20>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fe45 	bl	8004340 <_ZN7drivers11GenericUARTD1Ev>
	{}
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	08009c4c 	.word	0x08009c4c

080046c4 <_ZN7drivers17STM32HardwareUARTD0Ev>:
	STM32HardwareUART::~STM32HardwareUART()
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	{}
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ffe7 	bl	80046a0 <_ZN7drivers17STM32HardwareUARTD1Ev>
 80046d2:	218c      	movs	r1, #140	; 0x8c
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f004 fc5b 	bl	8008f90 <_ZdlPvj>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb>:


	void STM32HardwareUART::connect(uint64_t u64_baud, UARTSignalWordLength en_word_length, UARTSignalStopBits en_stop_bits, \
			UARTSignalFlowControl en_flow_control, bool invert)
	{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b08b      	sub	sp, #44	; 0x2c
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	e9c7 2300 	strd	r2, r3, [r7]
	      - Stop Bit = One Stop bit
	      - Parity = None
	      - BaudRate = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */

		m_o_uart_handle.Init.BaudRate = u64_baud;
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	61da      	str	r2, [r3, #28]
		switch (en_word_length)
 80046f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0x22>
		{
		case UART_WORD_LENGTH_8BIT:
			m_o_uart_handle.Init.WordLength = UART_WORDLENGTH_8B;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	621a      	str	r2, [r3, #32]
		break;
 8004704:	bf00      	nop
		}

		switch (en_stop_bits)
 8004706:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0x38>
 800470e:	2b01      	cmp	r3, #1
 8004710:	d108      	bne.n	8004724 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0x40>
		{
		case UART_STOP_BITS_1_5:
			m_o_uart_handle.Init.StopBits     = UART_STOPBITS_1_5;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800471a:	e003      	b.n	8004724 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0x40>
		case UART_STOP_BITS_1:
			m_o_uart_handle.Init.StopBits     = UART_STOPBITS_1;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004722:	bf00      	nop
		}

		switch (en_flow_control)
 8004724:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0x50>
		{
		case UART_FLOW_CONTROL_NONE:
			m_o_uart_handle.Init.Parity       = UART_PARITY_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8004732:	bf00      	nop
		}

		m_o_uart_handle.Init.Mode         = UART_MODE_TX_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	220c      	movs	r2, #12
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c
		m_o_uart_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	635a      	str	r2, [r3, #52]	; 0x34
		m_o_uart_handle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	63da      	str	r2, [r3, #60]	; 0x3c



		if(HAL_UART_DeInit(&m_o_uart_handle) != HAL_OK)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3318      	adds	r3, #24
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fcbf 	bl	80030ce <HAL_UART_DeInit>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0x82>
		{
			Error_Handler();
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f8e7 	bl	8004934 <_ZNK7drivers17STM32HardwareUART13Error_HandlerEv>
		}
		if(HAL_UART_Init(&m_o_uart_handle) != HAL_OK)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fc5e 	bl	800302c <HAL_UART_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0xa2>
		{
			Error_Handler();
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8d7 	bl	8004934 <_ZNK7drivers17STM32HardwareUART13Error_HandlerEv>
		}

		m_u32_rx_buffer_usage = 0;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	60da      	str	r2, [r3, #12]

		auto main_func = std::bind(&STM32HardwareUART::uart_main, this);
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <_ZN7drivers17STM32HardwareUART7connectEyNS_20UARTSignalWordLengthENS_18UARTSignalStopBitsENS_21UARTSignalFlowControlEb+0xe8>)
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	2300      	movs	r3, #0
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	f107 0310 	add.w	r3, r7, #16
 800479c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80047a0:	f107 011c 	add.w	r1, r7, #28
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f9e3 	bl	8004b70 <_ZSt4bindIMN7drivers17STM32HardwareUARTEFvvEJPS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISB_EEE5valueES9_JDpT0_EE4typeEOS9_DpOSG_>

		//std::thread m_p_uart_buffer_thread(main_func);
		m_p_uart_buffer_thread = new std_ex::thread(main_func);
 80047aa:	2034      	movs	r0, #52	; 0x34
 80047ac:	f004 fbf2 	bl	8008f94 <_Znwj>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461c      	mov	r4, r3
 80047b4:	f107 0310 	add.w	r3, r7, #16
 80047b8:	4619      	mov	r1, r3
 80047ba:	4620      	mov	r0, r4
 80047bc:	f000 fa51 	bl	8004c62 <_ZN6std_ex6threadC1IRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS4_EEJEEEOT_DpOT0_>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	611c      	str	r4, [r3, #16]
	}
 80047c4:	bf00      	nop
 80047c6:	372c      	adds	r7, #44	; 0x2c
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	0800490f 	.word	0x0800490f

080047d0 <_ZN7drivers17STM32HardwareUART10disconnectEv>:
	void STM32HardwareUART::disconnect()
	{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
		// TODO
	}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_ZN7drivers17STM32HardwareUART16update_baud_rateEy>:

	void STM32HardwareUART::update_baud_rate(uint64_t u64_baud)
	{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	e9c7 2300 	strd	r2, r3, [r7]

	}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <_ZNK7drivers17STM32HardwareUART9availableEv>:

	int STM32HardwareUART::available(void) const
	{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
		return m_u32_rx_buffer_usage;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
		//return m_o_uart_handle.RxXferCount;
	}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <_ZNK7drivers17STM32HardwareUART19available_for_writeEv>:

	int STM32HardwareUART::available_for_write(void) const
	{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
		return 0;
 800481c:	2300      	movs	r3, #0
	}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <_ZNK7drivers17STM32HardwareUART4peekEv>:

	int STM32HardwareUART::peek(void) const
	{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
		//return m_o_uart_handle.RxXferCount;
		return m_u32_rx_buffer_usage;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
	}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZN7drivers17STM32HardwareUART4readEv>:

	int STM32HardwareUART::read(void)
	{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
		if(HAL_UART_Receive(&m_o_uart_handle, reinterpret_cast<uint8_t*>(ai8_buffer), 1, 100) == HAL_OK)
		{
			return static_cast<int>(ai8_buffer[0]);
		}
#else
		int retval = -1;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	60fb      	str	r3, [r7, #12]
		if (m_u32_rx_buffer_usage > 0)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d011      	beq.n	800487c <_ZN7drivers17STM32HardwareUART4readEv+0x3a>
		{
			retval = m_au8_rx_buffer[0];
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	791b      	ldrb	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
			m_u32_rx_buffer_usage--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]
			// move the entire content... terrible design, but no time to implement
			memmove(m_au8_rx_buffer, m_au8_rx_buffer + 1, m_u32_rx_buffer_usage);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1d18      	adds	r0, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f004 fcbb 	bl	80091f2 <memmove>
		}
		return retval;
 800487c:	68fb      	ldr	r3, [r7, #12]
#endif
	}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <_ZN7drivers17STM32HardwareUART5flushEv>:

	void STM32HardwareUART::flush(void)
	{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
	}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZN7drivers17STM32HardwareUART5writeEPKhj>:

	size_t STM32HardwareUART::write(const uint8_t *a_u8_buffer, size_t size)
	{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
		//wait for the device to be ready
		while (m_o_uart_handle.gState != HAL_UART_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d000      	beq.n	80048be <_ZN7drivers17STM32HardwareUART5writeEPKhj+0x24>
 80048bc:	e7f3      	b.n	80048a6 <_ZN7drivers17STM32HardwareUART5writeEPKhj+0xc>
		{
			// lock the access to the hardware
#ifdef HAS_STD_MUTEX
			std::lock_guard<std::mutex> guard(this->m_o_interrupt_mutex);
#endif
			if(HAL_UART_Transmit_IT(&m_o_uart_handle, const_cast<uint8_t*>(a_u8_buffer), size) != HAL_OK)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3318      	adds	r3, #24
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	b292      	uxth	r2, r2
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fc4c 	bl	8003166 <HAL_UART_Transmit_IT>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <_ZN7drivers17STM32HardwareUART5writeEPKhj+0x4a>
			{
				Error_Handler();
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f828 	bl	8004934 <_ZNK7drivers17STM32HardwareUART13Error_HandlerEv>
			}

			while (UartReady != SET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d000      	beq.n	80048fc <_ZN7drivers17STM32HardwareUART5writeEPKhj+0x62>
 80048fa:	e7f3      	b.n	80048e4 <_ZN7drivers17STM32HardwareUART5writeEPKhj+0x4a>
			{
			}
			UartReady = RESET;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		}
		return size;
 8004904:	687b      	ldr	r3, [r7, #4]
	}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <_ZN7drivers17STM32HardwareUART9uart_mainEv>:

	void STM32HardwareUART::uart_main()
	{
 800490e:	b580      	push	{r7, lr}
 8004910:	b08e      	sub	sp, #56	; 0x38
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
		while(true)
		{
		//
			std_ex::sleep_for(std::chrono::milliseconds(100));
 8004916:	2364      	movs	r3, #100	; 0x64
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800491e:	f107 0318 	add.w	r3, r7, #24
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff f95e 	bl	8003be6 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IivEERKT_>
 800492a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800492e:	f004 fa10 	bl	8008d52 <_ZN6std_ex9sleep_forENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>
 8004932:	e7f0      	b.n	8004916 <_ZN7drivers17STM32HardwareUART9uart_mainEv+0x8>

08004934 <_ZNK7drivers17STM32HardwareUART13Error_HandlerEv>:

		DEBUG_PRINTF("UART thread will terminate now.");
	}

	void STM32HardwareUART::Error_Handler(void) const
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
#ifdef USE_STM32_F3_DISCO
		  BSP_LED_Toggle(LED_RED);
#elif defined USE_STM32F3XX_NUCLEO_32
		  //BSP_LED_Toggle(LED_GREEN);
#endif
	    HAL_Delay(1000);
 800493c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004940:	f002 ff93 	bl	800786a <HAL_Delay>
 8004944:	e7fa      	b.n	800493c <_ZNK7drivers17STM32HardwareUART13Error_HandlerEv+0x8>
	...

08004948 <HAL_UART_TxCpltCallback>:
#endif

extern "C"
{
	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	  /* Set transmission flag: transfer complete */
		drivers::map_uart_handles_to_object[UartHandle]->UartReady = SET;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	4619      	mov	r1, r3
 800495a:	4806      	ldr	r0, [pc, #24]	; (8004974 <HAL_UART_TxCpltCallback+0x2c>)
 800495c:	f000 fa18 	bl	8004d90 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_>
 8004960:	4603      	mov	r3, r0
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		//UartReady = SET;

	  /* Turn LED3 on: Transfer in transmission process is correct */
	  //BSP_LED_On(LED3);

	}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000098 	.word	0x20000098

08004978 <HAL_UART_RxCpltCallback>:
	  * @note   This example shows a simple way to report end of DMA Rx transfer, and
	  *         you can add your own implementation.
	  * @retval None
	  */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	  /* Set transmission flag: transfer complete */
		drivers::map_uart_handles_to_object[UartHandle]->m_uart_rx_interrupt_status = SET;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4619      	mov	r1, r3
 800498a:	4806      	ldr	r0, [pc, #24]	; (80049a4 <HAL_UART_RxCpltCallback+0x2c>)
 800498c:	f000 fa00 	bl	8004d90 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_>
 8004990:	4603      	mov	r3, r0
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		//UartReady = SET;

	  /* Turn LED5 on: Transfer in reception process is correct */
	  //BSP_LED_On(LED5);

	}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000098 	.word	0x20000098

080049a8 <USART2_IRQHandler>:

	void USART2_IRQHandler(void)
	{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
	  HAL_UART_IRQHandler(&drivers::map_uart_peripheral_id_to_object[2]->m_o_uart_handle);
 80049ae:	2302      	movs	r3, #2
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4806      	ldr	r0, [pc, #24]	; (80049d0 <USART2_IRQHandler+0x28>)
 80049b8:	f000 fab8 	bl	8004f2c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_>
 80049bc:	4603      	mov	r3, r0
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3318      	adds	r3, #24
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fc16 	bl	80031f4 <HAL_UART_IRQHandler>
	}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200000b0 	.word	0x200000b0

080049d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fb05 	bl	8004fec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEC1Ev>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_ZNSaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb04 	bl	8005002 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEED1Ev>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZNSt20_Rb_tree_key_compareISt4lessIPK18UART_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
      { }
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EED1Ev>:
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fb17 	bl	8005056 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 faf3 	bl	8005018 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fcd9 	bl	80043ec <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZNSaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEC1Ev>:
      allocator() throw() { }
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fb0e 	bl	800506e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEC1Ev>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZNSaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEED1Ev>:
      ~allocator() throw() { }
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb0d 	bl	8005084 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEED1Ev>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_ZNSt20_Rb_tree_key_compareISt4lessIKlEEC1Ev>:
      _Rb_tree_key_compare()
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
      { }
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fb20 	bl	80050d8 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fafc 	bl	800509a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fcdc 	bl	8004462 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE7emplaceIJPS0_S5_EEES8_ISt17_Rb_tree_iteratorISA_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8004ae0:	b5b0      	push	{r4, r5, r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
	{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
 8004aee:	68bc      	ldr	r4, [r7, #8]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ffdf 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8004af6:	4605      	mov	r5, r0
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f7ff ffe6 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004afe:	4603      	mov	r3, r0
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	462a      	mov	r2, r5
 8004b04:	4621      	mov	r1, r4
 8004b06:	f000 faf3 	bl	80050f0 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJPS0_S7_EEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bdb0      	pop	{r4, r5, r7, pc}

08004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE7emplaceIJiS3_EEES6_ISt17_Rb_tree_iteratorIS7_EbEDpOT_>:
	emplace(_Args&&... __args)
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
	{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
 8004b36:	68bc      	ldr	r4, [r7, #8]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ffea 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8004b3e:	4605      	mov	r5, r0
 8004b40:	6838      	ldr	r0, [r7, #0]
 8004b42:	f7ff ffc2 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b46:	4603      	mov	r3, r0
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	f000 fb1f 	bl	8005190 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_emplace_uniqueIJiS4_EEES1_ISt17_Rb_tree_iteratorIS5_EbEDpOT_>
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bdb0      	pop	{r4, r5, r7, pc}

08004b5a <_ZSt7forwardIMN7drivers17STM32HardwareUARTEFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <_ZSt4bindIMN7drivers17STM32HardwareUARTEFvvEJPS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISB_EEE5valueES9_JDpT0_EE4typeEOS9_DpOSG_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f7ff ffec 	bl	8004b5a <_ZSt7forwardIMN7drivers17STM32HardwareUARTEFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004b82:	4604      	mov	r4, r0
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ffa0 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4621      	mov	r1, r4
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fb4d 	bl	8005230 <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EEC1IJS4_EEEOS3_DpOT_>
    }
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd90      	pop	{r4, r7, pc}

08004b9e <_ZSt4moveIRSt5tupleIJPN7drivers17STM32HardwareUARTEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <_ZNSt5tupleIJPN7drivers17STM32HardwareUARTEEEC1EOS3_>:
      constexpr tuple(tuple&&) = default;
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fb75 	bl	80052b4 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEEC1EOS3_>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EEC1EOS6_>:
      _Bind(_Bind&& __b)
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fb44 	bl	800526e <_ZSt4moveIRMN7drivers17STM32HardwareUARTEFvvEEONSt16remove_referenceIT_E4typeEOS6_>
 8004be6:	4602      	mov	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bee:	e883 0003 	stmia.w	r3, {r0, r1}
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f103 0408 	add.w	r4, r3, #8
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ffce 	bl	8004b9e <_ZSt4moveIRSt5tupleIJPN7drivers17STM32HardwareUARTEEEEONSt16remove_referenceIT_E4typeEOS7_>
 8004c02:	4603      	mov	r3, r0
 8004c04:	4619      	mov	r1, r3
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7ff ffd4 	bl	8004bb4 <_ZNSt5tupleIJPN7drivers17STM32HardwareUARTEEEC1EOS3_>
      { }
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}

08004c16 <_ZSt7forwardIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZSt7forwardISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_ZSt8__invokeISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEJEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 8004c42:	b590      	push	{r4, r7, lr}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ffee 	bl	8004c2c <_ZSt7forwardISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4619      	mov	r1, r3
 8004c54:	4620      	mov	r0, r4
 8004c56:	f000 fb9e 	bl	8005396 <_ZSt13__invoke_implIvSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEJEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
 8004c5a:	bf00      	nop
    }
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd90      	pop	{r4, r7, pc}

08004c62 <_ZN6std_ex6threadC1IRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS4_EEJEEEOT_DpOT0_>:
	    using _State_ptr = _State*; //std::unique_ptr<_State>;


	    template<typename _Callable, typename... _Args>
	      explicit
	      thread(_Callable&& __f, _Args&&... __args)
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
	    	: m_task_handle(nullptr)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
#if 0
	    	_State_ptr state_ptr = _S_make_state(
	  		      std::__bind_simple(std::forward<_Callable>(__f),
	  					 std::forward<_Args>(__args)...));
#else
	    	_State_ptr state_ptr = _S_make_state(
 8004c72:	6838      	ldr	r0, [r7, #0]
 8004c74:	f7ff ffcf 	bl	8004c16 <_ZSt7forwardIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f107 030c 	add.w	r3, r7, #12
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fb76 	bl	8005372 <_ZN6std_ex6thread14__make_invokerIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS4_EEJEEENS0_8_InvokerISt5tupleIJNSt5decayIT_E4typeEDpNSD_IT0_E4typeEEEEEOSE_DpOSH_>
 8004c86:	f107 030c 	add.w	r3, r7, #12
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb9e 	bl	80053cc <_ZN6std_ex6thread13_S_make_stateINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEEPNS0_6_StateEOT_>
 8004c90:	4603      	mov	r3, r0
 8004c92:	60bb      	str	r3, [r7, #8]
	  					 std::forward<_Args>(__args)...));

#endif

	    	// and start it.
	    	_M_start_thread(std::move(state_ptr));
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe ffd6 	bl	8003c4a <_ZSt4moveIRPN6std_ex6thread6_StateEEONSt16remove_referenceIT_E4typeEOS6_>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f004 f8a3 	bl	8008df0 <_ZN6std_ex6thread15_M_start_threadEPNS0_6_StateE>
	      }
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZSt4moveIRPK18UART_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <_ZSt7forwardIPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_ZNSt5tupleIJOPK18UART_HandleTypeDefEEC1IJS2_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 8004cea:	687c      	ldr	r4, [r7, #4]
 8004cec:	6838      	ldr	r0, [r7, #0]
 8004cee:	f7ff ffec 	bl	8004cca <_ZSt7forwardIPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f000 f805 	bl	8004d06 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEEC1IS2_EEOT_>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}

08004d06 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004d06:	b590      	push	{r4, r7, lr}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004d10:	687c      	ldr	r4, [r7, #4]
 8004d12:	6838      	ldr	r0, [r7, #0]
 8004d14:	f7ff ffd9 	bl	8004cca <_ZSt7forwardIPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f805 	bl	8004d2c <_ZNSt10_Head_baseILj0EOPK18UART_HandleTypeDefLb0EEC1IS2_EEOT_>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <_ZNSt10_Head_baseILj0EOPK18UART_HandleTypeDefLb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004d36:	6838      	ldr	r0, [r7, #0]
 8004d38:	f7ff ffc7 	bl	8004cca <_ZSt7forwardIPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <_ZNSt5tupleIJOPK18UART_HandleTypeDefEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fbdf 	bl	8005520 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEEC1EOS4_>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_ZSt16forward_as_tupleIJPK18UART_HandleTypeDefEESt5tupleIJDpOT_EES6_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8004d76:	6838      	ldr	r0, [r7, #0]
 8004d78:	f7ff ffa7 	bl	8004cca <_ZSt7forwardIPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ffad 	bl	8004ce0 <_ZNSt5tupleIJOPK18UART_HandleTypeDefEEC1IJS2_ELb1EEEDpOT_>
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_>:
      operator[](key_type&& __k)
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b08b      	sub	sp, #44	; 0x2c
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fb2b 	bl	80053f8 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE11lower_boundERS9_>
 8004da2:	4603      	mov	r3, r0
 8004da4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fb35 	bl	8005416 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE3endEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	f107 020c 	add.w	r2, r7, #12
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb38 	bl	8005430 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEeqERKS9_>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d112      	bne.n	8004dec <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_+0x5c>
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb46 	bl	8005458 <_ZNKSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE8key_compEv>
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fb4e 	bl	8005472 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEdeEv>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f107 0310 	add.w	r3, r7, #16
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fb54 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_+0x60>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_+0x62>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01f      	beq.n	8004e36 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8004df6:	687c      	ldr	r4, [r7, #4]
 8004df8:	f107 0208 	add.w	r2, r7, #8
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb58 	bl	80054b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
					std::forward_as_tuple(std::move(__k)),
 8004e08:	6838      	ldr	r0, [r7, #0]
 8004e0a:	f7ff ff53 	bl	8004cb4 <_ZSt4moveIRPK18UART_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS5_>
 8004e0e:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8004e10:	f107 0318 	add.w	r3, r7, #24
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ffa8 	bl	8004d6c <_ZSt16forward_as_tupleIJPK18UART_HandleTypeDefEESt5tupleIJDpOT_EES6_>
 8004e1c:	f107 0218 	add.w	r2, r7, #24
 8004e20:	f107 031c 	add.w	r3, r7, #28
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEixEOS2_+0xbc>)
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 fbaf 	bl	8005590 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8004e32:	4603      	mov	r3, r0
 8004e34:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fb19 	bl	8005472 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEdeEv>
 8004e40:	4603      	mov	r3, r0
 8004e42:	3304      	adds	r3, #4
      }
 8004e44:	4618      	mov	r0, r3
 8004e46:	3724      	adds	r7, #36	; 0x24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}
 8004e4c:	08009c38 	.word	0x08009c38

08004e50 <_ZSt4moveIRKlEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <_ZSt7forwardIKlEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_ZNSt5tupleIJOKlEEC1IJS0_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 8004e86:	687c      	ldr	r4, [r7, #4]
 8004e88:	6838      	ldr	r0, [r7, #0]
 8004e8a:	f7ff ffec 	bl	8004e66 <_ZSt7forwardIKlEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4619      	mov	r1, r3
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f805 	bl	8004ea2 <_ZNSt11_Tuple_implILj0EJOKlEEC1IS0_EEOT_>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd90      	pop	{r4, r7, pc}

08004ea2 <_ZNSt11_Tuple_implILj0EJOKlEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004ea2:	b590      	push	{r4, r7, lr}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004eac:	687c      	ldr	r4, [r7, #4]
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f7ff ffd9 	bl	8004e66 <_ZSt7forwardIKlEOT_RNSt16remove_referenceIS1_E4typeE>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f000 f805 	bl	8004ec8 <_ZNSt10_Head_baseILj0EOKlLb0EEC1IS0_EEOT_>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd90      	pop	{r4, r7, pc}

08004ec8 <_ZNSt10_Head_baseILj0EOKlLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004ed2:	6838      	ldr	r0, [r7, #0]
 8004ed4:	f7ff ffc7 	bl	8004e66 <_ZSt7forwardIKlEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_ZNSt5tupleIJOKlEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fc1b 	bl	8005734 <_ZNSt11_Tuple_implILj0EJOKlEEC1EOS2_>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_ZSt16forward_as_tupleIJKlEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8004f12:	6838      	ldr	r0, [r7, #0]
 8004f14:	f7ff ffa7 	bl	8004e66 <_ZSt7forwardIKlEOT_RNSt16remove_referenceIS1_E4typeE>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ffad 	bl	8004e7c <_ZNSt5tupleIJOKlEEC1IJS0_ELb1EEEDpOT_>
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_>:
      operator[](key_type&& __k)
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b08b      	sub	sp, #44	; 0x2c
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb67 	bl	800560c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE11lower_boundERS0_>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fb71 	bl	800562a <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE3endEv>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	f107 020c 	add.w	r2, r7, #12
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fb74 	bl	8005644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEeqERKS6_>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d112      	bne.n	8004f88 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_+0x5c>
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fb82 	bl	800566c <_ZNKSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE8key_compEv>
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fb8a 	bl	8005686 <_ZNKSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEdeEv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461a      	mov	r2, r3
 8004f76:	f107 0310 	add.w	r3, r7, #16
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fb90 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_+0x60>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_+0x62>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01f      	beq.n	8004fd2 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8004f92:	687c      	ldr	r4, [r7, #4]
 8004f94:	f107 0208 	add.w	r2, r7, #8
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fb94 	bl	80056cc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					std::forward_as_tuple(std::move(__k)),
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	f7ff ff53 	bl	8004e50 <_ZSt4moveIRKlEONSt16remove_referenceIT_E4typeEOS3_>
 8004faa:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8004fac:	f107 0318 	add.w	r3, r7, #24
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ffa8 	bl	8004f08 <_ZSt16forward_as_tupleIJKlEESt5tupleIJDpOT_EES4_>
 8004fb8:	f107 0218 	add.w	r2, r7, #24
 8004fbc:	f107 031c 	add.w	r3, r7, #28
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEixEOS0_+0xbc>)
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fbd5 	bl	8005778 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb55 	bl	8005686 <_ZNKSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEdeEv>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	3304      	adds	r3, #4
      }
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3724      	adds	r7, #36	; 0x24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	08009c38 	.word	0x08009c38

08004fec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d012      	beq.n	800504e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8005028:	6838      	ldr	r0, [r7, #0]
 800502a:	f000 fbe3 	bl	80057f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 800502e:	4603      	mov	r3, r0
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fff0 	bl	8005018 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
 8005038:	6838      	ldr	r0, [r7, #0]
 800503a:	f000 fbe7 	bl	800580c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 800503e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fbee 	bl	8005824 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800504c:	e7e9      	b.n	8005022 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0xa>
	}
    }
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 80050aa:	6838      	ldr	r0, [r7, #0]
 80050ac:	f000 fbcb 	bl	8005846 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fff0 	bl	800509a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80050ba:	6838      	ldr	r0, [r7, #0]
 80050bc:	f000 fbcf 	bl	800585e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80050c0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fbd6 	bl	8005876 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80050ce:	e7e9      	b.n	80050a4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJPS0_S7_EEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			     _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b08d      	sub	sp, #52	; 0x34
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fcd8 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8005104:	4604      	mov	r4, r0
 8005106:	6838      	ldr	r0, [r7, #0]
 8005108:	f7ff fcdf 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	4621      	mov	r1, r4
 8005112:	68b8      	ldr	r0, [r7, #8]
 8005114:	f000 fbc0 	bl	8005898 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJPS0_S7_EEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 8005118:	62f8      	str	r0, [r7, #44]	; 0x2c

	__try
	  {
	    typedef pair<iterator, bool> _Res;
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 800511a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800511c:	f000 fca2 	bl	8005a64 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8005120:	4602      	mov	r2, r0
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fc16 	bl	800595a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_>
	    if (__res.second)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d013      	beq.n	800515c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJPS0_S7_EEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x6c>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 8005134:	6979      	ldr	r1, [r7, #20]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	68b8      	ldr	r0, [r7, #8]
 800513c:	f000 fca5 	bl	8005a8a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
 8005140:	4603      	mov	r3, r0
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	2301      	movs	r3, #1
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800514e:	f107 031c 	add.w	r3, r7, #28
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fce0 	bl	8005b1a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEbEC1IS9_bLb1EEEOT_OT0_>
 800515a:	e015      	b.n	8005188 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJPS0_S7_EEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x98>
	
	    _M_drop_node(__z);
 800515c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800515e:	68b8      	ldr	r0, [r7, #8]
 8005160:	f000 fb60 	bl	8005824 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	    return _Res(iterator(__res.first), false);
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fced 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8005172:	2300      	movs	r3, #0
 8005174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005178:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800517c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005180:	4619      	mov	r1, r3
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fcc9 	bl	8005b1a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEbEC1IS9_bLb1EEEOT_OT0_>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	3734      	adds	r7, #52	; 0x34
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}

08005190 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_emplace_uniqueIJiS4_EEES1_ISt17_Rb_tree_iteratorIS5_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b08d      	sub	sp, #52	; 0x34
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fcb7 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80051a4:	4604      	mov	r4, r0
 80051a6:	6838      	ldr	r0, [r7, #0]
 80051a8:	f7ff fc8f 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	4621      	mov	r1, r4
 80051b2:	68b8      	ldr	r0, [r7, #8]
 80051b4:	f000 fcd9 	bl	8005b6a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJiS4_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80051b8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 80051ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051bc:	f000 fd9a 	bl	8005cf4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fd0e 	bl	8005bea <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_>
	    if (__res.second)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_emplace_uniqueIJiS4_EEES1_ISt17_Rb_tree_iteratorIS5_EbEDpOT_+0x6c>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 80051d4:	6979      	ldr	r1, [r7, #20]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	68b8      	ldr	r0, [r7, #8]
 80051dc:	f000 fd9d 	bl	8005d1a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 80051e0:	4603      	mov	r3, r0
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80051ee:	f107 031c 	add.w	r3, r7, #28
 80051f2:	4619      	mov	r1, r3
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fdd8 	bl	8005daa <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKlPN7drivers17STM32HardwareUARTEEEbEC1IS6_bLb1EEEOT_OT0_>
 80051fa:	e015      	b.n	8005228 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_emplace_uniqueIJiS4_EEES1_ISt17_Rb_tree_iteratorIS5_EbEDpOT_+0x98>
	    _M_drop_node(__z);
 80051fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f000 fb39 	bl	8005876 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return _Res(iterator(__res.first), false);
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fde5 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8005212:	2300      	movs	r3, #0
 8005214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005218:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800521c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005220:	4619      	mov	r1, r3
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fdc1 	bl	8005daa <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKlPN7drivers17STM32HardwareUARTEEEbEC1IS6_bLb1EEEOT_OT0_>
      }
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	3734      	adds	r7, #52	; 0x34
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}

08005230 <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EEC1IJS4_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800523c:	68b8      	ldr	r0, [r7, #8]
 800523e:	f000 f816 	bl	800526e <_ZSt4moveIRMN7drivers17STM32HardwareUARTEFvvEEONSt16remove_referenceIT_E4typeEOS6_>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800524a:	e883 0003 	stmia.w	r3, {r0, r1}
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f103 0408 	add.w	r4, r3, #8
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fc38 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 800525a:	4603      	mov	r3, r0
 800525c:	4619      	mov	r1, r3
 800525e:	4620      	mov	r0, r4
 8005260:	f000 fdcb 	bl	8005dfa <_ZNSt5tupleIJPN7drivers17STM32HardwareUARTEEEC1IJS2_ELb1EEEDpOT_>
	{ }
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}

0800526e <_ZSt4moveIRMN7drivers17STM32HardwareUARTEFvvEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f805 	bl	800529e <_ZNSt10_Head_baseILj0EPN7drivers17STM32HardwareUARTELb0EE7_M_headERS3_>
 8005294:	4603      	mov	r3, r0
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <_ZNSt10_Head_baseILj0EPN7drivers17STM32HardwareUARTELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80052be:	687c      	ldr	r4, [r7, #4]
 80052c0:	6838      	ldr	r0, [r7, #0]
 80052c2:	f7ff ffdf 	bl	8005284 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEE7_M_headERS3_>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fbfe 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4619      	mov	r1, r3
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 fda4 	bl	8005e20 <_ZNSt10_Head_baseILj0EPN7drivers17STM32HardwareUARTELb0EEC1IS2_EEOT_>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}

080052e2 <_ZNSt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1EOS8_>:
      constexpr tuple(tuple&&) = default;
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fdbd 	bl	8005e72 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1EOS8_>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_ZNSt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1IJRS7_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 8005302:	b590      	push	{r4, r7, lr}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 800530c:	687c      	ldr	r4, [r7, #4]
 800530e:	6838      	ldr	r0, [r7, #0]
 8005310:	f7ff fc81 	bl	8004c16 <_ZSt7forwardIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8005314:	4603      	mov	r3, r0
 8005316:	4619      	mov	r1, r3
 8005318:	4620      	mov	r0, r4
 800531a:	f000 f805 	bl	8005328 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1IRS7_EEOT_>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bd90      	pop	{r4, r7, pc}

08005328 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1IRS7_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005332:	687c      	ldr	r4, [r7, #4]
 8005334:	6838      	ldr	r0, [r7, #0]
 8005336:	f7ff fc6e 	bl	8004c16 <_ZSt7forwardIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 800533a:	4603      	mov	r3, r0
 800533c:	4619      	mov	r1, r3
 800533e:	4620      	mov	r0, r4
 8005340:	f000 f805 	bl	800534e <_ZNSt10_Head_baseILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EELb0EEC1IRS7_EEOT_>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bd90      	pop	{r4, r7, pc}

0800534e <_ZNSt10_Head_baseILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EELb0EEC1IRS7_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005358:	6838      	ldr	r0, [r7, #0]
 800535a:	f7ff fc5c 	bl	8004c16 <_ZSt7forwardIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	ca07      	ldmia	r2, {r0, r1, r2}
 8005364:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_ZN6std_ex6thread14__make_invokerIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS4_EEJEEENS0_8_InvokerISt5tupleIJNSt5decayIT_E4typeEDpNSD_IT0_E4typeEEEEEOSE_DpOSH_>:
		      __make_invoker(_Callable&& __callable, _Args&&... __args)
 8005372:	b590      	push	{r4, r7, lr}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
			} };
 800537c:	687c      	ldr	r4, [r7, #4]
 800537e:	6838      	ldr	r0, [r7, #0]
 8005380:	f7ff fc49 	bl	8004c16 <_ZSt7forwardIRSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8005384:	4603      	mov	r3, r0
 8005386:	4619      	mov	r1, r3
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff ffba 	bl	8005302 <_ZNSt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1IJRS7_ELb1EEEDpOT_>
		      }
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}

08005396 <_ZSt13__invoke_implIvSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	7138      	strb	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80053a0:	6838      	ldr	r0, [r7, #0]
 80053a2:	f7ff fc43 	bl	8004c2c <_ZSt7forwardISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fd79 	bl	8005ea0 <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EEclIJEvEET0_DpOT_>
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <_ZSt7forwardIN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <_ZN6std_ex6thread13_S_make_stateINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEEPNS0_6_StateEOT_>:
		/** Helper function to start the thread */
		void _M_start_thread(_State_ptr);


		template<typename _Callable>
		static _State_ptr _S_make_state(_Callable&& __f)
 80053cc:	b5b0      	push	{r4, r5, r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
		{
			using _Impl = _State_impl<_Callable>;
			return _State_ptr(new _Impl(std::forward<_Callable>(__f)));
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ffee 	bl	80053b6 <_ZSt7forwardIN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEOT_RNSt16remove_referenceISE_E4typeE>
 80053da:	4605      	mov	r5, r0
 80053dc:	2014      	movs	r0, #20
 80053de:	f003 fdd9 	bl	8008f94 <_Znwj>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461c      	mov	r4, r3
 80053e6:	4629      	mov	r1, r5
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fd79 	bl	8005ee0 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEC1EOSD_>
 80053ee:	4623      	mov	r3, r4
		}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bdb0      	pop	{r4, r5, r7, pc}

080053f8 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fd88 	bl	8005f1c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11lower_boundERS4_>
 800540c:	4603      	mov	r3, r0
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fd92 	bl	8005f4a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>
 8005426:	4603      	mov	r3, r0
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEeqERKS9_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_ZNKSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEE8key_compEv>:
      key_comp() const
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fd82 	bl	8005f6c <_ZNKSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8key_compEv>
 8005468:	4623      	mov	r3, r4
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}

08005472 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fd7e 	bl	8005f80 <_ZNSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 8005484:	4603      	mov	r3, r0
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	bf34      	ite	cc
 80054a6:	2301      	movcc	r3, #1
 80054a8:	2300      	movcs	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f805 	bl	80054f2 <_ZNSt10_Head_baseILj0EOPK18UART_HandleTypeDefLb0EE7_M_headERS4_>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZNSt10_Head_baseILj0EOPK18UART_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <_ZSt7forwardIOPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800552a:	687c      	ldr	r4, [r7, #4]
 800552c:	6838      	ldr	r0, [r7, #0]
 800552e:	f7ff ffd3 	bl	80054d8 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEE7_M_headERS4_>
 8005532:	4603      	mov	r3, r0
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ffe8 	bl	800550a <_ZSt7forwardIOPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 800553a:	4603      	mov	r3, r0
 800553c:	4619      	mov	r1, r3
 800553e:	4620      	mov	r0, r4
 8005540:	f7ff fbf4 	bl	8004d2c <_ZNSt10_Head_baseILj0EOPK18UART_HandleTypeDefLb0EEC1IS2_EEOT_>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}

0800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <_ZSt7forwardISt5tupleIJOPK18UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffd5 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80055a4:	4604      	mov	r4, r0
 80055a6:	6838      	ldr	r0, [r7, #0]
 80055a8:	f7ff ffdc 	bl	8005564 <_ZSt7forwardISt5tupleIJOPK18UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80055ac:	4605      	mov	r5, r0
 80055ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b0:	f7ff ffe3 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80055b4:	4603      	mov	r3, r0
 80055b6:	462a      	mov	r2, r5
 80055b8:	4621      	mov	r1, r4
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fcee 	bl	8005f9c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 80055c0:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80055c2:	69f8      	ldr	r0, [r7, #28]
 80055c4:	f000 fa4e 	bl	8005a64 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f107 0010 	add.w	r0, r7, #16
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	f000 fd35 	bl	8006040 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_>

	    if (__res.second)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80055dc:	6939      	ldr	r1, [r7, #16]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa51 	bl	8005a8a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
 80055e8:	4603      	mov	r3, r0
 80055ea:	e00b      	b.n	8005604 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>

	    _M_drop_node(__z);
 80055ec:	69f9      	ldr	r1, [r7, #28]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f918 	bl	8005824 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	    return iterator(__res.first);
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 faa5 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8005602:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bdb0      	pop	{r4, r5, r7, pc}

0800560c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE11lower_boundERS0_>:
      lower_bound(const key_type& __x)
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fe33 	bl	8006286 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS0_>
 8005620:	4603      	mov	r3, r0
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fe3d 	bl	80062b4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 800563a:	4603      	mov	r3, r0
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEeqERKS6_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_ZNKSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEE8key_compEv>:
      key_comp() const
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fe2d 	bl	80062d6 <_ZNKSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>
 800567c:	4623      	mov	r3, r4
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bd90      	pop	{r4, r7, pc}

08005686 <_ZNKSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fe29 	bl	80062ea <_ZNSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 8005698:	4603      	mov	r3, r0
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_ZNKSt4lessIKlEclERS0_S2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	bfb4      	ite	lt
 80056ba:	2301      	movlt	r3, #1
 80056bc:	2300      	movge	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <_ZNSt11_Tuple_implILj0EJOKlEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f805 	bl	8005706 <_ZNSt10_Head_baseILj0EOKlLb0EE7_M_headERS2_>
 80056fc:	4603      	mov	r3, r0
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <_ZNSt10_Head_baseILj0EOKlLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <_ZSt7forwardIOKlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_ZNSt11_Tuple_implILj0EJOKlEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800573e:	687c      	ldr	r4, [r7, #4]
 8005740:	6838      	ldr	r0, [r7, #0]
 8005742:	f7ff ffd3 	bl	80056ec <_ZNSt11_Tuple_implILj0EJOKlEE7_M_headERS2_>
 8005746:	4603      	mov	r3, r0
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff ffe8 	bl	800571e <_ZSt7forwardIOKlEOT_RNSt16remove_referenceIS2_E4typeE>
 800574e:	4603      	mov	r3, r0
 8005750:	4619      	mov	r1, r3
 8005752:	4620      	mov	r0, r4
 8005754:	f7ff fbb8 	bl	8004ec8 <_ZNSt10_Head_baseILj0EOKlLb0EEC1IS0_EEOT_>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <_ZSt7forwardISt5tupleIJOKlEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005778:	b5b0      	push	{r4, r5, r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fee1 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800578c:	4604      	mov	r4, r0
 800578e:	6838      	ldr	r0, [r7, #0]
 8005790:	f7ff ffe7 	bl	8005762 <_ZSt7forwardISt5tupleIJOKlEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005794:	4605      	mov	r5, r0
 8005796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005798:	f7ff feef 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800579c:	4603      	mov	r3, r0
 800579e:	462a      	mov	r2, r5
 80057a0:	4621      	mov	r1, r4
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fdaf 	bl	8006306 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80057a8:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80057aa:	69f8      	ldr	r0, [r7, #28]
 80057ac:	f000 faa2 	bl	8005cf4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f107 0010 	add.w	r0, r7, #16
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	f000 fdc7 	bl	800634c <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_>
	    if (__res.second)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80057c4:	6939      	ldr	r1, [r7, #16]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 faa5 	bl	8005d1a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 80057d0:	4603      	mov	r3, r0
 80057d2:	e00b      	b.n	80057ec <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f84d 	bl	8005876 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	f107 0318 	add.w	r3, r7, #24
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 faf9 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 80057ea:	69bb      	ldr	r3, [r7, #24]
      }
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bdb0      	pop	{r4, r5, r7, pc}

080057f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 feae 	bl	8006592 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 febf 	bl	80065bc <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 feac 	bl	80065e0 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 febd 	bl	800660a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJPS0_S7_EEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fec2 	bl	800662e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>
 80058aa:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80058ac:	68b8      	ldr	r0, [r7, #8]
 80058ae:	f7ff f901 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80058b2:	4604      	mov	r4, r0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff f908 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4622      	mov	r2, r4
 80058be:	6979      	ldr	r1, [r7, #20]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fec5 	bl	8006650 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJPS0_S7_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 80058c6:	697b      	ldr	r3, [r7, #20]
	}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}

080058d0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEERS1_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80058dc:	68b8      	ldr	r0, [r7, #8]
 80058de:	f000 f810 	bl	8005902 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceISD_E4typeE>
 80058e2:	4603      	mov	r3, r0
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f82a 	bl	8005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80058f0:	4603      	mov	r3, r0
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	605a      	str	r2, [r3, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8005924:	68b8      	ldr	r0, [r7, #8]
 8005926:	f000 f80d 	bl	8005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800592a:	4603      	mov	r3, r0
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800595a:	b590      	push	{r4, r7, lr}
 800595c:	b08b      	sub	sp, #44	; 0x2c
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8005966:	68b8      	ldr	r0, [r7, #8]
 8005968:	f7ff fb75 	bl	8005056 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 800596c:	4603      	mov	r3, r0
 800596e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f000 fe92 	bl	800669a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8005976:	4603      	mov	r3, r0
 8005978:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d020      	beq.n	80059c8 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0x6e>
	  __y = __x;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800598a:	68bc      	ldr	r4, [r7, #8]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f868 	bl	8005a64 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4620      	mov	r0, r4
 800599c:	f7ff fd77 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80059a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0x60>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ff2b 	bl	800580c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 80059b6:	4603      	mov	r3, r0
 80059b8:	e004      	b.n	80059c4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0x6a>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff19 	bl	80057f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 80059c2:	4603      	mov	r3, r0
 80059c4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80059c6:	e7db      	b.n	8005980 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0x26>
      iterator __j = iterator(__y);
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	f107 0310 	add.w	r3, r7, #16
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f8bb 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80059d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01d      	beq.n	8005a1a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0xc0>
	  if (__j == begin())
 80059de:	68b8      	ldr	r0, [r7, #8]
 80059e0:	f000 fe67 	bl	80066b2 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 80059e4:	4603      	mov	r3, r0
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	f107 021c 	add.w	r2, r7, #28
 80059ec:	f107 0310 	add.w	r3, r7, #16
 80059f0:	4611      	mov	r1, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff fd1c 	bl	8005430 <_ZNKSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEeqERKS9_>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0xb6>
	    return _Res(__x, __y);
 80059fe:	f107 0214 	add.w	r2, r7, #20
 8005a02:	f107 0318 	add.w	r3, r7, #24
 8005a06:	4619      	mov	r1, r3
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff ff61 	bl	80058d0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEERS1_Lb1EEEOT_OT0_>
 8005a0e:	e025      	b.n	8005a5c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0x102>
	    --__j;
 8005a10:	f107 0310 	add.w	r3, r7, #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fe5d 	bl	80066d4 <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005a1a:	68bc      	ldr	r4, [r7, #8]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fe69 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005a24:	4603      	mov	r3, r0
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f7ff fd2f 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0xee>
	return _Res(__x, __y);
 8005a36:	f107 0214 	add.w	r2, r7, #20
 8005a3a:	f107 0318 	add.w	r3, r7, #24
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f7ff ff45 	bl	80058d0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEERS1_Lb1EEEOT_OT0_>
 8005a46:	e009      	b.n	8005a5c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_+0x102>
      return _Res(__j._M_node, 0);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	623b      	str	r3, [r7, #32]
 8005a4c:	f107 0220 	add.w	r2, r7, #32
 8005a50:	f107 0310 	add.w	r3, r7, #16
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff ff5e 	bl	8005918 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	372c      	adds	r7, #44	; 0x2c
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd90      	pop	{r4, r7, pc}

08005a64 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fe55 	bl	800671c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_valueEPKSt13_Rb_tree_nodeIS8_E>
 8005a72:	4602      	mov	r2, r0
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fe5a 	bl	8006734 <_ZNKSt10_Select1stISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEclERKS8_>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005a8a:	b5b0      	push	{r4, r5, r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d117      	bne.n	8005ace <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fdfb 	bl	800669a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d010      	beq.n	8005ace <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8005aac:	68fc      	ldr	r4, [r7, #12]
 8005aae:	6838      	ldr	r0, [r7, #0]
 8005ab0:	f7ff ffd8 	bl	8005a64 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fe1d 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff fce3 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x48>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x4a>
 8005ad2:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8005ad4:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	7df8      	ldrb	r0, [r7, #23]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	f003 fadc 	bl	800909c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f829 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8005afa:	693b      	ldr	r3, [r7, #16]
    }
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bdb0      	pop	{r4, r5, r7, pc}

08005b04 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEbEC1IS9_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f7ff ffec 	bl	8005b04 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fe09 	bl	800674c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	711a      	strb	r2, [r3, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJiS4_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8005b6a:	b590      	push	{r4, r7, lr}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fdf3 	bl	8006762 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8005b7c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	f7fe ffc7 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8005b84:	4604      	mov	r4, r0
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe ff9f 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4622      	mov	r2, r4
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fdf6 	bl	8006784 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJiS4_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8005b98:	697b      	ldr	r3, [r7, #20]
	}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd90      	pop	{r4, r7, pc}

08005ba2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKlPN7drivers17STM32HardwareUARTEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005bae:	68b8      	ldr	r0, [r7, #8]
 8005bb0:	f000 f810 	bl	8005bd4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fec1 	bl	8005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005bea:	b590      	push	{r4, r7, lr}
 8005bec:	b08b      	sub	sp, #44	; 0x2c
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8005bf6:	68b8      	ldr	r0, [r7, #8]
 8005bf8:	f7ff fa6e 	bl	80050d8 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8005c00:	68b8      	ldr	r0, [r7, #8]
 8005c02:	f000 fde4 	bl	80067ce <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8005c06:	4603      	mov	r3, r0
 8005c08:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d020      	beq.n	8005c58 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0x6e>
	  __y = __x;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8005c1a:	68bc      	ldr	r4, [r7, #8]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f868 	bl	8005cf4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff fd39 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0x60>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fe0c 	bl	800585e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005c46:	4603      	mov	r3, r0
 8005c48:	e004      	b.n	8005c54 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0x6a>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fdfa 	bl	8005846 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005c52:	4603      	mov	r3, r0
 8005c54:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005c56:	e7db      	b.n	8005c10 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0x26>
      iterator __j = iterator(__y);
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	f107 0310 	add.w	r3, r7, #16
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f8bb 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01d      	beq.n	8005caa <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0xc0>
	  if (__j == begin())
 8005c6e:	68b8      	ldr	r0, [r7, #8]
 8005c70:	f000 fdb9 	bl	80067e6 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8005c74:	4603      	mov	r3, r0
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	f107 021c 	add.w	r2, r7, #28
 8005c7c:	f107 0310 	add.w	r3, r7, #16
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fcde 	bl	8005644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEeqERKS6_>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0xb6>
	    return _Res(__x, __y);
 8005c8e:	f107 0214 	add.w	r2, r7, #20
 8005c92:	f107 0318 	add.w	r3, r7, #24
 8005c96:	4619      	mov	r1, r3
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff ff82 	bl	8005ba2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKlPN7drivers17STM32HardwareUARTEEERS1_Lb1EEEOT_OT0_>
 8005c9e:	e025      	b.n	8005cec <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0x102>
	    --__j;
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fdaf 	bl	8006808 <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005caa:	68bc      	ldr	r4, [r7, #8]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fdbb 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f7ff fcf1 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0xee>
	return _Res(__x, __y);
 8005cc6:	f107 0214 	add.w	r2, r7, #20
 8005cca:	f107 0318 	add.w	r3, r7, #24
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ff66 	bl	8005ba2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKlPN7drivers17STM32HardwareUARTEEERS1_Lb1EEEOT_OT0_>
 8005cd6:	e009      	b.n	8005cec <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_+0x102>
      return _Res(__j._M_node, 0);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	623b      	str	r3, [r7, #32]
 8005cdc:	f107 0220 	add.w	r2, r7, #32
 8005ce0:	f107 0310 	add.w	r3, r7, #16
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fe16 	bl	8005918 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	372c      	adds	r7, #44	; 0x2c
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}

08005cf4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fda7 	bl	8006850 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E>
 8005d02:	4602      	mov	r2, r0
 8005d04:	f107 030c 	add.w	r3, r7, #12
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fdac 	bl	8006868 <_ZNKSt10_Select1stISt4pairIKlPN7drivers17STM32HardwareUARTEEEclERKS5_>
 8005d10:	4603      	mov	r3, r0
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005d1a:	b5b0      	push	{r4, r5, r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d117      	bne.n	8005d5e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fd4d 	bl	80067ce <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8005d34:	4602      	mov	r2, r0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d010      	beq.n	8005d5e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8005d3c:	68fc      	ldr	r4, [r7, #12]
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f7ff ffd8 	bl	8005cf4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8005d44:	4605      	mov	r5, r0
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fd6f 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4629      	mov	r1, r5
 8005d52:	4620      	mov	r0, r4
 8005d54:	f7ff fca5 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 8005d62:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8005d64:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	7df8      	ldrb	r0, [r7, #23]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	f003 f994 	bl	800909c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8005d7e:	f107 0310 	add.w	r3, r7, #16
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f829 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8005d8a:	693b      	ldr	r3, [r7, #16]
    }
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bdb0      	pop	{r4, r5, r7, pc}

08005d94 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKlPN7drivers17STM32HardwareUARTEEEbEC1IS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005db6:	68b8      	ldr	r0, [r7, #8]
 8005db8:	f7ff ffec 	bl	8005d94 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fcc1 	bl	800674c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	711a      	strb	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <_ZNSt5tupleIJPN7drivers17STM32HardwareUARTEEEC1IJS2_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 8005dfa:	b590      	push	{r4, r7, lr}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 8005e04:	687c      	ldr	r4, [r7, #4]
 8005e06:	6838      	ldr	r0, [r7, #0]
 8005e08:	f7fe fe5f 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fd35 	bl	8006880 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEEC1IS2_EEOT_>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd90      	pop	{r4, r7, pc}

08005e20 <_ZNSt10_Head_baseILj0EPN7drivers17STM32HardwareUARTELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005e2a:	6838      	ldr	r0, [r7, #0]
 8005e2c:	f7fe fe4d 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e30:	4603      	mov	r3, r0
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f805 	bl	8005e5c <_ZNSt10_Head_baseILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EELb0EE7_M_headERS8_>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <_ZNSt10_Head_baseILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EELb0EE7_M_headERS8_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1EOS8_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8005e72:	b590      	push	{r4, r7, lr}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8005e7c:	687c      	ldr	r4, [r7, #4]
 8005e7e:	6838      	ldr	r0, [r7, #0]
 8005e80:	f7ff ffdf 	bl	8005e42 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEE7_M_headERS8_>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fed0 	bl	8004c2c <_ZSt7forwardISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fd08 	bl	80068a6 <_ZNSt10_Head_baseILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EELb0EEC1IS7_EEOT_>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd90      	pop	{r4, r7, pc}

08005ea0 <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EEclIJEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8005ea8:	f7fd feee 	bl	8003c88 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	      _Bound_indexes());
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fd09 	bl	80068cc <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd90      	pop	{r4, r7, pc}

08005ec0 <_ZN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS5_EEEEEC1EOSC_>:
		      struct _Invoker
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fa06 	bl	80052e2 <_ZNSt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEC1EOS8_>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEC1EOSD_>:
			_State_impl(_Callable&& __f)
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
				: _M_func(std::forward<_Callable>(__f))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fd fed3 	bl	8003c98 <_ZN6std_ex6thread6_StateC1Ev>
 8005ef2:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEC1EOSD_+0x38>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0408 	add.w	r4, r3, #8
 8005efe:	6838      	ldr	r0, [r7, #0]
 8005f00:	f7ff fa59 	bl	80053b6 <_ZSt7forwardIN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEEOT_RNSt16remove_referenceISE_E4typeE>
 8005f04:	4603      	mov	r3, r0
 8005f06:	4619      	mov	r1, r3
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f7ff ffd9 	bl	8005ec0 <_ZN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS5_EEEEEC1EOSC_>
			{}
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd90      	pop	{r4, r7, pc}
 8005f18:	08009dd4 	.word	0x08009dd4

08005f1c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11lower_boundERS4_>:
      lower_bound(const key_type& __k)
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff f895 	bl	8005056 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fbb3 	bl	800669a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8005f34:	4602      	mov	r2, r0
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	4621      	mov	r1, r4
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fce2 	bl	8006904 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS4_>
 8005f40:	4603      	mov	r3, r0
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}

08005f4a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	f107 030c 	add.w	r3, r7, #12
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fdf5 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZNKSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8key_compEv>:
      key_comp() const
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <_ZNSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>:
      _M_valptr()
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3310      	adds	r3, #16
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fcea 	bl	8006966 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>
 8005f92:	4603      	mov	r3, r0
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8005f9c:	b5b0      	push	{r4, r5, r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fb3f 	bl	800662e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>
 8005fb0:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005fb2:	68b8      	ldr	r0, [r7, #8]
 8005fb4:	f7ff facb 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8005fb8:	4604      	mov	r4, r0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fad2 	bl	8005564 <_ZSt7forwardISt5tupleIJOPK18UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	6838      	ldr	r0, [r7, #0]
 8005fc4:	f7ff fad9 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	462b      	mov	r3, r5
 8005fce:	4622      	mov	r2, r4
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fcd3 	bl	800697e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 8005fd8:	697b      	ldr	r3, [r7, #20]
	}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bdb0      	pop	{r4, r5, r7, pc}

08005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fca4 	bl	8005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800601a:	68b8      	ldr	r0, [r7, #8]
 800601c:	f7ff fc92 	bl	8005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006020:	4603      	mov	r3, r0
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fc8b 	bl	8005944 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800602e:	4603      	mov	r3, r0
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b08d      	sub	sp, #52	; 0x34
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fcc1 	bl	80069d8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE13_M_const_castEv>
 8006056:	4603      	mov	r3, r0
 8006058:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800605a:	69bc      	ldr	r4, [r7, #24]
 800605c:	68b8      	ldr	r0, [r7, #8]
 800605e:	f000 fb1c 	bl	800669a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8006062:	4603      	mov	r3, r0
 8006064:	429c      	cmp	r4, r3
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d030      	beq.n	80060d4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x94>
	  if (size() > 0
 8006072:	68b8      	ldr	r0, [r7, #8]
 8006074:	f000 fcc1 	bl	80069fa <_ZNKSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>
 8006078:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800607a:	2b00      	cmp	r3, #0
 800607c:	d013      	beq.n	80060a6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x66>
 800607e:	68bc      	ldr	r4, [r7, #8]
 8006080:	68b8      	ldr	r0, [r7, #8]
 8006082:	f000 fcc6 	bl	8006a12 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_rightmostEv>
 8006086:	4603      	mov	r3, r0
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fb33 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006090:	4603      	mov	r3, r0
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4619      	mov	r1, r3
 8006096:	4620      	mov	r0, r4
 8006098:	f7ff f9f9 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x66>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x68>
 80060a6:	2300      	movs	r3, #0
	  if (size() > 0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x86>
	    return _Res(0, _M_rightmost());
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	68b8      	ldr	r0, [r7, #8]
 80060b2:	f000 fcae 	bl	8006a12 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_rightmostEv>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f107 031c 	add.w	r3, r7, #28
 80060bc:	4619      	mov	r1, r3
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff ff8f 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80060c4:	e0db      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fc44 	bl	800595a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_>
 80060d2:	e0d4      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80060d4:	68bc      	ldr	r4, [r7, #8]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fb0c 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff f9d2 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d057      	beq.n	80061a0 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x160>
	  iterator __before = __pos;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80060f4:	69bc      	ldr	r4, [r7, #24]
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	f000 fc97 	bl	8006a2a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_leftmostEv>
 80060fc:	4603      	mov	r3, r0
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429c      	cmp	r4, r3
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f000 fc8b 	bl	8006a2a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_leftmostEv>
 8006114:	4604      	mov	r4, r0
 8006116:	68b8      	ldr	r0, [r7, #8]
 8006118:	f000 fc87 	bl	8006a2a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_leftmostEv>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	4621      	mov	r1, r4
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff ff73 	bl	800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006128:	e0a9      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800612a:	68bc      	ldr	r4, [r7, #8]
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	4618      	mov	r0, r3
 8006132:	f000 facf 	bl	80066d4 <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEmmEv>
 8006136:	4603      	mov	r3, r0
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fadb 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006140:	4603      	mov	r3, r0
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	4620      	mov	r0, r4
 8006148:	f7ff f9a1 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01f      	beq.n	8006192 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fb4d 	bl	80057f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x140>
		return _Res(0, __before._M_node);
 800616a:	2300      	movs	r3, #0
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	f107 0214 	add.w	r2, r7, #20
 8006172:	f107 0320 	add.w	r3, r7, #32
 8006176:	4619      	mov	r1, r3
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff ff32 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800617e:	e07e      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8006180:	f107 0218 	add.w	r2, r7, #24
 8006184:	f107 0318 	add.w	r3, r7, #24
 8006188:	4619      	mov	r1, r3
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff ff3f 	bl	800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006190:	e075      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fbde 	bl	800595a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_>
 800619e:	e06e      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80061a0:	68bc      	ldr	r4, [r7, #8]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 faa6 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80061aa:	4603      	mov	r3, r0
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff f96c 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d056      	beq.n	800626a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x22a>
	  iterator __after = __pos;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80061c0:	69bc      	ldr	r4, [r7, #24]
 80061c2:	68b8      	ldr	r0, [r7, #8]
 80061c4:	f000 fc25 	bl	8006a12 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_rightmostEv>
 80061c8:	4603      	mov	r3, r0
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	429c      	cmp	r4, r3
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00c      	beq.n	80061f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x1b4>
	    return _Res(0, _M_rightmost());
 80061da:	2300      	movs	r3, #0
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
 80061de:	68b8      	ldr	r0, [r7, #8]
 80061e0:	f000 fc17 	bl	8006a12 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_rightmostEv>
 80061e4:	4602      	mov	r2, r0
 80061e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ea:	4619      	mov	r1, r3
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fef8 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80061f2:	e044      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80061f4:	68bc      	ldr	r4, [r7, #8]
 80061f6:	f107 0310 	add.w	r3, r7, #16
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fc21 	bl	8006a42 <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEppEv>
 8006200:	4603      	mov	r3, r0
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fa76 	bl	80066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	4620      	mov	r0, r4
 8006212:	f7ff f93c 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01f      	beq.n	800625c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fae8 	bl	80057f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x20a>
		return _Res(0, __pos._M_node);
 8006234:	2300      	movs	r3, #0
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
 8006238:	f107 0218 	add.w	r2, r7, #24
 800623c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006240:	4619      	mov	r1, r3
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fecd 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8006248:	e019      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800624a:	f107 0210 	add.w	r2, r7, #16
 800624e:	f107 0310 	add.w	r3, r7, #16
 8006252:	4619      	mov	r1, r3
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff feda 	bl	800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800625a:	e010      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff fb79 	bl	800595a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_>
 8006268:	e009      	b.n	800627e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_+0x23e>
	return _Res(__pos._M_node, 0);
 800626a:	2300      	movs	r3, #0
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006272:	f107 0318 	add.w	r3, r7, #24
 8006276:	4619      	mov	r1, r3
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fb4d 	bl	8005918 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	3734      	adds	r7, #52	; 0x34
 8006282:	46bd      	mov	sp, r7
 8006284:	bd90      	pop	{r4, r7, pc}

08006286 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS0_>:
      lower_bound(const key_type& __k)
 8006286:	b590      	push	{r4, r7, lr}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fe ff21 	bl	80050d8 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8006296:	4604      	mov	r4, r0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa98 	bl	80067ce <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800629e:	4602      	mov	r2, r0
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	4621      	mov	r1, r4
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fbdd 	bl	8006a64 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS0_>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}

080062b4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	1d1a      	adds	r2, r3, #4
 80062c0:	f107 030c 	add.w	r3, r7, #12
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fd88 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <_ZNKSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>:
      key_comp() const
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <_ZNSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>:
      _M_valptr()
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3310      	adds	r3, #16
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fbe5 	bl	8006ac6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>
 80062fc:	4603      	mov	r3, r0
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8006306:	b5b0      	push	{r4, r5, r7, lr}
 8006308:	b088      	sub	sp, #32
 800630a:	af02      	add	r7, sp, #8
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fa24 	bl	8006762 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 800631a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800631c:	68b8      	ldr	r0, [r7, #8]
 800631e:	f7ff f916 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006322:	4604      	mov	r4, r0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fa1c 	bl	8005762 <_ZSt7forwardISt5tupleIJOKlEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800632a:	4605      	mov	r5, r0
 800632c:	6838      	ldr	r0, [r7, #0]
 800632e:	f7ff f924 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006332:	4603      	mov	r3, r0
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	462b      	mov	r3, r5
 8006338:	4622      	mov	r2, r4
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fbce 	bl	8006ade <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8006342:	697b      	ldr	r3, [r7, #20]
	}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bdb0      	pop	{r4, r5, r7, pc}

0800634c <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b08d      	sub	sp, #52	; 0x34
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800635a:	1d3b      	adds	r3, r7, #4
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fbeb 	bl	8006b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEE13_M_const_castEv>
 8006362:	4603      	mov	r3, r0
 8006364:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006366:	69bc      	ldr	r4, [r7, #24]
 8006368:	68b8      	ldr	r0, [r7, #8]
 800636a:	f000 fa30 	bl	80067ce <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800636e:	4603      	mov	r3, r0
 8006370:	429c      	cmp	r4, r3
 8006372:	bf0c      	ite	eq
 8006374:	2301      	moveq	r3, #1
 8006376:	2300      	movne	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d030      	beq.n	80063e0 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x94>
	  if (size() > 0
 800637e:	68b8      	ldr	r0, [r7, #8]
 8006380:	f000 fbeb 	bl	8006b5a <_ZNKSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8006384:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006386:	2b00      	cmp	r3, #0
 8006388:	d013      	beq.n	80063b2 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x66>
 800638a:	68bc      	ldr	r4, [r7, #8]
 800638c:	68b8      	ldr	r0, [r7, #8]
 800638e:	f000 fbf0 	bl	8006b72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006392:	4603      	mov	r3, r0
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fa47 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800639c:	4603      	mov	r3, r0
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4619      	mov	r1, r3
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff f97d 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x66>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x68>
 80063b2:	2300      	movs	r3, #0
	  if (size() > 0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x86>
	    return _Res(0, _M_rightmost());
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	68b8      	ldr	r0, [r7, #8]
 80063be:	f000 fbd8 	bl	8006b72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80063c2:	4602      	mov	r2, r0
 80063c4:	f107 031c 	add.w	r3, r7, #28
 80063c8:	4619      	mov	r1, r3
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fe09 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80063d0:	e0db      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fc06 	bl	8005bea <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_>
 80063de:	e0d4      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80063e0:	68bc      	ldr	r4, [r7, #8]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fa20 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff f956 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d057      	beq.n	80064ac <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x160>
	  iterator __before = __pos;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006400:	69bc      	ldr	r4, [r7, #24]
 8006402:	68b8      	ldr	r0, [r7, #8]
 8006404:	f000 fbc1 	bl	8006b8a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8006408:	4603      	mov	r3, r0
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	429c      	cmp	r4, r3
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800641a:	68b8      	ldr	r0, [r7, #8]
 800641c:	f000 fbb5 	bl	8006b8a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8006420:	4604      	mov	r4, r0
 8006422:	68b8      	ldr	r0, [r7, #8]
 8006424:	f000 fbb1 	bl	8006b8a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	4621      	mov	r1, r4
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff fded 	bl	800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006434:	e0a9      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006436:	68bc      	ldr	r4, [r7, #8]
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f9e3 	bl	8006808 <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEmmEv>
 8006442:	4603      	mov	r3, r0
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f9ef 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800644c:	4603      	mov	r3, r0
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4619      	mov	r1, r3
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff f925 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01f      	beq.n	800649e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff f9f0 	bl	8005846 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x140>
		return _Res(0, __before._M_node);
 8006476:	2300      	movs	r3, #0
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	f107 0214 	add.w	r2, r7, #20
 800647e:	f107 0320 	add.w	r3, r7, #32
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff fdac 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800648a:	e07e      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800648c:	f107 0218 	add.w	r2, r7, #24
 8006490:	f107 0318 	add.w	r3, r7, #24
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fdb9 	bl	800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800649c:	e075      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fba0 	bl	8005bea <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_>
 80064aa:	e06e      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80064ac:	68bc      	ldr	r4, [r7, #8]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f9ba 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80064b6:	4603      	mov	r3, r0
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4620      	mov	r0, r4
 80064be:	f7ff f8f0 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d056      	beq.n	8006576 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x22a>
	  iterator __after = __pos;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80064cc:	69bc      	ldr	r4, [r7, #24]
 80064ce:	68b8      	ldr	r0, [r7, #8]
 80064d0:	f000 fb4f 	bl	8006b72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80064d4:	4603      	mov	r3, r0
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	429c      	cmp	r4, r3
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x1b4>
	    return _Res(0, _M_rightmost());
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f000 fb41 	bl	8006b72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80064f0:	4602      	mov	r2, r0
 80064f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fd72 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80064fe:	e044      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006500:	68bc      	ldr	r4, [r7, #8]
 8006502:	f107 0310 	add.w	r3, r7, #16
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fb4b 	bl	8006ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEppEv>
 800650c:	4603      	mov	r3, r0
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f98a 	bl	800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006516:	4603      	mov	r3, r0
 8006518:	461a      	mov	r2, r3
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff f8c0 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01f      	beq.n	8006568 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff f98b 	bl	8005846 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x20a>
		return _Res(0, __pos._M_node);
 8006540:	2300      	movs	r3, #0
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
 8006544:	f107 0218 	add.w	r2, r7, #24
 8006548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800654c:	4619      	mov	r1, r3
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fd47 	bl	8005fe2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8006554:	e019      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8006556:	f107 0210 	add.w	r2, r7, #16
 800655a:	f107 0310 	add.w	r3, r7, #16
 800655e:	4619      	mov	r1, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff fd54 	bl	800600e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006566:	e010      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fb3b 	bl	8005bea <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS0_>
 8006574:	e009      	b.n	800658a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS0_+0x23e>
	return _Res(__pos._M_node, 0);
 8006576:	2300      	movs	r3, #0
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800657e:	f107 0318 	add.w	r3, r7, #24
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff f9c7 	bl	8005918 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	3734      	adds	r7, #52	; 0x34
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}

08006592 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) noexcept
 8006592:	b590      	push	{r4, r7, lr}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb11 	bl	8006bc4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 80065a2:	4604      	mov	r4, r0
 80065a4:	6838      	ldr	r0, [r7, #0]
 80065a6:	f7ff fceb 	bl	8005f80 <_ZNSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4619      	mov	r1, r3
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 fb13 	bl	8006bda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE7destroyIS9_EEvRSB_PT_>
      }
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd90      	pop	{r4, r7, pc}

080065bc <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fafc 	bl	8006bc4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2201      	movs	r2, #1
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fb0e 	bl	8006bf4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE10deallocateERSB_PSA_j>
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) noexcept
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fb11 	bl	8006c12 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80065f0:	4604      	mov	r4, r0
 80065f2:	6838      	ldr	r0, [r7, #0]
 80065f4:	f7ff fe79 	bl	80062ea <_ZNSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 80065f8:	4603      	mov	r3, r0
 80065fa:	4619      	mov	r1, r3
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fb13 	bl	8006c28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}

0800660a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fafc 	bl	8006c12 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800661a:	4603      	mov	r3, r0
 800661c:	2201      	movs	r2, #1
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fb0e 	bl	8006c42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE10deallocateERS8_PS7_j>
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fac4 	bl	8006bc4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 800663c:	4603      	mov	r3, r0
 800663e:	2101      	movs	r1, #1
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fb0d 	bl	8006c60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE8allocateERSB_j>
 8006646:	4603      	mov	r3, r0
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJPS0_S7_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8006650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4619      	mov	r1, r3
 8006662:	2018      	movs	r0, #24
 8006664:	f7fd fe7c 	bl	8004360 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 faab 	bl	8006bc4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 800666e:	4604      	mov	r4, r0
 8006670:	68b8      	ldr	r0, [r7, #8]
 8006672:	f7ff fc85 	bl	8005f80 <_ZNSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 8006676:	4605      	mov	r5, r0
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fe fa1b 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800667e:	4606      	mov	r6, r0
 8006680:	6838      	ldr	r0, [r7, #0]
 8006682:	f7fe fa22 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006686:	4603      	mov	r3, r0
 8006688:	4632      	mov	r2, r6
 800668a:	4629      	mov	r1, r5
 800668c:	4620      	mov	r0, r4
 800668e:	f000 faf6 	bl	8006c7e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE9constructIS9_JPS2_S8_EEEvRSB_PT_DpOT0_>
	}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800669a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	f107 030c 	add.w	r3, r7, #12
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fa41 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f002 fcd9 	bl	8009098 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80066e6:	4602      	mov	r2, r0
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
	return *this;
 80066ec:	687b      	ldr	r3, [r7, #4]
      }
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fad5 	bl	8006cae <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_valueEPKSt18_Rb_tree_node_base>
 8006704:	4602      	mov	r2, r0
 8006706:	f107 030c 	add.w	r3, r7, #12
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f811 	bl	8006734 <_ZNKSt10_Select1stISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEclERKS8_>
 8006712:	4603      	mov	r3, r0
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_valueEPKSt13_Rb_tree_nodeIS8_E>:
      _S_value(_Const_Link_type __x)
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 face 	bl	8006cc6 <_ZNKSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 800672a:	4603      	mov	r3, r0
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <_ZNKSt10_Select1stISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa51 	bl	8006c12 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8006770:	4603      	mov	r3, r0
 8006772:	2101      	movs	r1, #1
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fab4 	bl	8006ce2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE8allocateERS8_j>
 800677a:	4603      	mov	r3, r0
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJiS4_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4619      	mov	r1, r3
 8006796:	2018      	movs	r0, #24
 8006798:	f7fd fde2 	bl	8004360 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fa38 	bl	8006c12 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80067a2:	4604      	mov	r4, r0
 80067a4:	68b8      	ldr	r0, [r7, #8]
 80067a6:	f7ff fda0 	bl	80062ea <_ZNSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 80067aa:	4605      	mov	r5, r0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fe f9b0 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80067b2:	4606      	mov	r6, r0
 80067b4:	6838      	ldr	r0, [r7, #0]
 80067b6:	f7fe f988 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 80067ba:	4603      	mov	r3, r0
 80067bc:	4632      	mov	r2, r6
 80067be:	4629      	mov	r1, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fa9d 	bl	8006d00 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE9constructIS6_JiS5_EEEvRS8_PT_DpOT0_>
	}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ce <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	f107 030c 	add.w	r3, r7, #12
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff faef 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f002 fc3f 	bl	8009098 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800681a:	4602      	mov	r2, r0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
	return *this;
 8006820:	687b      	ldr	r3, [r7, #4]
      }
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa7c 	bl	8006d30 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base>
 8006838:	4602      	mov	r2, r0
 800683a:	f107 030c 	add.w	r3, r7, #12
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f811 	bl	8006868 <_ZNKSt10_Select1stISt4pairIKlPN7drivers17STM32HardwareUARTEEEclERKS5_>
 8006846:	4603      	mov	r3, r0
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E>:
      _S_value(_Const_Link_type __x)
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa75 	bl	8006d48 <_ZNKSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 800685e:	4603      	mov	r3, r0
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <_ZNKSt10_Select1stISt4pairIKlPN7drivers17STM32HardwareUARTEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800688a:	687c      	ldr	r4, [r7, #4]
 800688c:	6838      	ldr	r0, [r7, #0]
 800688e:	f7fe f91c 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006892:	4603      	mov	r3, r0
 8006894:	4619      	mov	r1, r3
 8006896:	4620      	mov	r0, r4
 8006898:	f7ff fac2 	bl	8005e20 <_ZNSt10_Head_baseILj0EPN7drivers17STM32HardwareUARTELb0EEC1IS2_EEOT_>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd90      	pop	{r4, r7, pc}

080068a6 <_ZNSt10_Head_baseILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EELb0EEC1IS7_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80068a6:	b590      	push	{r4, r7, lr}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80068b0:	687c      	ldr	r4, [r7, #4]
 80068b2:	6838      	ldr	r0, [r7, #0]
 80068b4:	f7fe f9ba 	bl	8004c2c <_ZSt7forwardISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4619      	mov	r1, r3
 80068bc:	4620      	mov	r0, r4
 80068be:	f7fe f989 	bl	8004bd4 <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EEC1EOS6_>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd90      	pop	{r4, r7, pc}

080068cc <_ZNSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS1_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 80068d8:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3308      	adds	r3, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fa40 	bl	8006d64 <_ZSt3getILj0EJPN7drivers17STM32HardwareUARTEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80068e4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80068e6:	f107 0314 	add.w	r3, r7, #20
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa46 	bl	8006d7e <_ZNVKSt3_MuIPN7drivers17STM32HardwareUARTELb0ELb0EEclIRS2_St5tupleIJEEEEOT_S9_RT0_>
 80068f2:	4603      	mov	r3, r0
 80068f4:	4619      	mov	r1, r3
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 fa65 	bl	8006dc6 <_ZSt8__invokeIRMN7drivers17STM32HardwareUARTEFvvEJRPS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 80068fc:	bf00      	nop
	}
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	bd90      	pop	{r4, r7, pc}

08006904 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS4_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006904:	b590      	push	{r4, r7, lr}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01b      	beq.n	8006950 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS4_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8006918:	68fc      	ldr	r4, [r7, #12]
 800691a:	68b8      	ldr	r0, [r7, #8]
 800691c:	f7ff f8a2 	bl	8005a64 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8006920:	4603      	mov	r3, r0
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	4619      	mov	r1, r3
 8006926:	4620      	mov	r0, r4
 8006928:	f7fe fdb1 	bl	800548e <_ZNKSt4lessIPK18UART_HandleTypeDefEclERKS2_S5_>
 800692c:	4603      	mov	r3, r0
 800692e:	f083 0301 	eor.w	r3, r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS4_+0x42>
	  __y = __x, __x = _S_left(__x);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	68b8      	ldr	r0, [r7, #8]
 800693e:	f7fe ff65 	bl	800580c <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006942:	60b8      	str	r0, [r7, #8]
 8006944:	e7e5      	b.n	8006912 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS4_+0xe>
	  __x = _S_right(__x);
 8006946:	68b8      	ldr	r0, [r7, #8]
 8006948:	f7fe ff54 	bl	80057f4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 800694c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800694e:	e7e0      	b.n	8006912 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS4_+0xe>
      return iterator(__y);
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff f8f8 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 800695c:	697b      	ldr	r3, [r7, #20]
    }
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}

08006966 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa3f 	bl	8006df2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE7_M_addrEv>
 8006974:	4603      	mov	r3, r0
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4619      	mov	r1, r3
 8006992:	2018      	movs	r0, #24
 8006994:	f7fd fce4 	bl	8004360 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f913 	bl	8006bc4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 800699e:	4604      	mov	r4, r0
 80069a0:	68b8      	ldr	r0, [r7, #8]
 80069a2:	f7ff faed 	bl	8005f80 <_ZNSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 80069a6:	4605      	mov	r5, r0
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fe fdd0 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069ae:	4606      	mov	r6, r0
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f7fe fdd7 	bl	8005564 <_ZSt7forwardISt5tupleIJOPK18UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069b6:	4680      	mov	r8, r0
 80069b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ba:	f7fe fdde 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80069be:	4603      	mov	r3, r0
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	4643      	mov	r3, r8
 80069c4:	4632      	mov	r2, r6
 80069c6:	4629      	mov	r1, r5
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fa1d 	bl	8006e08 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS4_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080069d8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	4611      	mov	r1, r2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff f8ae 	bl	8005b4c <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <_ZNKSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3310      	adds	r3, #16
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	330c      	adds	r3, #12
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <_ZNSt17_Rb_tree_iteratorISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f002 fb0e 	bl	8009070 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8006a54:	4602      	mov	r2, r0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
	return *this;
 8006a5a:	687b      	ldr	r3, [r7, #4]
      }
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS0_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01b      	beq.n	8006ab0 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS0_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8006a78:	68fc      	ldr	r4, [r7, #12]
 8006a7a:	68b8      	ldr	r0, [r7, #8]
 8006a7c:	f7ff f93a 	bl	8005cf4 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8006a80:	4603      	mov	r3, r0
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	4619      	mov	r1, r3
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7fe fe0b 	bl	80056a2 <_ZNKSt4lessIKlEclERS0_S2_>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f083 0301 	eor.w	r3, r3, #1
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS0_+0x42>
	  __y = __x, __x = _S_left(__x);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	68b8      	ldr	r0, [r7, #8]
 8006a9e:	f7fe fede 	bl	800585e <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006aa2:	60b8      	str	r0, [r7, #8]
 8006aa4:	e7e5      	b.n	8006a72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS0_+0xe>
	  __x = _S_right(__x);
 8006aa6:	68b8      	ldr	r0, [r7, #8]
 8006aa8:	f7fe fecd 	bl	8005846 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006aac:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8006aae:	e7e0      	b.n	8006a72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS0_+0xe>
      return iterator(__y);
 8006ab0:	f107 0314 	add.w	r3, r7, #20
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff f990 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8006abc:	697b      	ldr	r3, [r7, #20]
    }
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd90      	pop	{r4, r7, pc}

08006ac6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9b8 	bl	8006e44 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE7_M_addrEv>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8006ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4619      	mov	r1, r3
 8006af2:	2018      	movs	r0, #24
 8006af4:	f7fd fc34 	bl	8004360 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f88a 	bl	8006c12 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8006afe:	4604      	mov	r4, r0
 8006b00:	68b8      	ldr	r0, [r7, #8]
 8006b02:	f7ff fbf2 	bl	80062ea <_ZNSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 8006b06:	4605      	mov	r5, r0
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7fe fd20 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	6838      	ldr	r0, [r7, #0]
 8006b12:	f7fe fe26 	bl	8005762 <_ZSt7forwardISt5tupleIJOKlEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006b16:	4680      	mov	r8, r0
 8006b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1a:	f7fe fd2e 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4643      	mov	r3, r8
 8006b24:	4632      	mov	r2, r6
 8006b26:	4629      	mov	r1, r5
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 f996 	bl	8006e5a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff f946 	bl	8005ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEC1EPSt18_Rb_tree_node_base>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <_ZNKSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3310      	adds	r3, #16
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	330c      	adds	r3, #12
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKlPN7drivers17STM32HardwareUARTEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f002 fa5e 	bl	8009070 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
	return *this;
 8006bba:	687b      	ldr	r3, [r7, #4]
      }
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE7destroyIS9_EEvRSB_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f955 	bl	8006e96 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE7destroyISA_EEvPT_>
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f951 	bl	8006eac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE10deallocateEPSB_j>
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f946 	bl	8006ec6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE7destroyIS7_EEvPT_>
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f942 	bl	8006edc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE10deallocateEPS8_j>
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE8allocateERSB_j>:
      allocate(allocator_type& __a, size_type __n)
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f941 	bl	8006ef6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE8allocateEjPKv>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE9constructIS9_JPS2_S8_EEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006c7e:	b590      	push	{r4, r7, lr}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fd ff11 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006c92:	4604      	mov	r4, r0
 8006c94:	6838      	ldr	r0, [r7, #0]
 8006c96:	f7fd ff18 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f949 	bl	8006f38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE9constructISA_JPS3_S9_EEEvPT_DpOT0_>
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd90      	pop	{r4, r7, pc}

08006cae <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f805 	bl	8006cc6 <_ZNKSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <_ZNKSt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>:
      _M_valptr() const
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3310      	adds	r3, #16
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 f950 	bl	8006f78 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006cec:	2200      	movs	r2, #0
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f94d 	bl	8006f90 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE8allocateEjPKv>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE9constructIS6_JiS5_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fd feff 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d14:	4604      	mov	r4, r0
 8006d16:	6838      	ldr	r0, [r7, #0]
 8006d18:	f7fd fed7 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4622      	mov	r2, r4
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f955 	bl	8006fd2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE9constructIS7_JiS6_EEEvPT_DpOT0_>
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}

08006d30 <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f805 	bl	8006d48 <_ZNKSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <_ZNKSt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEE9_M_valptrEv>:
      _M_valptr() const
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3310      	adds	r3, #16
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f95c 	bl	8007012 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <_ZSt3getILj0EJPN7drivers17STM32HardwareUARTEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f95b 	bl	800702a <_ZSt12__get_helperILj0EPN7drivers17STM32HardwareUARTEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006d74:	4603      	mov	r3, r0
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <_ZNVKSt3_MuIPN7drivers17STM32HardwareUARTELb0ELb0EEclIRS2_St5tupleIJEEEEOT_S9_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8006d8a:	68b8      	ldr	r0, [r7, #8]
 8006d8c:	f000 f810 	bl	8006db0 <_ZSt7forwardIRPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <_ZSt7forwardIRMN7drivers17STM32HardwareUARTEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_ZSt7forwardIRPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <_ZSt8__invokeIRMN7drivers17STM32HardwareUARTEFvvEJRPS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8006dc6:	b5b0      	push	{r4, r5, r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff ffe2 	bl	8006d9a <_ZSt7forwardIRMN7drivers17STM32HardwareUARTEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	6838      	ldr	r0, [r7, #0]
 8006dda:	f7ff ffe9 	bl	8006db0 <_ZSt7forwardIRPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 f92c 	bl	8007042 <_ZSt13__invoke_implIvRMN7drivers17STM32HardwareUARTEFvvERPS1_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 8006dea:	bf00      	nop
    }
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bdb0      	pop	{r4, r5, r7, pc}

08006df2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE7_M_addrEv>:
      _M_addr() noexcept
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS4_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006e08:	b5b0      	push	{r4, r5, r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fe fb99 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	6838      	ldr	r0, [r7, #0]
 8006e20:	f7fe fba0 	bl	8005564 <_ZSt7forwardISt5tupleIJOPK18UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006e24:	4605      	mov	r5, r0
 8006e26:	6a38      	ldr	r0, [r7, #32]
 8006e28:	f7fe fba7 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	462b      	mov	r3, r5
 8006e32:	4622      	mov	r2, r4
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f92a 	bl	8007090 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJOS5_EESH_IJEEEEEvPT_DpOT0_>
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bdb0      	pop	{r4, r5, r7, pc}

08006e44 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE7_M_addrEv>:
      _M_addr() noexcept
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006e5a:	b5b0      	push	{r4, r5, r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af02      	add	r7, sp, #8
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fe fb70 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	6838      	ldr	r0, [r7, #0]
 8006e72:	f7fe fc76 	bl	8005762 <_ZSt7forwardISt5tupleIJOKlEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006e76:	4605      	mov	r5, r0
 8006e78:	6a38      	ldr	r0, [r7, #32]
 8006e7a:	f7fe fb7e 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	462b      	mov	r3, r5
 8006e84:	4622      	mov	r2, r4
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f92a 	bl	80070e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bdb0      	pop	{r4, r5, r7, pc}

08006e96 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE7destroyISA_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006eb8:	68b8      	ldr	r0, [r7, #8]
 8006eba:	f002 f885 	bl	8008fc8 <_ZdlPv>
      }
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE7destroyIS7_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE10deallocateEPS8_j>:
      deallocate(pointer __p, size_type)
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006ee8:	68b8      	ldr	r0, [r7, #8]
 8006eea:	f002 f86d 	bl	8008fc8 <_ZdlPv>
      }
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f916 	bl	8007134 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE8max_sizeEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	bf8c      	ite	hi
 8006f10:	2301      	movhi	r3, #1
 8006f12:	2300      	movls	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f1a:	f002 f921 	bl	8009160 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4613      	mov	r3, r2
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	4413      	add	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f002 f833 	bl	8008f94 <_Znwj>
 8006f2e:	4603      	mov	r3, r0
      }
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE9constructISA_JPS3_S9_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006f38:	b5b0      	push	{r4, r5, r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fd fdb4 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f7fd fdbb 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006f54:	4605      	mov	r5, r0
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	2008      	movs	r0, #8
 8006f5c:	f7fd fa00 	bl	8004360 <_ZnwjPv>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE9constructISA_JPS3_S9_EEEvPT_DpOT0_+0x38>
 8006f66:	462a      	mov	r2, r5
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f8f0 	bl	8007150 <_ZNSt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEC1IPS0_S6_Lb1EEEOT_OT0_>
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bdb0      	pop	{r4, r5, r7, pc}

08006f78 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f8fe 	bl	8007182 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE7_M_addrEv>
 8006f86:	4603      	mov	r3, r0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f8fb 	bl	8007198 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE8max_sizeEv>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf8c      	ite	hi
 8006faa:	2301      	movhi	r3, #1
 8006fac:	2300      	movls	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006fb4:	f002 f8d4 	bl	8009160 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4413      	add	r3, r2
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 ffe6 	bl	8008f94 <_Znwj>
 8006fc8:	4603      	mov	r3, r0
      }
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE9constructIS7_JiS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006fd2:	b5b0      	push	{r4, r5, r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fd fd96 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f7fd fd6e 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006fee:	4605      	mov	r5, r0
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	2008      	movs	r0, #8
 8006ff6:	f7fd f9b3 	bl	8004360 <_ZnwjPv>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE9constructIS7_JiS6_EEEvPT_DpOT0_+0x38>
 8007000:	462a      	mov	r2, r5
 8007002:	4621      	mov	r1, r4
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f8d5 	bl	80071b4 <_ZNSt4pairIKlPN7drivers17STM32HardwareUARTEEC1IiS3_Lb1EEEOT_OT0_>
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bdb0      	pop	{r4, r5, r7, pc}

08007012 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f8e3 	bl	80071e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE7_M_addrEv>
 8007020:	4603      	mov	r3, r0
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <_ZSt12__get_helperILj0EPN7drivers17STM32HardwareUARTEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe f926 	bl	8005284 <_ZNSt11_Tuple_implILj0EJPN7drivers17STM32HardwareUARTEEE7_M_headERS3_>
 8007038:	4603      	mov	r3, r0
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <_ZSt13__invoke_implIvRMN7drivers17STM32HardwareUARTEFvvERPS1_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	7338      	strb	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff feae 	bl	8006db0 <_ZSt7forwardIRPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007054:	4603      	mov	r3, r0
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	6852      	ldr	r2, [r2, #4]
 800705c:	1052      	asrs	r2, r2, #1
 800705e:	1899      	adds	r1, r3, r2
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	6852      	ldr	r2, [r2, #4]
 8007064:	f002 0201 	and.w	r2, r2, #1
 8007068:	2a00      	cmp	r2, #0
 800706a:	d102      	bne.n	8007072 <_ZSt13__invoke_implIvRMN7drivers17STM32HardwareUARTEFvvERPS1_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x30>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	e008      	b.n	8007084 <_ZSt13__invoke_implIvRMN7drivers17STM32HardwareUARTEFvvERPS1_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x42>
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	6852      	ldr	r2, [r2, #4]
 8007076:	1052      	asrs	r2, r2, #1
 8007078:	4413      	add	r3, r2
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	4413      	add	r3, r2
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4608      	mov	r0, r1
 8007086:	4798      	blx	r3
 8007088:	bf00      	nop
    }
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJOS5_EESH_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fe fa55 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80070a4:	6838      	ldr	r0, [r7, #0]
 80070a6:	f7fe fa5d 	bl	8005564 <_ZSt7forwardISt5tupleIJOPK18UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80070aa:	4602      	mov	r2, r0
 80070ac:	f107 0318 	add.w	r3, r7, #24
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd fe4a 	bl	8004d4c <_ZNSt5tupleIJOPK18UART_HandleTypeDefEEC1EOS4_>
 80070b8:	f107 0418 	add.w	r4, r7, #24
 80070bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070be:	f7fe fa5c 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4619      	mov	r1, r3
 80070c6:	2008      	movs	r0, #8
 80070c8:	f7fd f94a 	bl	8004360 <_ZnwjPv>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d004      	beq.n	80070da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJOS5_EESH_IJEEEEEvPT_DpOT0_+0x4a>
 80070d0:	7f3b      	ldrb	r3, [r7, #28]
 80070d2:	4622      	mov	r2, r4
 80070d4:	7d39      	ldrb	r1, [r7, #20]
 80070d6:	f000 f891 	bl	80071fc <_ZNSt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEC1IJOS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd90      	pop	{r4, r7, pc}

080070e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80070e2:	b590      	push	{r4, r7, lr}
 80070e4:	b089      	sub	sp, #36	; 0x24
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fe fa2c 	bl	800554e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80070f6:	6838      	ldr	r0, [r7, #0]
 80070f8:	f7fe fb33 	bl	8005762 <_ZSt7forwardISt5tupleIJOKlEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80070fc:	4602      	mov	r2, r0
 80070fe:	f107 0318 	add.w	r3, r7, #24
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd feef 	bl	8004ee8 <_ZNSt5tupleIJOKlEEC1EOS2_>
 800710a:	f107 0418 	add.w	r4, r7, #24
 800710e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007110:	f7fe fa33 	bl	800557a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4619      	mov	r1, r3
 8007118:	2008      	movs	r0, #8
 800711a:	f7fd f921 	bl	8004360 <_ZnwjPv>
 800711e:	2800      	cmp	r0, #0
 8007120:	d004      	beq.n	800712c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_+0x4a>
 8007122:	7f3b      	ldrb	r3, [r7, #28]
 8007124:	4622      	mov	r2, r4
 8007126:	7d39      	ldrb	r1, [r7, #20]
 8007128:	f000 f87c 	bl	8007224 <_ZNSt4pairIKlPN7drivers17STM32HardwareUARTEEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800712c:	bf00      	nop
 800712e:	3724      	adds	r7, #36	; 0x24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd90      	pop	{r4, r7, pc}

08007134 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEEE8max_sizeEv+0x18>)
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	0aaaaaaa 	.word	0x0aaaaaaa

08007150 <_ZNSt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEC1IPS0_S6_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800715c:	68b8      	ldr	r0, [r7, #8]
 800715e:	f7fd fca9 	bl	8004ab4 <_ZSt7forwardIP18UART_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8007162:	4603      	mov	r3, r0
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fd fcad 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007170:	4603      	mov	r3, r0
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	605a      	str	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEE7_M_addrEv>:
      _M_addr() const noexcept
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKlPN7drivers17STM32HardwareUARTEEEE8max_sizeEv+0x18>)
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	0aaaaaaa 	.word	0x0aaaaaaa

080071b4 <_ZNSt4pairIKlPN7drivers17STM32HardwareUARTEEC1IiS3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80071c0:	68b8      	ldr	r0, [r7, #8]
 80071c2:	f7fd fca6 	bl	8004b12 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80071c6:	4603      	mov	r3, r0
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fd fc7b 	bl	8004aca <_ZSt7forwardIPN7drivers17STM32HardwareUARTEEOT_RNSt16remove_referenceIS3_E4typeE>
 80071d4:	4603      	mov	r3, r0
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKlPN7drivers17STM32HardwareUARTEEE7_M_addrEv>:
      _M_addr() const noexcept
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <_ZNSt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEC1IJOS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:

  // See stl_pair.h...
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
 80071fc:	b5b0      	push	{r4, r5, r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	7239      	strb	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800720a:	463a      	mov	r2, r7
 800720c:	f88d 4000 	strb.w	r4, [sp]
 8007210:	462b      	mov	r3, r5
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f832 	bl	800727e <_ZNSt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEC1IJOS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bdb0      	pop	{r4, r5, r7, pc}

08007224 <_ZNSt4pairIKlPN7drivers17STM32HardwareUARTEEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8007224:	b5b0      	push	{r4, r5, r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	7239      	strb	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8007232:	463a      	mov	r2, r7
 8007234:	f88d 4000 	strb.w	r4, [sp]
 8007238:	462b      	mov	r3, r5
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f851 	bl	80072e4 <_ZNSt4pairIKlPN7drivers17STM32HardwareUARTEEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bdb0      	pop	{r4, r5, r7, pc}

0800724c <_ZSt3getILj0EJOPK18UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f805 	bl	8007266 <_ZSt12__get_helperILj0EOPK18UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800725c:	4603      	mov	r3, r0
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <_ZSt12__get_helperILj0EOPK18UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fe f932 	bl	80054d8 <_ZNSt11_Tuple_implILj0EJOPK18UART_HandleTypeDefEE7_M_headERS4_>
 8007274:	4603      	mov	r3, r0
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <_ZNSt4pairIKPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTEEC1IJOS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800728c:	68b8      	ldr	r0, [r7, #8]
 800728e:	f7ff ffdd 	bl	800724c <_ZSt3getILj0EJOPK18UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007292:	4603      	mov	r3, r0
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe f938 	bl	800550a <_ZSt7forwardIOPK18UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 800729a:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	605a      	str	r2, [r3, #4]
      { }
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <_ZSt3getILj0EJOKlEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f805 	bl	80072cc <_ZSt12__get_helperILj0EOKlJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80072c2:	4603      	mov	r3, r0
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_ZSt12__get_helperILj0EOKlJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fe fa09 	bl	80056ec <_ZNSt11_Tuple_implILj0EJOKlEE7_M_headERS2_>
 80072da:	4603      	mov	r3, r0
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <_ZNSt4pairIKlPN7drivers17STM32HardwareUARTEEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80072f2:	68b8      	ldr	r0, [r7, #8]
 80072f4:	f7ff ffdd 	bl	80072b2 <_ZSt3getILj0EJOKlEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80072f8:	4603      	mov	r3, r0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fa0f 	bl	800571e <_ZSt7forwardIOKlEOT_RNSt16remove_referenceIS2_E4typeE>
 8007300:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
      { }
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEED1Ev>:
		struct _State_impl : public _State
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	4a05      	ldr	r2, [pc, #20]	; (8007338 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEED1Ev+0x20>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fd25 	bl	8008d78 <_ZN6std_ex6thread6_StateD1Ev>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08009dd4 	.word	0x08009dd4

0800733c <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEED0Ev>:
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff ffe7 	bl	8007318 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEED1Ev>
 800734a:	2114      	movs	r1, #20
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 fe1f 	bl	8008f90 <_ZdlPvj>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEED1Ev>:
      ~map() = default;
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd fb8f 	bl	8004a8a <_ZNSt8_Rb_treeIKlSt4pairIS0_PN7drivers17STM32HardwareUARTEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEED1Ev>:
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fb4a 	bl	8004a1a <_ZNSt8_Rb_treeIPK18UART_HandleTypeDefSt4pairIKS2_PN7drivers17STM32HardwareUARTEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EED1Ev>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <_Z41__static_initialization_and_destruction_0ii>:
}
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d10a      	bne.n	80073b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d105      	bne.n	80073b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
	std::map<const UART_HandleTypeDef*, STM32HardwareUART*> map_uart_handles_to_object;
 80073aa:	480c      	ldr	r0, [pc, #48]	; (80073dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80073ac:	f7fd f837 	bl	800441e <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEEC1Ev>
	std::map<const int32_t, STM32HardwareUART*> map_uart_peripheral_id_to_object;
 80073b0:	480b      	ldr	r0, [pc, #44]	; (80073e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80073b2:	f7fd f86f 	bl	8004494 <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEEC1Ev>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d105      	bne.n	80073d2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80073c6:	4806      	ldr	r0, [pc, #24]	; (80073e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80073c8:	f7ff ffc8 	bl	800735c <_ZNSt3mapIKlPN7drivers17STM32HardwareUARTESt4lessIS0_ESaISt4pairIS0_S3_EEED1Ev>
	std::map<const UART_HandleTypeDef*, STM32HardwareUART*> map_uart_handles_to_object;
 80073cc:	4803      	ldr	r0, [pc, #12]	; (80073dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80073ce:	f7ff ffd2 	bl	8007376 <_ZNSt3mapIPK18UART_HandleTypeDefPN7drivers17STM32HardwareUARTESt4lessIS2_ESaISt4pairIKS2_S5_EEED1Ev>
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000098 	.word	0x20000098
 80073e0:	200000b0 	.word	0x200000b0

080073e4 <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEE6_M_runEv>:
			void _M_run()
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
				_M_func();
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3308      	adds	r3, #8
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f812 	bl	800741a <_ZN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS5_EEEEEclEv>
				if (nullptr != _M_owning_thread)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d006      	beq.n	800740c <_ZN6std_ex6thread11_State_implINS0_8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS6_EEEEEEE6_M_runEv+0x28>
					this->_M_owning_thread->m_bo_thread_terminated = true;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	3330      	adds	r3, #48	; 0x30
 8007404:	2101      	movs	r1, #1
 8007406:	4618      	mov	r0, r3
 8007408:	f7fc fbdc 	bl	8003bc4 <_ZNSt6atomicIbEaSEb>
				vTaskDelete(nullptr);
 800740c:	2000      	movs	r0, #0
 800740e:	f000 fc99 	bl	8007d44 <vTaskDelete>
			}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <_ZN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS5_EEEEEclEv>:
			operator()()
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
			{ return _M_invoke(_Indices()); }
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f804 	bl	8007432 <_ZN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS5_EEEEE9_M_invokeIJLj0EEEEDTcl8__invokespcl10_S_declvalIXT_EEEEESt12_Index_tupleIJXspT_EEE>
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <_ZN6std_ex6thread8_InvokerISt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS5_EEEEE9_M_invokeIJLj0EEEEDTcl8__invokespcl10_S_declvalIXT_EEEEESt12_Index_tupleIJXspT_EEE>:
			  _M_invoke(std::_Index_tuple<_Ind...>)
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	7039      	strb	r1, [r7, #0]
			  { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f80c 	bl	800745c <_ZSt4moveIRSt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS3_EEEEEONSt16remove_referenceIT_E4typeEOSC_>
 8007444:	4603      	mov	r3, r0
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f82c 	bl	80074a4 <_ZSt3getILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>
 800744c:	4603      	mov	r3, r0
 800744e:	4618      	mov	r0, r3
 8007450:	f7fd fbf7 	bl	8004c42 <_ZSt8__invokeISt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEJEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <_ZSt4moveIRSt5tupleIJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS3_EEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <_ZSt3getILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f805 	bl	800748c <_ZSt12__get_helperILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8007482:	4603      	mov	r3, r0
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <_ZSt12__get_helperILj0ESt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fe fcd4 	bl	8005e42 <_ZNSt11_Tuple_implILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEE7_M_headERS8_>
 800749a:	4603      	mov	r3, r0
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <_ZSt3getILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>:
    get(tuple<_Elements...>&& __t) noexcept
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff ffe0 	bl	8007472 <_ZSt3getILj0EJSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 80074b2:	4603      	mov	r3, r0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 f805 	bl	80074c4 <_ZSt7forwardIOSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 80074ba:	4603      	mov	r3, r0
    }
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <_ZSt7forwardIOSt5_BindIFMN7drivers17STM32HardwareUARTEFvvEPS2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <_GLOBAL__sub_I__ZN7drivers26map_uart_handles_to_objectE>:
 80074da:	b580      	push	{r7, lr}
 80074dc:	af00      	add	r7, sp, #0
 80074de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074e2:	2001      	movs	r0, #1
 80074e4:	f7ff ff54 	bl	8007390 <_Z41__static_initialization_and_destruction_0ii>
 80074e8:	bd80      	pop	{r7, pc}

080074ea <_GLOBAL__sub_D__ZN7drivers26map_uart_handles_to_objectE>:
 80074ea:	b580      	push	{r7, lr}
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7ff ff4c 	bl	8007390 <_Z41__static_initialization_and_destruction_0ii>
 80074f8:	bd80      	pop	{r7, pc}

080074fa <vApplicationMallocFailedHook>:

extern "C"
{

void vApplicationMallocFailedHook( void )
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
 8007512:	e7fe      	b.n	8007512 <vApplicationMallocFailedHook+0x18>

08007514 <vApplicationIdleHook>:
}

	void vApplicationIdleHook( void )
	{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
		specified, or call vTaskDelay()).  If the application makes use of the
		vTaskDelete() API function (as this demo application does) then it is also
		important that vApplicationIdleHook() is permitted to return to its calling
		function, because it is the responsibility of the idle task to clean up
		memory allocated by the kernel to any task that has since been deleted. */
	}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <vApplicationTickHook>:

	/** see https://www.cnblogs.com/shangdawei/p/4684798.html */
	void vApplicationTickHook(void)
	{
 8007522:	b580      	push	{r7, lr}
 8007524:	af00      	add	r7, sp, #0
	  HAL_IncTick();
 8007526:	f7f8 ff41 	bl	80003ac <HAL_IncTick>
	}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}

0800752e <vApplicationStackOverflowHook>:


	void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
	{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	60fb      	str	r3, [r7, #12]

		/* Run time stack overflow checking is performed if
		configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
		function is called if a stack overflow is detected. */
		taskDISABLE_INTERRUPTS();
		for( ;; );
 800754a:	e7fe      	b.n	800754a <vApplicationStackOverflowHook+0x1c>

0800754c <_ZN15MainApplicationC1Ev>:


class MainApplication
{
public:
	MainApplication()
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b0ab      	sub	sp, #172	; 0xac
 8007550:	af02      	add	r7, sp, #8
 8007552:	6078      	str	r0, [r7, #4]
	{
#ifndef HAL_ADC_MODULE_ENABLED
#define ADC_CHANNEL_2 2
#endif
		// create the low-level hardware interfaces
		m_p_adc = new drivers::STM32ADC(drivers::ADCResolution::ADC_RESOLUTION_12BIT, ADC2, ADC_CHANNEL_2, GPIOA, GPIO_PIN_5);
 8007554:	2068      	movs	r0, #104	; 0x68
 8007556:	f001 fd1d 	bl	8008f94 <_Znwj>
 800755a:	4603      	mov	r3, r0
 800755c:	461c      	mov	r4, r3
 800755e:	2320      	movs	r3, #32
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	2302      	movs	r3, #2
 800756a:	4a23      	ldr	r2, [pc, #140]	; (80075f8 <_ZN15MainApplicationC1Ev+0xac>)
 800756c:	2102      	movs	r1, #2
 800756e:	4620      	mov	r0, r4
 8007570:	f7fc fbd2 	bl	8003d18 <_ZN7drivers8STM32ADCC1ENS_13ADCResolutionEP11ADC_TypeDefmP12GPIO_TypeDeft>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	601c      	str	r4, [r3, #0]
		m_p_dac = new drivers::STM32DAC(DAC1, GPIOA, GPIO_PIN_4);
 8007578:	2028      	movs	r0, #40	; 0x28
 800757a:	f001 fd0b 	bl	8008f94 <_Znwj>
 800757e:	4603      	mov	r3, r0
 8007580:	461c      	mov	r4, r3
 8007582:	2310      	movs	r3, #16
 8007584:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007588:	491c      	ldr	r1, [pc, #112]	; (80075fc <_ZN15MainApplicationC1Ev+0xb0>)
 800758a:	4620      	mov	r0, r4
 800758c:	f7fc fd5e 	bl	800404c <_ZN7drivers8STM32DACC1EP11DAC_TypeDefP12GPIO_TypeDeft>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	605c      	str	r4, [r3, #4]

		/* Characteristics of the Nissan Sunny EUDM fuel sensor. 0% = 100Ohm (empty), 100% = 10Ohm (full). See
		 * http://texelography.com/2019/06/21/nissan-rz1-digital-cluster-conversion/ for the full dataset */
		std::pair<int32_t, int32_t> a_input_lut[] =
 8007594:	4a1a      	ldr	r2, [pc, #104]	; (8007600 <_ZN15MainApplicationC1Ev+0xb4>)
 8007596:	f107 0308 	add.w	r3, r7, #8
 800759a:	4611      	mov	r1, r2
 800759c:	2248      	movs	r2, #72	; 0x48
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fe1c 	bl	80091dc <memcpy>
				std::make_pair(10000, 11800),
				std::make_pair(11000, 2400),
				std::make_pair(11500, 0000),
		};

		m_p_o_fuel_gauge_input_characteristic = new app::CharacteristicCurve<int32_t, int32_t>(a_input_lut, sizeof(a_input_lut) / sizeof(a_input_lut[0]));
 80075a4:	2008      	movs	r0, #8
 80075a6:	f001 fcf5 	bl	8008f94 <_Znwj>
 80075aa:	4603      	mov	r3, r0
 80075ac:	461c      	mov	r4, r3
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	2209      	movs	r2, #9
 80075b4:	4619      	mov	r1, r3
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 f8e0 	bl	800777c <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	609c      	str	r4, [r3, #8]

		/* Characteristics of the digital cluster fuel gauge */
		std::pair<int32_t, int32_t> a_output_lut[] =
 80075c0:	4a10      	ldr	r2, [pc, #64]	; (8007604 <_ZN15MainApplicationC1Ev+0xb8>)
 80075c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80075c6:	4611      	mov	r1, r2
 80075c8:	2250      	movs	r2, #80	; 0x50
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 fe06 	bl	80091dc <memcpy>
				std::make_pair(9286, 1100),
				std::make_pair(10000, 700),
				std::make_pair(11000, 700)
		};

		m_p_o_fuel_gauge_output_characteristic = new app::CharacteristicCurve<int32_t, int32_t>(a_output_lut, sizeof(a_output_lut) / sizeof(a_output_lut[0]));
 80075d0:	2008      	movs	r0, #8
 80075d2:	f001 fcdf 	bl	8008f94 <_Znwj>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461c      	mov	r4, r3
 80075da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80075de:	220a      	movs	r2, #10
 80075e0:	4619      	mov	r1, r3
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 f8ca 	bl	800777c <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	60dc      	str	r4, [r3, #12]
		//m_p_o_fuel_gauge_input = std::make_shared<app::FuelGaugeInputFromADC>(m_p_adc, m_p_o_fuel_gauge_input_characteristic);

		// attach to the signal of the fuel sensor input
		//auto event_handler = std::bind(&MainApplication::fuel_sensor_input_received, this, std::placeholders::_1);
		//m_p_o_fuel_gauge_input->m_sig_fuel_level_changed.connect(event_handler);
	}
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	37a4      	adds	r7, #164	; 0xa4
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd90      	pop	{r4, r7, pc}
 80075f6:	bf00      	nop
 80075f8:	50000100 	.word	0x50000100
 80075fc:	40007400 	.word	0x40007400
 8007600:	08009ca8 	.word	0x08009ca8
 8007604:	08009cf0 	.word	0x08009cf0

08007608 <_Z19MAIN_startup_threadPv>:
	app::FuelGaugeOutput* m_p_o_fuel_gauge_output;
};


void MAIN_startup_thread(void*)
{
 8007608:	b590      	push	{r4, r7, lr}
 800760a:	b095      	sub	sp, #84	; 0x54
 800760c:	af04      	add	r7, sp, #16
 800760e:	6078      	str	r0, [r7, #4]
	// This is the initial thread running after bootup.
	/* Configure the system clock to 64 MHz */
	SystemClock_Config();
 8007610:	f000 f86c 	bl	80076ec <_ZL18SystemClock_Configv>
#ifdef USE_STM32_F3_DISCO
	BSP_LED_Init(LED_RED);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_BLUE);
#elif defined USE_STM32F3XX_NUCLEO_32
	BSP_LED_Init(LED_GREEN);
 8007614:	2000      	movs	r0, #0
 8007616:	f7f8 fe33 	bl	8000280 <BSP_LED_Init>
#endif


	// wait for the scheduler to be ready.
	std_ex::sleep_for(std::chrono::milliseconds(400));
 800761a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007620:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007624:	f107 0320 	add.w	r3, r7, #32
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f7fc fadb 	bl	8003be6 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IivEERKT_>
 8007630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007634:	f001 fb8d 	bl	8008d52 <_ZN6std_ex9sleep_forENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>

	// create the debug interface
#ifdef USE_STM32_F3_DISCO
	std::shared_ptr<drivers::GenericUART> p_uart = std::make_shared<drivers::STM32HardwareUART>(GPIOD, GPIO_PIN_6, GPIOD, GPIO_PIN_5);
#elif defined USE_STM32F3XX_NUCLEO_32
	drivers::GenericUART* p_uart = new drivers::STM32HardwareUART(GPIOA, GPIO_PIN_3, GPIOA, GPIO_PIN_2);
 8007638:	208c      	movs	r0, #140	; 0x8c
 800763a:	f001 fcab 	bl	8008f94 <_Znwj>
 800763e:	4603      	mov	r3, r0
 8007640:	461c      	mov	r4, r3
 8007642:	2304      	movs	r3, #4
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800764a:	2208      	movs	r2, #8
 800764c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8007650:	4620      	mov	r0, r4
 8007652:	f7fc ff2d 	bl	80044b0 <_ZN7drivers17STM32HardwareUARTC1EP12GPIO_TypeDeftS2_t>
 8007656:	63fc      	str	r4, [r7, #60]	; 0x3c
#endif

	// ... and connect it to the hardware ports
	p_uart->connect(9600, drivers::UART_WORD_LENGTH_8BIT, drivers::UART_STOP_BITS_1, drivers::UART_FLOW_CONTROL_NONE);
 8007658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	2300      	movs	r3, #0
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	2300      	movs	r3, #0
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	2300      	movs	r3, #0
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	2300      	movs	r3, #0
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800767a:	4788      	blx	r1

	// if this was all successful, create the OS helper services
	//OSServices::OSConsole o_os_console(p_uart);
	set_serial_output(p_uart);
 800767c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800767e:	f001 fc0f 	bl	8008ea0 <_Z17set_serial_outputPN7drivers11GenericUARTE>

	// integrate all your tasks here.
	MainApplication o_application;
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff ff60 	bl	800754c <_ZN15MainApplicationC1Ev>
	//std_ex::thread o_thread_pwm(main_speedo_sensor_pwm);

	while (true)
	{
		// load balancing
		std_ex::sleep_for(std::chrono::milliseconds(1000));
 800768c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007690:	63bb      	str	r3, [r7, #56]	; 0x38
 8007692:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f7fc faa2 	bl	8003be6 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IivEERKT_>
 80076a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80076a6:	f001 fb54 	bl	8008d52 <_ZN6std_ex9sleep_forENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>
		DEBUG_PRINTF("I am still here!");
 80076aa:	4802      	ldr	r0, [pc, #8]	; (80076b4 <_Z19MAIN_startup_threadPv+0xac>)
 80076ac:	f001 fc26 	bl	8008efc <_Z11print_tracePKcz>
		std_ex::sleep_for(std::chrono::milliseconds(1000));
 80076b0:	e7ec      	b.n	800768c <_Z19MAIN_startup_threadPv+0x84>
 80076b2:	bf00      	nop
 80076b4:	08009d40 	.word	0x08009d40

080076b8 <main>:
	vTaskDelete(NULL);
}


int main(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af02      	add	r7, sp, #8
	   - Configure the Flash prefetch
	   - Configure the Systick to generate an interrupt each 1 msec
	   - Set NVIC Group Priority to 4
	   - Low Level Initialization
	 */
	HAL_Init();
 80076be:	f7f8 fe27 	bl	8000310 <HAL_Init>

	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]

	// first thread still needs to be created with xTaskCreate, only after the scheduler has started, std::thread can be used.

    xTaskCreate( MAIN_startup_thread,
 80076c6:	1d3b      	adds	r3, r7, #4
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	2302      	movs	r3, #2
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076d4:	4903      	ldr	r1, [pc, #12]	; (80076e4 <main+0x2c>)
 80076d6:	4804      	ldr	r0, [pc, #16]	; (80076e8 <main+0x30>)
 80076d8:	f000 f9e4 	bl	8007aa4 <xTaskCreate>
                 NULL,
                 2,
                 &xHandle );

	/* Start the scheduler. */
	vTaskStartScheduler();
 80076dc:	f000 fbf4 	bl	8007ec8 <vTaskStartScheduler>
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */

	for( ;; );
 80076e0:	e7fe      	b.n	80076e0 <main+0x28>
 80076e2:	bf00      	nop
 80076e4:	08009d54 	.word	0x08009d54
 80076e8:	08007609 	.word	0x08007609

080076ec <_ZL18SystemClock_Configv>:
}


static void SystemClock_Config(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0

#ifdef USE_STM32F3_DISCO
	SystemClock_Config_STM32_F3_DISCOVERY();
#elif defined USE_STM32F3XX_NUCLEO_32
	SystemClock_Config_STM32F303_NUCLEO_32();
 80076f0:	f000 f802 	bl	80076f8 <_ZL38SystemClock_Config_STM32F303_NUCLEO_32v>
#else
#error "Please specify the system clock configuration for your target board."
#endif
}
 80076f4:	bf00      	nop
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <_ZL38SystemClock_Config_STM32F303_NUCLEO_32v>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config_STM32F303_NUCLEO_32(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b090      	sub	sp, #64	; 0x40
 80076fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007702:	2302      	movs	r3, #2
 8007704:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800770a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007710:	1d3b      	adds	r3, r7, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fa fa40 	bl	8001b98 <HAL_RCC_OscConfig>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d000      	beq.n	800772a <_ZL38SystemClock_Config_STM32F303_NUCLEO_32v+0x32>
  {
    /* Initialization Error */
    while(1);
 8007728:	e7fe      	b.n	8007728 <_ZL38SystemClock_Config_STM32F303_NUCLEO_32v+0x30>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800772a:	230f      	movs	r3, #15
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800772e:	2302      	movs	r3, #2
 8007730:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8007740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f7fb f914 	bl	8002974 <HAL_RCC_ClockConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf14      	ite	ne
 8007752:	2301      	movne	r3, #1
 8007754:	2300      	moveq	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d000      	beq.n	800775e <_ZL38SystemClock_Config_STM32F303_NUCLEO_32v+0x66>
  {
    /* Initialization Error */
    while(1);
 800775c:	e7fe      	b.n	800775c <_ZL38SystemClock_Config_STM32F303_NUCLEO_32v+0x64>
  }
}
 800775e:	bf00      	nop
 8007760:	3740      	adds	r7, #64	; 0x40
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Turn LED3 on: Transfer error in reception/transmission process */
#ifdef USE_STM32_F3_DISCO
  BSP_LED_On(LED_RED);
#elif defined USE_STM32F3XX_NUCLEO_32
  BSP_LED_On(LED_GREEN);
 800776e:	2000      	movs	r0, #0
 8007770:	f7f8 fdba 	bl	80002e8 <BSP_LED_On>
#endif

}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm>:
	/* Class to store a characteristic curve */
	template<typename Tx, typename Ty>
	class CharacteristicCurve
	{
	public:
		CharacteristicCurve(std::pair<Tx, Ty> data_points[], uint32_t u32_num_of_data_points)
 800777c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
			//:m_a_lookup_table(data_points)
		{
			m_u32_num_of_data_points = u32_num_of_data_points;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	605a      	str	r2, [r3, #4]
			m_p_lookup_table = new std::pair<Tx, Ty>[m_u32_num_of_data_points];
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685c      	ldr	r4, [r3, #4]
 8007792:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8007796:	d201      	bcs.n	800779c <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm+0x20>
 8007798:	00e3      	lsls	r3, r4, #3
 800779a:	e001      	b.n	80077a0 <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm+0x24>
 800779c:	f04f 33ff 	mov.w	r3, #4294967295
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fbf3 	bl	8008f8c <_Znaj>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461e      	mov	r6, r3
 80077aa:	4632      	mov	r2, r6
 80077ac:	1e63      	subs	r3, r4, #1
 80077ae:	461c      	mov	r4, r3
 80077b0:	4615      	mov	r5, r2
 80077b2:	2c00      	cmp	r4, #0
 80077b4:	db05      	blt.n	80077c2 <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm+0x46>
 80077b6:	4628      	mov	r0, r5
 80077b8:	f000 f821 	bl	80077fe <_ZNSt4pairIllEC1IllLb1EEEv>
 80077bc:	3508      	adds	r5, #8
 80077be:	3c01      	subs	r4, #1
 80077c0:	e7f7      	b.n	80077b2 <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm+0x36>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	601e      	str	r6, [r3, #0]
			for (uint32_t u32_i = 0u; u32_i < m_u32_num_of_data_points; ++u32_i)
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d20f      	bcs.n	80077f4 <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm+0x78>
			{
				m_p_lookup_table[u32_i] = data_points[u32_i];
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	18d0      	adds	r0, r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	4413      	add	r3, r2
 80077e6:	4619      	mov	r1, r3
 80077e8:	f000 f81a 	bl	8007820 <_ZNSt4pairIllEaSERKS0_>
			for (uint32_t u32_i = 0u; u32_i < m_u32_num_of_data_points; ++u32_i)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	3301      	adds	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e7ea      	b.n	80077ca <_ZN3app19CharacteristicCurveIllEC1EPSt4pairIllEm+0x4e>

			}
		}
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4618      	mov	r0, r3
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077fe <_ZNSt4pairIllEC1IllLb1EEEv>:
      _GLIBCXX_CONSTEXPR pair()
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <_ZNSt4pairIllEaSERKS0_>:

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch_no_braces&>::type __p)
      {
	first = __p.first;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
	second = __p.second;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
	return *this;
 800783a:	687b      	ldr	r3, [r7, #4]
      }
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_ADC_MspInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
#ifdef HAL_ADC_MODULE_ENABLED
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
}
 8007860:	bf00      	nop
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_Delay>:



/** see https://www.cnblogs.com/shangdawei/p/4684798.html */
void HAL_Delay(volatile uint32_t millis)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  /* replace HAL library blocking delay function
   * with FreeRTOS thread aware equivalent */
  vTaskDelay(millis);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 faf3 	bl	8007e60 <vTaskDelay>
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8007882:	b480      	push	{r7}
 8007884:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8007886:	e7fe      	b.n	8007886 <HardFault_Handler+0x4>

08007888 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800788c:	e7fe      	b.n	800788c <MemManage_Handler+0x4>

0800788e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800788e:	b480      	push	{r7}
 8007890:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8007892:	e7fe      	b.n	8007892 <BusFault_Handler+0x4>

08007894 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8007898:	e7fe      	b.n	8007898 <UsageFault_Handler+0x4>

0800789a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078ac:	4b1f      	ldr	r3, [pc, #124]	; (800792c <SystemInit+0x84>)
 80078ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b2:	4a1e      	ldr	r2, [pc, #120]	; (800792c <SystemInit+0x84>)
 80078b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80078bc:	4b1c      	ldr	r3, [pc, #112]	; (8007930 <SystemInit+0x88>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <SystemInit+0x88>)
 80078c2:	f043 0301 	orr.w	r3, r3, #1
 80078c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80078c8:	4b19      	ldr	r3, [pc, #100]	; (8007930 <SystemInit+0x88>)
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	4918      	ldr	r1, [pc, #96]	; (8007930 <SystemInit+0x88>)
 80078ce:	4b19      	ldr	r3, [pc, #100]	; (8007934 <SystemInit+0x8c>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80078d4:	4b16      	ldr	r3, [pc, #88]	; (8007930 <SystemInit+0x88>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a15      	ldr	r2, [pc, #84]	; (8007930 <SystemInit+0x88>)
 80078da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80078de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <SystemInit+0x88>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a11      	ldr	r2, [pc, #68]	; (8007930 <SystemInit+0x88>)
 80078ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <SystemInit+0x88>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	4a0e      	ldr	r2, [pc, #56]	; (8007930 <SystemInit+0x88>)
 80078f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80078fa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80078fc:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <SystemInit+0x88>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	4a0b      	ldr	r2, [pc, #44]	; (8007930 <SystemInit+0x88>)
 8007902:	f023 030f 	bic.w	r3, r3, #15
 8007906:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <SystemInit+0x88>)
 800790a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790c:	4908      	ldr	r1, [pc, #32]	; (8007930 <SystemInit+0x88>)
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <SystemInit+0x90>)
 8007910:	4013      	ands	r3, r2
 8007912:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <SystemInit+0x88>)
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800791a:	4b04      	ldr	r3, [pc, #16]	; (800792c <SystemInit+0x84>)
 800791c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007920:	609a      	str	r2, [r3, #8]
#endif
}
 8007922:	bf00      	nop
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	e000ed00 	.word	0xe000ed00
 8007930:	40021000 	.word	0x40021000
 8007934:	f87fc00c 	.word	0xf87fc00c
 8007938:	ff00fccc 	.word	0xff00fccc

0800793c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f103 0208 	add.w	r2, r3, #8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f103 0208 	add.w	r2, r3, #8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f103 0208 	add.w	r2, r3, #8
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d103      	bne.n	80079fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	e00c      	b.n	8007a18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3308      	adds	r3, #8
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e002      	b.n	8007a0c <vListInsert+0x2e>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d2f6      	bcs.n	8007a06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6892      	ldr	r2, [r2, #8]
 8007a66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6852      	ldr	r2, [r2, #4]
 8007a70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d103      	bne.n	8007a84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	1e5a      	subs	r2, r3, #1
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08c      	sub	sp, #48	; 0x30
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ab4:	88fb      	ldrh	r3, [r7, #6]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 ff63 	bl	8008984 <pvPortMalloc>
 8007abe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00e      	beq.n	8007ae4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ac6:	2064      	movs	r0, #100	; 0x64
 8007ac8:	f000 ff5c 	bl	8008984 <pvPortMalloc>
 8007acc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8007ada:	e005      	b.n	8007ae8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007adc:	6978      	ldr	r0, [r7, #20]
 8007ade:	f001 f817 	bl	8008b10 <vPortFree>
 8007ae2:	e001      	b.n	8007ae8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aee:	88fa      	ldrh	r2, [r7, #6]
 8007af0:	2300      	movs	r3, #0
 8007af2:	9303      	str	r3, [sp, #12]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	9302      	str	r3, [sp, #8]
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f80e 	bl	8007b26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b0a:	69f8      	ldr	r0, [r7, #28]
 8007b0c:	f000 f8ac 	bl	8007c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b10:	2301      	movs	r3, #1
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	e002      	b.n	8007b1c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b088      	sub	sp, #32
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	21a5      	movs	r1, #165	; 0xa5
 8007b40:	f001 fb70 	bl	8009224 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f023 0307 	bic.w	r3, r3, #7
 8007b5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <prvInitialiseNewTask+0x56>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	e7fe      	b.n	8007b7a <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01f      	beq.n	8007bc8 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	e012      	b.n	8007bb4 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	7819      	ldrb	r1, [r3, #0]
 8007b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	3334      	adds	r3, #52	; 0x34
 8007b9e:	460a      	mov	r2, r1
 8007ba0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d9e9      	bls.n	8007b8e <prvInitialiseNewTask+0x68>
 8007bba:	e000      	b.n	8007bbe <prvInitialiseNewTask+0x98>
			{
				break;
 8007bbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bc6:	e003      	b.n	8007bd0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d901      	bls.n	8007bda <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	2200      	movs	r2, #0
 8007bea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fec3 	bl	800797c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff febe 	bl	800797c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	f1c3 0205 	rsb	r2, r3, #5
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	e009      	b.n	8007c30 <prvInitialiseNewTask+0x10a>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8007c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	3314      	adds	r3, #20
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f2      	beq.n	8007c1c <prvInitialiseNewTask+0xf6>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2200      	movs	r2, #0
 8007c3a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	69b8      	ldr	r0, [r7, #24]
 8007c4a:	f000 fc95 	bl	8008578 <pxPortInitialiseStack>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c60:	bf00      	nop
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c70:	f000 fdac 	bl	80087cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c74:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <prvAddNewTaskToReadyList+0xc0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	4a2b      	ldr	r2, [pc, #172]	; (8007d28 <prvAddNewTaskToReadyList+0xc0>)
 8007c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c7e:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d109      	bne.n	8007c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c86:	4a29      	ldr	r2, [pc, #164]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c8c:	4b26      	ldr	r3, [pc, #152]	; (8007d28 <prvAddNewTaskToReadyList+0xc0>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d110      	bne.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c94:	f000 fb6e 	bl	8008374 <prvInitialiseTaskLists>
 8007c98:	e00d      	b.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c9a:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ca2:	4b22      	ldr	r3, [pc, #136]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d802      	bhi.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cb0:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cb6:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <prvAddNewTaskToReadyList+0xcc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <prvAddNewTaskToReadyList+0xcc>)
 8007cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cc0:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <prvAddNewTaskToReadyList+0xcc>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	2201      	movs	r2, #1
 8007cce:	409a      	lsls	r2, r3
 8007cd0:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <prvAddNewTaskToReadyList+0xd0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <prvAddNewTaskToReadyList+0xd0>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <prvAddNewTaskToReadyList+0xd4>)
 8007ce8:	441a      	add	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7ff fe50 	bl	8007996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cf6:	f000 fd97 	bl	8008828 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d207      	bcs.n	8007d20 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <prvAddNewTaskToReadyList+0xd8>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200001a4 	.word	0x200001a4
 8007d2c:	200000c8 	.word	0x200000c8
 8007d30:	200001b0 	.word	0x200001b0
 8007d34:	200001c0 	.word	0x200001c0
 8007d38:	200001ac 	.word	0x200001ac
 8007d3c:	200000cc 	.word	0x200000cc
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d4c:	f000 fd3e 	bl	80087cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <vTaskDelete+0x18>
 8007d56:	4b38      	ldr	r3, [pc, #224]	; (8007e38 <vTaskDelete+0xf4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	e000      	b.n	8007d5e <vTaskDelete+0x1a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff fe73 	bl	8007a50 <uxListRemove>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d115      	bne.n	8007d9c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4931      	ldr	r1, [pc, #196]	; (8007e3c <vTaskDelete+0xf8>)
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <vTaskDelete+0x58>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43da      	mvns	r2, r3
 8007d92:	4b2b      	ldr	r3, [pc, #172]	; (8007e40 <vTaskDelete+0xfc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4013      	ands	r3, r2
 8007d98:	4a29      	ldr	r2, [pc, #164]	; (8007e40 <vTaskDelete+0xfc>)
 8007d9a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3318      	adds	r3, #24
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff fe51 	bl	8007a50 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007dae:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <vTaskDelete+0x100>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a23      	ldr	r2, [pc, #140]	; (8007e44 <vTaskDelete+0x100>)
 8007db6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007db8:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <vTaskDelete+0xf4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d10b      	bne.n	8007dda <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	481f      	ldr	r0, [pc, #124]	; (8007e48 <vTaskDelete+0x104>)
 8007dca:	f7ff fde4 	bl	8007996 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007dce:	4b1f      	ldr	r3, [pc, #124]	; (8007e4c <vTaskDelete+0x108>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <vTaskDelete+0x108>)
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	e009      	b.n	8007dee <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <vTaskDelete+0x10c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <vTaskDelete+0x10c>)
 8007de2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 fb31 	bl	800844c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007dea:	f000 fb3f 	bl	800846c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007dee:	f000 fd1b 	bl	8008828 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007df2:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <vTaskDelete+0x110>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01a      	beq.n	8007e30 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <vTaskDelete+0xf4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d115      	bne.n	8007e30 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007e04:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <vTaskDelete+0x114>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <vTaskDelete+0xdc>
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60bb      	str	r3, [r7, #8]
 8007e1e:	e7fe      	b.n	8007e1e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <vTaskDelete+0x118>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	200000c8 	.word	0x200000c8
 8007e3c:	200000cc 	.word	0x200000cc
 8007e40:	200001ac 	.word	0x200001ac
 8007e44:	200001c0 	.word	0x200001c0
 8007e48:	20000174 	.word	0x20000174
 8007e4c:	20000188 	.word	0x20000188
 8007e50:	200001a4 	.word	0x200001a4
 8007e54:	200001b0 	.word	0x200001b0
 8007e58:	200001cc 	.word	0x200001cc
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <vTaskDelay+0x60>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <vTaskDelay+0x2e>
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	60bb      	str	r3, [r7, #8]
 8007e8c:	e7fe      	b.n	8007e8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007e8e:	f000 f861 	bl	8007f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fb09 	bl	80084ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e9a:	f000 f869 	bl	8007f70 <xTaskResumeAll>
 8007e9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d107      	bne.n	8007eb6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <vTaskDelay+0x64>)
 8007ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	200001cc 	.word	0x200001cc
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007ece:	4b1b      	ldr	r3, [pc, #108]	; (8007f3c <vTaskStartScheduler+0x74>)
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2282      	movs	r2, #130	; 0x82
 8007eda:	4919      	ldr	r1, [pc, #100]	; (8007f40 <vTaskStartScheduler+0x78>)
 8007edc:	4819      	ldr	r0, [pc, #100]	; (8007f44 <vTaskStartScheduler+0x7c>)
 8007ede:	f7ff fde1 	bl	8007aa4 <xTaskCreate>
 8007ee2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d115      	bne.n	8007f16 <vTaskStartScheduler+0x4e>
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007efc:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <vTaskStartScheduler+0x80>)
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f04:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <vTaskStartScheduler+0x84>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <vTaskStartScheduler+0x88>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f10:	f000 fbbe 	bl	8008690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f14:	e00d      	b.n	8007f32 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d109      	bne.n	8007f32 <vTaskStartScheduler+0x6a>
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
 8007f30:	e7fe      	b.n	8007f30 <vTaskStartScheduler+0x68>
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200001c8 	.word	0x200001c8
 8007f40:	08009d80 	.word	0x08009d80
 8007f44:	08008341 	.word	0x08008341
 8007f48:	200001c4 	.word	0x200001c4
 8007f4c:	200001b0 	.word	0x200001b0
 8007f50:	200001a8 	.word	0x200001a8

08007f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <vTaskSuspendAll+0x18>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	4a03      	ldr	r2, [pc, #12]	; (8007f6c <vTaskSuspendAll+0x18>)
 8007f60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007f62:	bf00      	nop
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	200001cc 	.word	0x200001cc

08007f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f7e:	4b41      	ldr	r3, [pc, #260]	; (8008084 <xTaskResumeAll+0x114>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <xTaskResumeAll+0x2a>
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	e7fe      	b.n	8007f98 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f9a:	f000 fc17 	bl	80087cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f9e:	4b39      	ldr	r3, [pc, #228]	; (8008084 <xTaskResumeAll+0x114>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4a37      	ldr	r2, [pc, #220]	; (8008084 <xTaskResumeAll+0x114>)
 8007fa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa8:	4b36      	ldr	r3, [pc, #216]	; (8008084 <xTaskResumeAll+0x114>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d161      	bne.n	8008074 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fb0:	4b35      	ldr	r3, [pc, #212]	; (8008088 <xTaskResumeAll+0x118>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d05d      	beq.n	8008074 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fb8:	e02e      	b.n	8008018 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fba:	4b34      	ldr	r3, [pc, #208]	; (800808c <xTaskResumeAll+0x11c>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fd42 	bl	8007a50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff fd3d 	bl	8007a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	2201      	movs	r2, #1
 8007fdc:	409a      	lsls	r2, r3
 8007fde:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <xTaskResumeAll+0x120>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <xTaskResumeAll+0x120>)
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4a27      	ldr	r2, [pc, #156]	; (8008094 <xTaskResumeAll+0x124>)
 8007ff6:	441a      	add	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	f7ff fcc9 	bl	8007996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	4b23      	ldr	r3, [pc, #140]	; (8008098 <xTaskResumeAll+0x128>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	429a      	cmp	r2, r3
 8008010:	d302      	bcc.n	8008018 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008012:	4b22      	ldr	r3, [pc, #136]	; (800809c <xTaskResumeAll+0x12c>)
 8008014:	2201      	movs	r2, #1
 8008016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <xTaskResumeAll+0x11c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1cc      	bne.n	8007fba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008026:	f000 fa21 	bl	800846c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800802a:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <xTaskResumeAll+0x130>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d010      	beq.n	8008058 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008036:	f000 f837 	bl	80080a8 <xTaskIncrementTick>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008040:	4b16      	ldr	r3, [pc, #88]	; (800809c <xTaskResumeAll+0x12c>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3b01      	subs	r3, #1
 800804a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f1      	bne.n	8008036 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008052:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <xTaskResumeAll+0x130>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008058:	4b10      	ldr	r3, [pc, #64]	; (800809c <xTaskResumeAll+0x12c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008064:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <xTaskResumeAll+0x134>)
 8008066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008074:	f000 fbd8 	bl	8008828 <vPortExitCritical>

	return xAlreadyYielded;
 8008078:	68bb      	ldr	r3, [r7, #8]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200001cc 	.word	0x200001cc
 8008088:	200001a4 	.word	0x200001a4
 800808c:	20000160 	.word	0x20000160
 8008090:	200001ac 	.word	0x200001ac
 8008094:	200000cc 	.word	0x200000cc
 8008098:	200000c8 	.word	0x200000c8
 800809c:	200001b8 	.word	0x200001b8
 80080a0:	200001b4 	.word	0x200001b4
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b2:	4b52      	ldr	r3, [pc, #328]	; (80081fc <xTaskIncrementTick+0x154>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 808d 	bne.w	80081d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080bc:	4b50      	ldr	r3, [pc, #320]	; (8008200 <xTaskIncrementTick+0x158>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080c4:	4a4e      	ldr	r2, [pc, #312]	; (8008200 <xTaskIncrementTick+0x158>)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d11f      	bne.n	8008110 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80080d0:	4b4c      	ldr	r3, [pc, #304]	; (8008204 <xTaskIncrementTick+0x15c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <xTaskIncrementTick+0x46>
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	e7fe      	b.n	80080ec <xTaskIncrementTick+0x44>
 80080ee:	4b45      	ldr	r3, [pc, #276]	; (8008204 <xTaskIncrementTick+0x15c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	4b44      	ldr	r3, [pc, #272]	; (8008208 <xTaskIncrementTick+0x160>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a42      	ldr	r2, [pc, #264]	; (8008204 <xTaskIncrementTick+0x15c>)
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	4a42      	ldr	r2, [pc, #264]	; (8008208 <xTaskIncrementTick+0x160>)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	4b42      	ldr	r3, [pc, #264]	; (800820c <xTaskIncrementTick+0x164>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3301      	adds	r3, #1
 8008108:	4a40      	ldr	r2, [pc, #256]	; (800820c <xTaskIncrementTick+0x164>)
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	f000 f9ae 	bl	800846c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008110:	4b3f      	ldr	r3, [pc, #252]	; (8008210 <xTaskIncrementTick+0x168>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	429a      	cmp	r2, r3
 8008118:	d348      	bcc.n	80081ac <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800811a:	4b3a      	ldr	r3, [pc, #232]	; (8008204 <xTaskIncrementTick+0x15c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008124:	4b3a      	ldr	r3, [pc, #232]	; (8008210 <xTaskIncrementTick+0x168>)
 8008126:	f04f 32ff 	mov.w	r2, #4294967295
 800812a:	601a      	str	r2, [r3, #0]
					break;
 800812c:	e03e      	b.n	80081ac <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812e:	4b35      	ldr	r3, [pc, #212]	; (8008204 <xTaskIncrementTick+0x15c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d203      	bcs.n	800814e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008146:	4a32      	ldr	r2, [pc, #200]	; (8008210 <xTaskIncrementTick+0x168>)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800814c:	e02e      	b.n	80081ac <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3304      	adds	r3, #4
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fc7c 	bl	8007a50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d004      	beq.n	800816a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	3318      	adds	r3, #24
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fc73 	bl	8007a50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	2201      	movs	r2, #1
 8008170:	409a      	lsls	r2, r3
 8008172:	4b28      	ldr	r3, [pc, #160]	; (8008214 <xTaskIncrementTick+0x16c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4313      	orrs	r3, r2
 8008178:	4a26      	ldr	r2, [pc, #152]	; (8008214 <xTaskIncrementTick+0x16c>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4a23      	ldr	r2, [pc, #140]	; (8008218 <xTaskIncrementTick+0x170>)
 800818a:	441a      	add	r2, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7ff fbff 	bl	8007996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819c:	4b1f      	ldr	r3, [pc, #124]	; (800821c <xTaskIncrementTick+0x174>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d3b9      	bcc.n	800811a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081aa:	e7b6      	b.n	800811a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081ac:	4b1b      	ldr	r3, [pc, #108]	; (800821c <xTaskIncrementTick+0x174>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b2:	4919      	ldr	r1, [pc, #100]	; (8008218 <xTaskIncrementTick+0x170>)
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d901      	bls.n	80081c8 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80081c4:	2301      	movs	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80081c8:	4b15      	ldr	r3, [pc, #84]	; (8008220 <xTaskIncrementTick+0x178>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <xTaskIncrementTick+0x13c>
			{
				vApplicationTickHook();
 80081d0:	f7ff f9a7 	bl	8007522 <vApplicationTickHook>
 80081d4:	e006      	b.n	80081e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80081d6:	4b12      	ldr	r3, [pc, #72]	; (8008220 <xTaskIncrementTick+0x178>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	4a10      	ldr	r2, [pc, #64]	; (8008220 <xTaskIncrementTick+0x178>)
 80081de:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80081e0:	f7ff f99f 	bl	8007522 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80081e4:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <xTaskIncrementTick+0x17c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80081f0:	697b      	ldr	r3, [r7, #20]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200001cc 	.word	0x200001cc
 8008200:	200001a8 	.word	0x200001a8
 8008204:	20000158 	.word	0x20000158
 8008208:	2000015c 	.word	0x2000015c
 800820c:	200001bc 	.word	0x200001bc
 8008210:	200001c4 	.word	0x200001c4
 8008214:	200001ac 	.word	0x200001ac
 8008218:	200000cc 	.word	0x200000cc
 800821c:	200000c8 	.word	0x200000c8
 8008220:	200001b4 	.word	0x200001b4
 8008224:	200001b8 	.word	0x200001b8

08008228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800822e:	4b3e      	ldr	r3, [pc, #248]	; (8008328 <vTaskSwitchContext+0x100>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008236:	4b3d      	ldr	r3, [pc, #244]	; (800832c <vTaskSwitchContext+0x104>)
 8008238:	2201      	movs	r2, #1
 800823a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800823c:	e06f      	b.n	800831e <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 800823e:	4b3b      	ldr	r3, [pc, #236]	; (800832c <vTaskSwitchContext+0x104>)
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008244:	4b3a      	ldr	r3, [pc, #232]	; (8008330 <vTaskSwitchContext+0x108>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	429a      	cmp	r2, r3
 800825a:	d111      	bne.n	8008280 <vTaskSwitchContext+0x58>
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	3304      	adds	r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d10b      	bne.n	8008280 <vTaskSwitchContext+0x58>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3308      	adds	r3, #8
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	429a      	cmp	r2, r3
 8008272:	d105      	bne.n	8008280 <vTaskSwitchContext+0x58>
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	330c      	adds	r3, #12
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	429a      	cmp	r2, r3
 800827e:	d008      	beq.n	8008292 <vTaskSwitchContext+0x6a>
 8008280:	4b2b      	ldr	r3, [pc, #172]	; (8008330 <vTaskSwitchContext+0x108>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b2a      	ldr	r3, [pc, #168]	; (8008330 <vTaskSwitchContext+0x108>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3334      	adds	r3, #52	; 0x34
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7ff f94e 	bl	800752e <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8008292:	4b27      	ldr	r3, [pc, #156]	; (8008330 <vTaskSwitchContext+0x108>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a27      	ldr	r2, [pc, #156]	; (8008334 <vTaskSwitchContext+0x10c>)
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	661a      	str	r2, [r3, #96]	; 0x60
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829c:	4b26      	ldr	r3, [pc, #152]	; (8008338 <vTaskSwitchContext+0x110>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	fab3 f383 	clz	r3, r3
 80082a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	f1c3 031f 	rsb	r3, r3, #31
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	4922      	ldr	r1, [pc, #136]	; (800833c <vTaskSwitchContext+0x114>)
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <vTaskSwitchContext+0xb2>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	e7fe      	b.n	80082d8 <vTaskSwitchContext+0xb0>
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a15      	ldr	r2, [pc, #84]	; (800833c <vTaskSwitchContext+0x114>)
 80082e6:	4413      	add	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	3308      	adds	r3, #8
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d104      	bne.n	800830a <vTaskSwitchContext+0xe2>
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4a07      	ldr	r2, [pc, #28]	; (8008330 <vTaskSwitchContext+0x108>)
 8008312:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8008314:	4b06      	ldr	r3, [pc, #24]	; (8008330 <vTaskSwitchContext+0x108>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800831a:	4a06      	ldr	r2, [pc, #24]	; (8008334 <vTaskSwitchContext+0x10c>)
 800831c:	6013      	str	r3, [r2, #0]
}
 800831e:	bf00      	nop
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200001cc 	.word	0x200001cc
 800832c:	200001b8 	.word	0x200001b8
 8008330:	200000c8 	.word	0x200000c8
 8008334:	200001a0 	.word	0x200001a0
 8008338:	200001ac 	.word	0x200001ac
 800833c:	200000cc 	.word	0x200000cc

08008340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008348:	f000 f854 	bl	80083f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <prvIdleTask+0x2c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d907      	bls.n	8008364 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <prvIdleTask+0x30>)
 8008356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008364:	f7ff f8d6 	bl	8007514 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008368:	e7ee      	b.n	8008348 <prvIdleTask+0x8>
 800836a:	bf00      	nop
 800836c:	200000cc 	.word	0x200000cc
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800837a:	2300      	movs	r3, #0
 800837c:	607b      	str	r3, [r7, #4]
 800837e:	e00c      	b.n	800839a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4a12      	ldr	r2, [pc, #72]	; (80083d4 <prvInitialiseTaskLists+0x60>)
 800838c:	4413      	add	r3, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff fad4 	bl	800793c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3301      	adds	r3, #1
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b04      	cmp	r3, #4
 800839e:	d9ef      	bls.n	8008380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083a0:	480d      	ldr	r0, [pc, #52]	; (80083d8 <prvInitialiseTaskLists+0x64>)
 80083a2:	f7ff facb 	bl	800793c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083a6:	480d      	ldr	r0, [pc, #52]	; (80083dc <prvInitialiseTaskLists+0x68>)
 80083a8:	f7ff fac8 	bl	800793c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083ac:	480c      	ldr	r0, [pc, #48]	; (80083e0 <prvInitialiseTaskLists+0x6c>)
 80083ae:	f7ff fac5 	bl	800793c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083b2:	480c      	ldr	r0, [pc, #48]	; (80083e4 <prvInitialiseTaskLists+0x70>)
 80083b4:	f7ff fac2 	bl	800793c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083b8:	480b      	ldr	r0, [pc, #44]	; (80083e8 <prvInitialiseTaskLists+0x74>)
 80083ba:	f7ff fabf 	bl	800793c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <prvInitialiseTaskLists+0x78>)
 80083c0:	4a05      	ldr	r2, [pc, #20]	; (80083d8 <prvInitialiseTaskLists+0x64>)
 80083c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083c4:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <prvInitialiseTaskLists+0x7c>)
 80083c6:	4a05      	ldr	r2, [pc, #20]	; (80083dc <prvInitialiseTaskLists+0x68>)
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	200000cc 	.word	0x200000cc
 80083d8:	20000130 	.word	0x20000130
 80083dc:	20000144 	.word	0x20000144
 80083e0:	20000160 	.word	0x20000160
 80083e4:	20000174 	.word	0x20000174
 80083e8:	2000018c 	.word	0x2000018c
 80083ec:	20000158 	.word	0x20000158
 80083f0:	2000015c 	.word	0x2000015c

080083f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083fa:	e019      	b.n	8008430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083fc:	f000 f9e6 	bl	80087cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008400:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <prvCheckTasksWaitingTermination+0x4c>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fb1f 	bl	8007a50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008412:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <prvCheckTasksWaitingTermination+0x50>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3b01      	subs	r3, #1
 8008418:	4a0a      	ldr	r2, [pc, #40]	; (8008444 <prvCheckTasksWaitingTermination+0x50>)
 800841a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <prvCheckTasksWaitingTermination+0x54>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3b01      	subs	r3, #1
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <prvCheckTasksWaitingTermination+0x54>)
 8008424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008426:	f000 f9ff 	bl	8008828 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f80e 	bl	800844c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <prvCheckTasksWaitingTermination+0x54>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e1      	bne.n	80083fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000174 	.word	0x20000174
 8008444:	200001a4 	.word	0x200001a4
 8008448:	20000188 	.word	0x20000188

0800844c <prvDeleteTCB>:
/* Added function by Clemens 2019-10-29 to get the stack size of a task - end */

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fb59 	bl	8008b10 <vPortFree>
			vPortFree( pxTCB );
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fb56 	bl	8008b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008464:	bf00      	nop
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008472:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <prvResetNextTaskUnblockTime+0x38>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <prvResetNextTaskUnblockTime+0x3c>)
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008484:	e008      	b.n	8008498 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008486:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <prvResetNextTaskUnblockTime+0x38>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4a04      	ldr	r2, [pc, #16]	; (80084a8 <prvResetNextTaskUnblockTime+0x3c>)
 8008496:	6013      	str	r3, [r2, #0]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	20000158 	.word	0x20000158
 80084a8:	200001c4 	.word	0x200001c4

080084ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084b6:	4b29      	ldr	r3, [pc, #164]	; (800855c <prvAddCurrentTaskToDelayedList+0xb0>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084bc:	4b28      	ldr	r3, [pc, #160]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fac4 	bl	8007a50 <uxListRemove>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10b      	bne.n	80084e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084ce:	4b24      	ldr	r3, [pc, #144]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	2201      	movs	r2, #1
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43da      	mvns	r2, r3
 80084dc:	4b21      	ldr	r3, [pc, #132]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4013      	ands	r3, r2
 80084e2:	4a20      	ldr	r2, [pc, #128]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d10a      	bne.n	8008504 <prvAddCurrentTaskToDelayedList+0x58>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f4:	4b1a      	ldr	r3, [pc, #104]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	481a      	ldr	r0, [pc, #104]	; (8008568 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084fe:	f7ff fa4a 	bl	8007996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008502:	e026      	b.n	8008552 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800850c:	4b14      	ldr	r3, [pc, #80]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	429a      	cmp	r2, r3
 800851a:	d209      	bcs.n	8008530 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800851c:	4b13      	ldr	r3, [pc, #76]	; (800856c <prvAddCurrentTaskToDelayedList+0xc0>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7ff fa58 	bl	80079de <vListInsert>
}
 800852e:	e010      	b.n	8008552 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7ff fa4e 	bl	80079de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	429a      	cmp	r2, r3
 800854a:	d202      	bcs.n	8008552 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800854c:	4a09      	ldr	r2, [pc, #36]	; (8008574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6013      	str	r3, [r2, #0]
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200001a8 	.word	0x200001a8
 8008560:	200000c8 	.word	0x200000c8
 8008564:	200001ac 	.word	0x200001ac
 8008568:	2000018c 	.word	0x2000018c
 800856c:	2000015c 	.word	0x2000015c
 8008570:	20000158 	.word	0x20000158
 8008574:	200001c4 	.word	0x200001c4

08008578 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3b04      	subs	r3, #4
 8008588:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b04      	subs	r3, #4
 8008596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f023 0201 	bic.w	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3b04      	subs	r3, #4
 80085a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085a8:	4a0c      	ldr	r2, [pc, #48]	; (80085dc <pxPortInitialiseStack+0x64>)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3b14      	subs	r3, #20
 80085b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f06f 0202 	mvn.w	r2, #2
 80085c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3b20      	subs	r3, #32
 80085cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085ce:	68fb      	ldr	r3, [r7, #12]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	080085e1 	.word	0x080085e1

080085e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ea:	4b11      	ldr	r3, [pc, #68]	; (8008630 <prvTaskExitError+0x50>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d009      	beq.n	8008608 <prvTaskExitError+0x28>
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e7fe      	b.n	8008606 <prvTaskExitError+0x26>
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800861a:	bf00      	nop
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0fc      	beq.n	800861c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	20000010 	.word	0x20000010
	...

08008640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <pxCurrentTCBConst2>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	6808      	ldr	r0, [r1, #0]
 8008646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	f380 8809 	msr	PSP, r0
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	4770      	bx	lr
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst2>:
 8008660:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008668:	4808      	ldr	r0, [pc, #32]	; (800868c <prvPortStartFirstTask+0x24>)
 800866a:	6800      	ldr	r0, [r0, #0]
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f380 8808 	msr	MSP, r0
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8814 	msr	CONTROL, r0
 800867a:	b662      	cpsie	i
 800867c:	b661      	cpsie	f
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	df00      	svc	0
 8008688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800868a:	bf00      	nop
 800868c:	e000ed08 	.word	0xe000ed08

08008690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008696:	4b44      	ldr	r3, [pc, #272]	; (80087a8 <xPortStartScheduler+0x118>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a44      	ldr	r2, [pc, #272]	; (80087ac <xPortStartScheduler+0x11c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d109      	bne.n	80086b4 <xPortStartScheduler+0x24>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	e7fe      	b.n	80086b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086b4:	4b3c      	ldr	r3, [pc, #240]	; (80087a8 <xPortStartScheduler+0x118>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a3d      	ldr	r2, [pc, #244]	; (80087b0 <xPortStartScheduler+0x120>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d109      	bne.n	80086d2 <xPortStartScheduler+0x42>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e7fe      	b.n	80086d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086d2:	4b38      	ldr	r3, [pc, #224]	; (80087b4 <xPortStartScheduler+0x124>)
 80086d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4b30      	ldr	r3, [pc, #192]	; (80087b8 <xPortStartScheduler+0x128>)
 80086f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086fa:	4b30      	ldr	r3, [pc, #192]	; (80087bc <xPortStartScheduler+0x12c>)
 80086fc:	2207      	movs	r2, #7
 80086fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008700:	e009      	b.n	8008716 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008702:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <xPortStartScheduler+0x12c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3b01      	subs	r3, #1
 8008708:	4a2c      	ldr	r2, [pc, #176]	; (80087bc <xPortStartScheduler+0x12c>)
 800870a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871e:	2b80      	cmp	r3, #128	; 0x80
 8008720:	d0ef      	beq.n	8008702 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008722:	4b26      	ldr	r3, [pc, #152]	; (80087bc <xPortStartScheduler+0x12c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1c3 0307 	rsb	r3, r3, #7
 800872a:	2b04      	cmp	r3, #4
 800872c:	d009      	beq.n	8008742 <xPortStartScheduler+0xb2>
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	60bb      	str	r3, [r7, #8]
 8008740:	e7fe      	b.n	8008740 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008742:	4b1e      	ldr	r3, [pc, #120]	; (80087bc <xPortStartScheduler+0x12c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <xPortStartScheduler+0x12c>)
 800874a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <xPortStartScheduler+0x12c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008754:	4a19      	ldr	r2, [pc, #100]	; (80087bc <xPortStartScheduler+0x12c>)
 8008756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	b2da      	uxtb	r2, r3
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008760:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <xPortStartScheduler+0x130>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <xPortStartScheduler+0x130>)
 8008766:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800876a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <xPortStartScheduler+0x130>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <xPortStartScheduler+0x130>)
 8008772:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008778:	f000 f8d6 	bl	8008928 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800877c:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <xPortStartScheduler+0x134>)
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008782:	f000 f8f5 	bl	8008970 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <xPortStartScheduler+0x138>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a0f      	ldr	r2, [pc, #60]	; (80087c8 <xPortStartScheduler+0x138>)
 800878c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008790:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008792:	f7ff ff69 	bl	8008668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008796:	f7ff fd47 	bl	8008228 <vTaskSwitchContext>
	prvTaskExitError();
 800879a:	f7ff ff21 	bl	80085e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed00 	.word	0xe000ed00
 80087ac:	410fc271 	.word	0x410fc271
 80087b0:	410fc270 	.word	0x410fc270
 80087b4:	e000e400 	.word	0xe000e400
 80087b8:	200001d0 	.word	0x200001d0
 80087bc:	200001d4 	.word	0x200001d4
 80087c0:	e000ed20 	.word	0xe000ed20
 80087c4:	20000010 	.word	0x20000010
 80087c8:	e000ef34 	.word	0xe000ef34

080087cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087e4:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <vPortEnterCritical+0x54>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a0d      	ldr	r2, [pc, #52]	; (8008820 <vPortEnterCritical+0x54>)
 80087ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <vPortEnterCritical+0x54>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10e      	bne.n	8008814 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <vPortEnterCritical+0x58>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <vPortEnterCritical+0x48>
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	603b      	str	r3, [r7, #0]
 8008812:	e7fe      	b.n	8008812 <vPortEnterCritical+0x46>
	}
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	20000010 	.word	0x20000010
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <vPortExitCritical+0x4c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d109      	bne.n	800884a <vPortExitCritical+0x22>
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	e7fe      	b.n	8008848 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800884a:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <vPortExitCritical+0x4c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3b01      	subs	r3, #1
 8008850:	4a08      	ldr	r2, [pc, #32]	; (8008874 <vPortExitCritical+0x4c>)
 8008852:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008854:	4b07      	ldr	r3, [pc, #28]	; (8008874 <vPortExitCritical+0x4c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d104      	bne.n	8008866 <vPortExitCritical+0x3e>
 800885c:	2300      	movs	r3, #0
 800885e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000010 	.word	0x20000010
	...

08008880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008880:	f3ef 8009 	mrs	r0, PSP
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <pxCurrentTCBConst>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	f01e 0f10 	tst.w	lr, #16
 8008890:	bf08      	it	eq
 8008892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	6010      	str	r0, [r2, #0]
 800889c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088a4:	f380 8811 	msr	BASEPRI, r0
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f7ff fcba 	bl	8008228 <vTaskSwitchContext>
 80088b4:	f04f 0000 	mov.w	r0, #0
 80088b8:	f380 8811 	msr	BASEPRI, r0
 80088bc:	bc09      	pop	{r0, r3}
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	6808      	ldr	r0, [r1, #0]
 80088c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c6:	f01e 0f10 	tst.w	lr, #16
 80088ca:	bf08      	it	eq
 80088cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088d0:	f380 8809 	msr	PSP, r0
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst>:
 80088e0:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008900:	f7ff fbd2 	bl	80080a8 <xTaskIncrementTick>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800890a:	4b06      	ldr	r3, [pc, #24]	; (8008924 <SysTick_Handler+0x3c>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	2300      	movs	r3, #0
 8008914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800892c:	4b0b      	ldr	r3, [pc, #44]	; (800895c <vPortSetupTimerInterrupt+0x34>)
 800892e:	2200      	movs	r2, #0
 8008930:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008932:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <vPortSetupTimerInterrupt+0x38>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008938:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <vPortSetupTimerInterrupt+0x3c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <vPortSetupTimerInterrupt+0x40>)
 800893e:	fba2 2303 	umull	r2, r3, r2, r3
 8008942:	099b      	lsrs	r3, r3, #6
 8008944:	4a09      	ldr	r2, [pc, #36]	; (800896c <vPortSetupTimerInterrupt+0x44>)
 8008946:	3b01      	subs	r3, #1
 8008948:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800894a:	4b04      	ldr	r3, [pc, #16]	; (800895c <vPortSetupTimerInterrupt+0x34>)
 800894c:	2207      	movs	r2, #7
 800894e:	601a      	str	r2, [r3, #0]
}
 8008950:	bf00      	nop
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	e000e010 	.word	0xe000e010
 8008960:	e000e018 	.word	0xe000e018
 8008964:	2000000c 	.word	0x2000000c
 8008968:	10624dd3 	.word	0x10624dd3
 800896c:	e000e014 	.word	0xe000e014

08008970 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008970:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008980 <vPortEnableVFP+0x10>
 8008974:	6801      	ldr	r1, [r0, #0]
 8008976:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800897a:	6001      	str	r1, [r0, #0]
 800897c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800897e:	bf00      	nop
 8008980:	e000ed88 	.word	0xe000ed88

08008984 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008990:	f7ff fae0 	bl	8007f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008994:	4b59      	ldr	r3, [pc, #356]	; (8008afc <pvPortMalloc+0x178>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800899c:	f000 f910 	bl	8008bc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089a0:	4b57      	ldr	r3, [pc, #348]	; (8008b00 <pvPortMalloc+0x17c>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 808c 	bne.w	8008ac6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01c      	beq.n	80089ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80089b4:	2208      	movs	r2, #8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d013      	beq.n	80089ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f023 0307 	bic.w	r3, r3, #7
 80089cc:	3308      	adds	r3, #8
 80089ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <pvPortMalloc+0x6a>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	e7fe      	b.n	80089ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d068      	beq.n	8008ac6 <pvPortMalloc+0x142>
 80089f4:	4b43      	ldr	r3, [pc, #268]	; (8008b04 <pvPortMalloc+0x180>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d863      	bhi.n	8008ac6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089fe:	4b42      	ldr	r3, [pc, #264]	; (8008b08 <pvPortMalloc+0x184>)
 8008a00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a02:	4b41      	ldr	r3, [pc, #260]	; (8008b08 <pvPortMalloc+0x184>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a08:	e004      	b.n	8008a14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d903      	bls.n	8008a26 <pvPortMalloc+0xa2>
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f1      	bne.n	8008a0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a26:	4b35      	ldr	r3, [pc, #212]	; (8008afc <pvPortMalloc+0x178>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d04a      	beq.n	8008ac6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2208      	movs	r2, #8
 8008a36:	4413      	add	r3, r2
 8008a38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	1ad2      	subs	r2, r2, r3
 8008a4a:	2308      	movs	r3, #8
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d91e      	bls.n	8008a90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <pvPortMalloc+0xf4>
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	e7fe      	b.n	8008a76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a8a:	69b8      	ldr	r0, [r7, #24]
 8008a8c:	f000 f8fa 	bl	8008c84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a90:	4b1c      	ldr	r3, [pc, #112]	; (8008b04 <pvPortMalloc+0x180>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	4a1a      	ldr	r2, [pc, #104]	; (8008b04 <pvPortMalloc+0x180>)
 8008a9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a9e:	4b19      	ldr	r3, [pc, #100]	; (8008b04 <pvPortMalloc+0x180>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b1a      	ldr	r3, [pc, #104]	; (8008b0c <pvPortMalloc+0x188>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d203      	bcs.n	8008ab2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aaa:	4b16      	ldr	r3, [pc, #88]	; (8008b04 <pvPortMalloc+0x180>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <pvPortMalloc+0x188>)
 8008ab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b12      	ldr	r3, [pc, #72]	; (8008b00 <pvPortMalloc+0x17c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ac6:	f7ff fa53 	bl	8007f70 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8008ad0:	f7fe fd13 	bl	80074fa <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d009      	beq.n	8008af2 <pvPortMalloc+0x16e>
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e7fe      	b.n	8008af0 <pvPortMalloc+0x16c>
	return pvReturn;
 8008af2:	69fb      	ldr	r3, [r7, #28]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3728      	adds	r7, #40	; 0x28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	200026e0 	.word	0x200026e0
 8008b00:	200026ec 	.word	0x200026ec
 8008b04:	200026e4 	.word	0x200026e4
 8008b08:	200026d8 	.word	0x200026d8
 8008b0c:	200026e8 	.word	0x200026e8

08008b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d046      	beq.n	8008bb0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b22:	2308      	movs	r3, #8
 8008b24:	425b      	negs	r3, r3
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4413      	add	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <vPortFree+0xa8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <vPortFree+0x42>
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e7fe      	b.n	8008b50 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d009      	beq.n	8008b6e <vPortFree+0x5e>
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	60bb      	str	r3, [r7, #8]
 8008b6c:	e7fe      	b.n	8008b6c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <vPortFree+0xa8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4013      	ands	r3, r2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d019      	beq.n	8008bb0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d115      	bne.n	8008bb0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <vPortFree+0xa8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	43db      	mvns	r3, r3
 8008b8e:	401a      	ands	r2, r3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b94:	f7ff f9de 	bl	8007f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <vPortFree+0xac>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	4a06      	ldr	r2, [pc, #24]	; (8008bbc <vPortFree+0xac>)
 8008ba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ba6:	6938      	ldr	r0, [r7, #16]
 8008ba8:	f000 f86c 	bl	8008c84 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008bac:	f7ff f9e0 	bl	8007f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	200026ec 	.word	0x200026ec
 8008bbc:	200026e4 	.word	0x200026e4

08008bc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bc6:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8008bca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bcc:	4b27      	ldr	r3, [pc, #156]	; (8008c6c <prvHeapInit+0xac>)
 8008bce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00c      	beq.n	8008bf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3307      	adds	r3, #7
 8008bde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0307 	bic.w	r3, r3, #7
 8008be6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	4a1f      	ldr	r2, [pc, #124]	; (8008c6c <prvHeapInit+0xac>)
 8008bf0:	4413      	add	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bf8:	4a1d      	ldr	r2, [pc, #116]	; (8008c70 <prvHeapInit+0xb0>)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bfe:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <prvHeapInit+0xb0>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	4413      	add	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a15      	ldr	r2, [pc, #84]	; (8008c74 <prvHeapInit+0xb4>)
 8008c20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c22:	4b14      	ldr	r3, [pc, #80]	; (8008c74 <prvHeapInit+0xb4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <prvHeapInit+0xb4>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	1ad2      	subs	r2, r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c40:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <prvHeapInit+0xb4>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <prvHeapInit+0xb8>)
 8008c4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <prvHeapInit+0xbc>)
 8008c56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c58:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <prvHeapInit+0xc0>)
 8008c5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c5e:	601a      	str	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	200001d8 	.word	0x200001d8
 8008c70:	200026d8 	.word	0x200026d8
 8008c74:	200026e0 	.word	0x200026e0
 8008c78:	200026e8 	.word	0x200026e8
 8008c7c:	200026e4 	.word	0x200026e4
 8008c80:	200026ec 	.word	0x200026ec

08008c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c8c:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <prvInsertBlockIntoFreeList+0xac>)
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	e002      	b.n	8008c98 <prvInsertBlockIntoFreeList+0x14>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d8f7      	bhi.n	8008c92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d108      	bne.n	8008cc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d118      	bne.n	8008d0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <prvInsertBlockIntoFreeList+0xb0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d00d      	beq.n	8008d02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	441a      	add	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e008      	b.n	8008d14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <prvInsertBlockIntoFreeList+0xb0>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	e003      	b.n	8008d14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d002      	beq.n	8008d22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	200026d8 	.word	0x200026d8
 8008d34:	200026e0 	.word	0x200026e0

08008d38 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8008d38:	b490      	push	{r4, r7}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d46:	4618      	mov	r0, r3
 8008d48:	4621      	mov	r1, r4
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc90      	pop	{r4, r7}
 8008d50:	4770      	bx	lr

08008d52 <_ZN6std_ex9sleep_forENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>:


namespace std_ex
{
	void sleep_for(std::chrono::milliseconds milliseconds)
	{
 8008d52:	b590      	push	{r4, r7, lr}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	e9c7 0100 	strd	r0, r1, [r7]
		 vTaskDelay(milliseconds.count() / portTICK_PERIOD_MS);
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff ffea 	bl	8008d38 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>
 8008d64:	4603      	mov	r3, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff f879 	bl	8007e60 <vTaskDelay>
	}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd90      	pop	{r4, r7, pc}
	...

08008d78 <_ZN6std_ex6thread6_StateD1Ev>:
		{
			sleep_for(std::chrono::milliseconds(10));
		}
	}

    thread::_State::~_State() {}
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	4a04      	ldr	r2, [pc, #16]	; (8008d94 <_ZN6std_ex6thread6_StateD1Ev+0x1c>)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	08009da4 	.word	0x08009da4

08008d98 <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENKUlPvE_clES3_>:
    	m_u_stack_size = 1024;
    	m_bo_thread_detached = false;

        m_bo_thread_terminated = false;

		void (*fp)(void*) = [](void* o)
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
		{
			if (nullptr != o)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENKUlPvE_clES3_+0x1c>
			{
				static_cast<_State*>(o)->_M_run();
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3308      	adds	r3, #8
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6838      	ldr	r0, [r7, #0]
 8008db2:	4798      	blx	r3
			}
			// this should not happen, report an error here

		};
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENUlPvE_4_FUNES3_>:
		void (*fp)(void*) = [](void* o)
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
		};
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f7ff ffe6 	bl	8008d98 <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENKUlPvE_clES3_>
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENKUlPvE_cvPFvS3_EEv>:
		void (*fp)(void*) = [](void* o)
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
		};
 8008ddc:	4b03      	ldr	r3, [pc, #12]	; (8008dec <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENKUlPvE_cvPFvS3_EEv+0x18>)
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	08008dbd 	.word	0x08008dbd

08008df0 <_ZN6std_ex6thread15_M_start_threadEPNS0_6_StateE>:
    {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
    	ptr->_M_owning_thread = this;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	605a      	str	r2, [r3, #4]
    	memset(m_task_name, 0x0, sizeof(m_task_name));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3308      	adds	r3, #8
 8008e04:	221e      	movs	r2, #30
 8008e06:	2100      	movs	r1, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fa0b 	bl	8009224 <memset>
    	snprintf(m_task_name, sizeof(m_task_name) - 1, "Task%u", u32I++);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f103 0008 	add.w	r0, r3, #8
 8008e14:	4b20      	ldr	r3, [pc, #128]	; (8008e98 <_ZN6std_ex6thread15_M_start_threadEPNS0_6_StateE+0xa8>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	491f      	ldr	r1, [pc, #124]	; (8008e98 <_ZN6std_ex6thread15_M_start_threadEPNS0_6_StateE+0xa8>)
 8008e1c:	600a      	str	r2, [r1, #0]
 8008e1e:	4a1f      	ldr	r2, [pc, #124]	; (8008e9c <_ZN6std_ex6thread15_M_start_threadEPNS0_6_StateE+0xac>)
 8008e20:	211d      	movs	r1, #29
 8008e22:	f000 fb03 	bl	800942c <sniprintf>
    	m_u_task_priority = 2u;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	629a      	str	r2, [r3, #40]	; 0x28
    	m_u_stack_size = 1024;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e32:	62da      	str	r2, [r3, #44]	; 0x2c
    	m_bo_thread_detached = false;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
        m_bo_thread_terminated = false;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3330      	adds	r3, #48	; 0x30
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fa febf 	bl	8003bc4 <_ZNSt6atomicIbEaSEb>
		};
 8008e46:	f107 0308 	add.w	r3, r7, #8
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff ffc2 	bl	8008dd4 <_ZZN6std_ex6thread15_M_start_threadEPNS0_6_StateEENKUlPvE_cvPFvS3_EEv>
 8008e50:	60f8      	str	r0, [r7, #12]

    	if (pdPASS !=xTaskCreate(
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f103 0108 	add.w	r1, r3, #8
    		  fp,                       /* Task function. */
			  m_task_name,   			/* name of task. */
			  m_u_stack_size,           /* Stack size of task */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    	if (pdPASS !=xTaskCreate(
 8008e5c:	b298      	uxth	r0, r3
    	      ptr,                /* parameter of the task */
			  m_u_task_priority,        /* priority of the task */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    	if (pdPASS !=xTaskCreate(
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	3204      	adds	r2, #4
 8008e66:	9201      	str	r2, [sp, #4]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f7fe fe18 	bl	8007aa4 <xTaskCreate>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	bf14      	ite	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	2300      	moveq	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <_ZN6std_ex6thread15_M_start_threadEPNS0_6_StateE+0xa0>
    	      &m_task_handle)          /* Task handle to keep track of created task */
    			)
    	{
    		// task creation has failed!
    		this->m_bo_thread_terminated = true;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3330      	adds	r3, #48	; 0x30
 8008e88:	2101      	movs	r1, #1
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fa fe9a 	bl	8003bc4 <_ZNSt6atomicIbEaSEb>
    	}
    }
 8008e90:	bf00      	nop
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200026f0 	.word	0x200026f0
 8008e9c:	08009d94 	.word	0x08009d94

08008ea0 <_Z17set_serial_outputPN7drivers11GenericUARTE>:
#define TRACE_PRINTF_BUFFER_SIZE   (128u)

drivers::GenericUART* m_p_uart = nullptr;

void set_serial_output(drivers::GenericUART* p_uart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	m_p_uart = p_uart;
 8008ea8:	4a04      	ldr	r2, [pc, #16]	; (8008ebc <_Z17set_serial_outputPN7drivers11GenericUARTE+0x1c>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6013      	str	r3, [r2, #0]
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	200026f4 	.word	0x200026f4

08008ec0 <_Z12print_serialPKc>:

void print_serial(const char *buffer)
{
 8008ec0:	b5b0      	push	{r4, r5, r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	if (m_p_uart != nullptr)
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <_Z12print_serialPKc+0x38>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00e      	beq.n	8008eee <_Z12print_serialPKc+0x2e>
	{
		m_p_uart->write(reinterpret_cast<const uint8_t*>(buffer), strlen(buffer));
 8008ed0:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <_Z12print_serialPKc+0x38>)
 8008ed2:	681d      	ldr	r5, [r3, #0]
 8008ed4:	4b08      	ldr	r3, [pc, #32]	; (8008ef8 <_Z12print_serialPKc+0x38>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3328      	adds	r3, #40	; 0x28
 8008edc:	681c      	ldr	r4, [r3, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7f7 f976 	bl	80001d0 <strlen>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4628      	mov	r0, r5
 8008eec:	47a0      	blx	r4
#elif defined TEST1234
	// For Arduino systems
	Serial.println(buffer);
#endif
	//mutex_serial_if.unlock();
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200026f4 	.word	0x200026f4

08008efc <_Z11print_tracePKcz>:


void print_trace(const char * format_str, ...)
{
 8008efc:	b40f      	push	{r0, r1, r2, r3}
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b0a2      	sub	sp, #136	; 0x88
 8008f02:	af00      	add	r7, sp, #0
	char print_buffer[TRACE_PRINTF_BUFFER_SIZE];
	va_list args;

	va_start(args, format_str);
 8008f04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008f08:	607b      	str	r3, [r7, #4]
	vsnprintf(print_buffer, TRACE_PRINTF_BUFFER_SIZE, format_str, args);
 8008f0a:	f107 0008 	add.w	r0, r7, #8
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008f14:	2180      	movs	r1, #128	; 0x80
 8008f16:	f000 fae9 	bl	80094ec <vsniprintf>
	va_end(args);

	print_serial(print_buffer);
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff ffce 	bl	8008ec0 <_Z12print_serialPKc>
}
 8008f24:	bf00      	nop
 8008f26:	3788      	adds	r7, #136	; 0x88
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f2e:	b004      	add	sp, #16
 8008f30:	4770      	bx	lr
	...

08008f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008f38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008f3a:	e003      	b.n	8008f44 <LoopCopyDataInit>

08008f3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008f3c:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008f3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008f40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008f42:	3104      	adds	r1, #4

08008f44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008f44:	480b      	ldr	r0, [pc, #44]	; (8008f74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008f48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008f4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008f4c:	d3f6      	bcc.n	8008f3c <CopyDataInit>
	ldr	r2, =_sbss
 8008f4e:	4a0b      	ldr	r2, [pc, #44]	; (8008f7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8008f50:	e002      	b.n	8008f58 <LoopFillZerobss>

08008f52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008f52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008f54:	f842 3b04 	str.w	r3, [r2], #4

08008f58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008f58:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <LoopForever+0x16>)
	cmp	r2, r3
 8008f5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008f5c:	d3f9      	bcc.n	8008f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f5e:	f7fe fca3 	bl	80078a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f62:	f000 f907 	bl	8009174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008f66:	f7fe fba7 	bl	80076b8 <main>

08008f6a <LoopForever>:

LoopForever:
    b LoopForever
 8008f6a:	e7fe      	b.n	8008f6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008f6c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8008f70:	08009e24 	.word	0x08009e24
	ldr	r0, =_sdata
 8008f74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008f78:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8008f7c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8008f80:	20002710 	.word	0x20002710

08008f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008f84:	e7fe      	b.n	8008f84 <ADC1_2_IRQHandler>

08008f86 <__cxa_pure_virtual>:
 8008f86:	b508      	push	{r3, lr}
 8008f88:	f000 f82c 	bl	8008fe4 <_ZSt9terminatev>

08008f8c <_Znaj>:
 8008f8c:	f000 b802 	b.w	8008f94 <_Znwj>

08008f90 <_ZdlPvj>:
 8008f90:	f000 b81a 	b.w	8008fc8 <_ZdlPv>

08008f94 <_Znwj>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	2800      	cmp	r0, #0
 8008f98:	bf14      	ite	ne
 8008f9a:	4604      	movne	r4, r0
 8008f9c:	2401      	moveq	r4, #1
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 f90c 	bl	80091bc <malloc>
 8008fa4:	b930      	cbnz	r0, 8008fb4 <_Znwj+0x20>
 8008fa6:	f000 f807 	bl	8008fb8 <_ZSt15get_new_handlerv>
 8008faa:	b908      	cbnz	r0, 8008fb0 <_Znwj+0x1c>
 8008fac:	f000 f8db 	bl	8009166 <abort>
 8008fb0:	4780      	blx	r0
 8008fb2:	e7f4      	b.n	8008f9e <_Znwj+0xa>
 8008fb4:	bd10      	pop	{r4, pc}
	...

08008fb8 <_ZSt15get_new_handlerv>:
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <_ZSt15get_new_handlerv+0xc>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	f3bf 8f5b 	dmb	ish
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	200026f8 	.word	0x200026f8

08008fc8 <_ZdlPv>:
 8008fc8:	f000 b900 	b.w	80091cc <free>

08008fcc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008fcc:	b508      	push	{r3, lr}
 8008fce:	4780      	blx	r0
 8008fd0:	f000 f8c9 	bl	8009166 <abort>

08008fd4 <_ZSt13get_terminatev>:
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <_ZSt13get_terminatev+0xc>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	f3bf 8f5b 	dmb	ish
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20000014 	.word	0x20000014

08008fe4 <_ZSt9terminatev>:
 8008fe4:	b508      	push	{r3, lr}
 8008fe6:	f7ff fff5 	bl	8008fd4 <_ZSt13get_terminatev>
 8008fea:	f7ff ffef 	bl	8008fcc <_ZN10__cxxabiv111__terminateEPFvvE>

08008fee <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8008fee:	68c3      	ldr	r3, [r0, #12]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	60c2      	str	r2, [r0, #12]
 8008ff4:	b102      	cbz	r2, 8008ff8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 8008ff6:	6050      	str	r0, [r2, #4]
 8008ff8:	6842      	ldr	r2, [r0, #4]
 8008ffa:	605a      	str	r2, [r3, #4]
 8008ffc:	680a      	ldr	r2, [r1, #0]
 8008ffe:	4282      	cmp	r2, r0
 8009000:	d103      	bne.n	800900a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1c>
 8009002:	600b      	str	r3, [r1, #0]
 8009004:	6098      	str	r0, [r3, #8]
 8009006:	6043      	str	r3, [r0, #4]
 8009008:	4770      	bx	lr
 800900a:	6842      	ldr	r2, [r0, #4]
 800900c:	6891      	ldr	r1, [r2, #8]
 800900e:	4281      	cmp	r1, r0
 8009010:	bf0c      	ite	eq
 8009012:	6093      	streq	r3, [r2, #8]
 8009014:	60d3      	strne	r3, [r2, #12]
 8009016:	e7f5      	b.n	8009004 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x16>

08009018 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8009018:	6883      	ldr	r3, [r0, #8]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	6082      	str	r2, [r0, #8]
 800901e:	b102      	cbz	r2, 8009022 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 8009020:	6050      	str	r0, [r2, #4]
 8009022:	6842      	ldr	r2, [r0, #4]
 8009024:	605a      	str	r2, [r3, #4]
 8009026:	680a      	ldr	r2, [r1, #0]
 8009028:	4282      	cmp	r2, r0
 800902a:	d103      	bne.n	8009034 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1c>
 800902c:	600b      	str	r3, [r1, #0]
 800902e:	60d8      	str	r0, [r3, #12]
 8009030:	6043      	str	r3, [r0, #4]
 8009032:	4770      	bx	lr
 8009034:	6842      	ldr	r2, [r0, #4]
 8009036:	68d1      	ldr	r1, [r2, #12]
 8009038:	4281      	cmp	r1, r0
 800903a:	bf0c      	ite	eq
 800903c:	60d3      	streq	r3, [r2, #12]
 800903e:	6093      	strne	r3, [r2, #8]
 8009040:	e7f5      	b.n	800902e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x16>

08009042 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8009042:	7803      	ldrb	r3, [r0, #0]
 8009044:	b933      	cbnz	r3, 8009054 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8009046:	6843      	ldr	r3, [r0, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4283      	cmp	r3, r0
 800904c:	d102      	bne.n	8009054 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	4618      	mov	r0, r3
 8009052:	4770      	bx	lr
 8009054:	6883      	ldr	r3, [r0, #8]
 8009056:	b123      	cbz	r3, 8009062 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8009058:	68da      	ldr	r2, [r3, #12]
 800905a:	2a00      	cmp	r2, #0
 800905c:	d0f8      	beq.n	8009050 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800905e:	4613      	mov	r3, r2
 8009060:	e7fa      	b.n	8009058 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8009062:	6843      	ldr	r3, [r0, #4]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	4282      	cmp	r2, r0
 8009068:	d1f2      	bne.n	8009050 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800906a:	4618      	mov	r0, r3
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	e7f9      	b.n	8009064 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08009070 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8009070:	68c3      	ldr	r3, [r0, #12]
 8009072:	b11b      	cbz	r3, 800907c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xc>
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	b16a      	cbz	r2, 8009094 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 8009078:	4613      	mov	r3, r2
 800907a:	e7fb      	b.n	8009074 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800907c:	6842      	ldr	r2, [r0, #4]
 800907e:	4603      	mov	r3, r0
 8009080:	68d1      	ldr	r1, [r2, #12]
 8009082:	4299      	cmp	r1, r3
 8009084:	d102      	bne.n	800908c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8009086:	4613      	mov	r3, r2
 8009088:	6852      	ldr	r2, [r2, #4]
 800908a:	e7f9      	b.n	8009080 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800908c:	68d9      	ldr	r1, [r3, #12]
 800908e:	428a      	cmp	r2, r1
 8009090:	bf18      	it	ne
 8009092:	4613      	movne	r3, r2
 8009094:	4618      	mov	r0, r3
 8009096:	4770      	bx	lr

08009098 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8009098:	f7ff bfd3 	b.w	8009042 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800909c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a0:	461f      	mov	r7, r3
 80090a2:	f103 0904 	add.w	r9, r3, #4
 80090a6:	2300      	movs	r3, #0
 80090a8:	460c      	mov	r4, r1
 80090aa:	604a      	str	r2, [r1, #4]
 80090ac:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80090b0:	700b      	strb	r3, [r1, #0]
 80090b2:	b318      	cbz	r0, 80090fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x60>
 80090b4:	4297      	cmp	r7, r2
 80090b6:	6091      	str	r1, [r2, #8]
 80090b8:	d11b      	bne.n	80090f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x56>
 80090ba:	6079      	str	r1, [r7, #4]
 80090bc:	60fc      	str	r4, [r7, #12]
 80090be:	f04f 0801 	mov.w	r8, #1
 80090c2:	f04f 0a00 	mov.w	sl, #0
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	d045      	beq.n	8009158 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 80090cc:	6866      	ldr	r6, [r4, #4]
 80090ce:	7832      	ldrb	r2, [r6, #0]
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	d141      	bne.n	8009158 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 80090d4:	6875      	ldr	r5, [r6, #4]
 80090d6:	68ab      	ldr	r3, [r5, #8]
 80090d8:	429e      	cmp	r6, r3
 80090da:	d127      	bne.n	800912c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 80090dc:	68eb      	ldr	r3, [r5, #12]
 80090de:	b193      	cbz	r3, 8009106 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	b982      	cbnz	r2, 8009106 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 80090e4:	f886 8000 	strb.w	r8, [r6]
 80090e8:	f883 8000 	strb.w	r8, [r3]
 80090ec:	702a      	strb	r2, [r5, #0]
 80090ee:	462c      	mov	r4, r5
 80090f0:	e7e9      	b.n	80090c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d1e2      	bne.n	80090be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	e7e0      	b.n	80090be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80090fc:	60d1      	str	r1, [r2, #12]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4293      	cmp	r3, r2
 8009102:	d1dc      	bne.n	80090be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8009104:	e7da      	b.n	80090bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8009106:	68f3      	ldr	r3, [r6, #12]
 8009108:	42a3      	cmp	r3, r4
 800910a:	d104      	bne.n	8009116 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 800910c:	4649      	mov	r1, r9
 800910e:	4630      	mov	r0, r6
 8009110:	f7ff ff6d 	bl	8008fee <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8009114:	4634      	mov	r4, r6
 8009116:	6863      	ldr	r3, [r4, #4]
 8009118:	4649      	mov	r1, r9
 800911a:	f883 8000 	strb.w	r8, [r3]
 800911e:	4628      	mov	r0, r5
 8009120:	f885 a000 	strb.w	sl, [r5]
 8009124:	f7ff ff78 	bl	8009018 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8009128:	4625      	mov	r5, r4
 800912a:	e7e0      	b.n	80090ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x52>
 800912c:	b113      	cbz	r3, 8009134 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	2a00      	cmp	r2, #0
 8009132:	d0d7      	beq.n	80090e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x48>
 8009134:	68b3      	ldr	r3, [r6, #8]
 8009136:	42a3      	cmp	r3, r4
 8009138:	d104      	bne.n	8009144 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 800913a:	4649      	mov	r1, r9
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff ff6b 	bl	8009018 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8009142:	4634      	mov	r4, r6
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	4649      	mov	r1, r9
 8009148:	f883 8000 	strb.w	r8, [r3]
 800914c:	4628      	mov	r0, r5
 800914e:	f885 a000 	strb.w	sl, [r5]
 8009152:	f7ff ff4c 	bl	8008fee <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8009156:	e7e7      	b.n	8009128 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8c>
 8009158:	2201      	movs	r2, #1
 800915a:	701a      	strb	r2, [r3, #0]
 800915c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009160 <_ZSt17__throw_bad_allocv>:
 8009160:	b508      	push	{r3, lr}
 8009162:	f000 f800 	bl	8009166 <abort>

08009166 <abort>:
 8009166:	b508      	push	{r3, lr}
 8009168:	2006      	movs	r0, #6
 800916a:	f000 f943 	bl	80093f4 <raise>
 800916e:	2001      	movs	r0, #1
 8009170:	f000 fcf2 	bl	8009b58 <_exit>

08009174 <__libc_init_array>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	4e0d      	ldr	r6, [pc, #52]	; (80091ac <__libc_init_array+0x38>)
 8009178:	4c0d      	ldr	r4, [pc, #52]	; (80091b0 <__libc_init_array+0x3c>)
 800917a:	1ba4      	subs	r4, r4, r6
 800917c:	10a4      	asrs	r4, r4, #2
 800917e:	2500      	movs	r5, #0
 8009180:	42a5      	cmp	r5, r4
 8009182:	d109      	bne.n	8009198 <__libc_init_array+0x24>
 8009184:	4e0b      	ldr	r6, [pc, #44]	; (80091b4 <__libc_init_array+0x40>)
 8009186:	4c0c      	ldr	r4, [pc, #48]	; (80091b8 <__libc_init_array+0x44>)
 8009188:	f000 fce8 	bl	8009b5c <_init>
 800918c:	1ba4      	subs	r4, r4, r6
 800918e:	10a4      	asrs	r4, r4, #2
 8009190:	2500      	movs	r5, #0
 8009192:	42a5      	cmp	r5, r4
 8009194:	d105      	bne.n	80091a2 <__libc_init_array+0x2e>
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800919c:	4798      	blx	r3
 800919e:	3501      	adds	r5, #1
 80091a0:	e7ee      	b.n	8009180 <__libc_init_array+0xc>
 80091a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091a6:	4798      	blx	r3
 80091a8:	3501      	adds	r5, #1
 80091aa:	e7f2      	b.n	8009192 <__libc_init_array+0x1e>
 80091ac:	08009e14 	.word	0x08009e14
 80091b0:	08009e14 	.word	0x08009e14
 80091b4:	08009e14 	.word	0x08009e14
 80091b8:	08009e1c 	.word	0x08009e1c

080091bc <malloc>:
 80091bc:	4b02      	ldr	r3, [pc, #8]	; (80091c8 <malloc+0xc>)
 80091be:	4601      	mov	r1, r0
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	f000 b885 	b.w	80092d0 <_malloc_r>
 80091c6:	bf00      	nop
 80091c8:	20000018 	.word	0x20000018

080091cc <free>:
 80091cc:	4b02      	ldr	r3, [pc, #8]	; (80091d8 <free+0xc>)
 80091ce:	4601      	mov	r1, r0
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f000 b82f 	b.w	8009234 <_free_r>
 80091d6:	bf00      	nop
 80091d8:	20000018 	.word	0x20000018

080091dc <memcpy>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	1e43      	subs	r3, r0, #1
 80091e0:	440a      	add	r2, r1
 80091e2:	4291      	cmp	r1, r2
 80091e4:	d100      	bne.n	80091e8 <memcpy+0xc>
 80091e6:	bd10      	pop	{r4, pc}
 80091e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f0:	e7f7      	b.n	80091e2 <memcpy+0x6>

080091f2 <memmove>:
 80091f2:	4288      	cmp	r0, r1
 80091f4:	b510      	push	{r4, lr}
 80091f6:	eb01 0302 	add.w	r3, r1, r2
 80091fa:	d807      	bhi.n	800920c <memmove+0x1a>
 80091fc:	1e42      	subs	r2, r0, #1
 80091fe:	4299      	cmp	r1, r3
 8009200:	d00a      	beq.n	8009218 <memmove+0x26>
 8009202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009206:	f802 4f01 	strb.w	r4, [r2, #1]!
 800920a:	e7f8      	b.n	80091fe <memmove+0xc>
 800920c:	4283      	cmp	r3, r0
 800920e:	d9f5      	bls.n	80091fc <memmove+0xa>
 8009210:	1881      	adds	r1, r0, r2
 8009212:	1ad2      	subs	r2, r2, r3
 8009214:	42d3      	cmn	r3, r2
 8009216:	d100      	bne.n	800921a <memmove+0x28>
 8009218:	bd10      	pop	{r4, pc}
 800921a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800921e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009222:	e7f7      	b.n	8009214 <memmove+0x22>

08009224 <memset>:
 8009224:	4402      	add	r2, r0
 8009226:	4603      	mov	r3, r0
 8009228:	4293      	cmp	r3, r2
 800922a:	d100      	bne.n	800922e <memset+0xa>
 800922c:	4770      	bx	lr
 800922e:	f803 1b01 	strb.w	r1, [r3], #1
 8009232:	e7f9      	b.n	8009228 <memset+0x4>

08009234 <_free_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4605      	mov	r5, r0
 8009238:	2900      	cmp	r1, #0
 800923a:	d045      	beq.n	80092c8 <_free_r+0x94>
 800923c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009240:	1f0c      	subs	r4, r1, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	bfb8      	it	lt
 8009246:	18e4      	addlt	r4, r4, r3
 8009248:	f000 f95e 	bl	8009508 <__malloc_lock>
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <_free_r+0x98>)
 800924e:	6813      	ldr	r3, [r2, #0]
 8009250:	4610      	mov	r0, r2
 8009252:	b933      	cbnz	r3, 8009262 <_free_r+0x2e>
 8009254:	6063      	str	r3, [r4, #4]
 8009256:	6014      	str	r4, [r2, #0]
 8009258:	4628      	mov	r0, r5
 800925a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925e:	f000 b954 	b.w	800950a <__malloc_unlock>
 8009262:	42a3      	cmp	r3, r4
 8009264:	d90c      	bls.n	8009280 <_free_r+0x4c>
 8009266:	6821      	ldr	r1, [r4, #0]
 8009268:	1862      	adds	r2, r4, r1
 800926a:	4293      	cmp	r3, r2
 800926c:	bf04      	itt	eq
 800926e:	681a      	ldreq	r2, [r3, #0]
 8009270:	685b      	ldreq	r3, [r3, #4]
 8009272:	6063      	str	r3, [r4, #4]
 8009274:	bf04      	itt	eq
 8009276:	1852      	addeq	r2, r2, r1
 8009278:	6022      	streq	r2, [r4, #0]
 800927a:	6004      	str	r4, [r0, #0]
 800927c:	e7ec      	b.n	8009258 <_free_r+0x24>
 800927e:	4613      	mov	r3, r2
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	b10a      	cbz	r2, 8009288 <_free_r+0x54>
 8009284:	42a2      	cmp	r2, r4
 8009286:	d9fa      	bls.n	800927e <_free_r+0x4a>
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	1858      	adds	r0, r3, r1
 800928c:	42a0      	cmp	r0, r4
 800928e:	d10b      	bne.n	80092a8 <_free_r+0x74>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	4401      	add	r1, r0
 8009294:	1858      	adds	r0, r3, r1
 8009296:	4282      	cmp	r2, r0
 8009298:	6019      	str	r1, [r3, #0]
 800929a:	d1dd      	bne.n	8009258 <_free_r+0x24>
 800929c:	6810      	ldr	r0, [r2, #0]
 800929e:	6852      	ldr	r2, [r2, #4]
 80092a0:	605a      	str	r2, [r3, #4]
 80092a2:	4401      	add	r1, r0
 80092a4:	6019      	str	r1, [r3, #0]
 80092a6:	e7d7      	b.n	8009258 <_free_r+0x24>
 80092a8:	d902      	bls.n	80092b0 <_free_r+0x7c>
 80092aa:	230c      	movs	r3, #12
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	e7d3      	b.n	8009258 <_free_r+0x24>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	1821      	adds	r1, r4, r0
 80092b4:	428a      	cmp	r2, r1
 80092b6:	bf04      	itt	eq
 80092b8:	6811      	ldreq	r1, [r2, #0]
 80092ba:	6852      	ldreq	r2, [r2, #4]
 80092bc:	6062      	str	r2, [r4, #4]
 80092be:	bf04      	itt	eq
 80092c0:	1809      	addeq	r1, r1, r0
 80092c2:	6021      	streq	r1, [r4, #0]
 80092c4:	605c      	str	r4, [r3, #4]
 80092c6:	e7c7      	b.n	8009258 <_free_r+0x24>
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop
 80092cc:	200026fc 	.word	0x200026fc

080092d0 <_malloc_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	1ccd      	adds	r5, r1, #3
 80092d4:	f025 0503 	bic.w	r5, r5, #3
 80092d8:	3508      	adds	r5, #8
 80092da:	2d0c      	cmp	r5, #12
 80092dc:	bf38      	it	cc
 80092de:	250c      	movcc	r5, #12
 80092e0:	2d00      	cmp	r5, #0
 80092e2:	4606      	mov	r6, r0
 80092e4:	db01      	blt.n	80092ea <_malloc_r+0x1a>
 80092e6:	42a9      	cmp	r1, r5
 80092e8:	d903      	bls.n	80092f2 <_malloc_r+0x22>
 80092ea:	230c      	movs	r3, #12
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	2000      	movs	r0, #0
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	f000 f909 	bl	8009508 <__malloc_lock>
 80092f6:	4a21      	ldr	r2, [pc, #132]	; (800937c <_malloc_r+0xac>)
 80092f8:	6814      	ldr	r4, [r2, #0]
 80092fa:	4621      	mov	r1, r4
 80092fc:	b991      	cbnz	r1, 8009324 <_malloc_r+0x54>
 80092fe:	4c20      	ldr	r4, [pc, #128]	; (8009380 <_malloc_r+0xb0>)
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	b91b      	cbnz	r3, 800930c <_malloc_r+0x3c>
 8009304:	4630      	mov	r0, r6
 8009306:	f000 f83d 	bl	8009384 <_sbrk_r>
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f000 f838 	bl	8009384 <_sbrk_r>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d124      	bne.n	8009362 <_malloc_r+0x92>
 8009318:	230c      	movs	r3, #12
 800931a:	6033      	str	r3, [r6, #0]
 800931c:	4630      	mov	r0, r6
 800931e:	f000 f8f4 	bl	800950a <__malloc_unlock>
 8009322:	e7e4      	b.n	80092ee <_malloc_r+0x1e>
 8009324:	680b      	ldr	r3, [r1, #0]
 8009326:	1b5b      	subs	r3, r3, r5
 8009328:	d418      	bmi.n	800935c <_malloc_r+0x8c>
 800932a:	2b0b      	cmp	r3, #11
 800932c:	d90f      	bls.n	800934e <_malloc_r+0x7e>
 800932e:	600b      	str	r3, [r1, #0]
 8009330:	50cd      	str	r5, [r1, r3]
 8009332:	18cc      	adds	r4, r1, r3
 8009334:	4630      	mov	r0, r6
 8009336:	f000 f8e8 	bl	800950a <__malloc_unlock>
 800933a:	f104 000b 	add.w	r0, r4, #11
 800933e:	1d23      	adds	r3, r4, #4
 8009340:	f020 0007 	bic.w	r0, r0, #7
 8009344:	1ac3      	subs	r3, r0, r3
 8009346:	d0d3      	beq.n	80092f0 <_malloc_r+0x20>
 8009348:	425a      	negs	r2, r3
 800934a:	50e2      	str	r2, [r4, r3]
 800934c:	e7d0      	b.n	80092f0 <_malloc_r+0x20>
 800934e:	428c      	cmp	r4, r1
 8009350:	684b      	ldr	r3, [r1, #4]
 8009352:	bf16      	itet	ne
 8009354:	6063      	strne	r3, [r4, #4]
 8009356:	6013      	streq	r3, [r2, #0]
 8009358:	460c      	movne	r4, r1
 800935a:	e7eb      	b.n	8009334 <_malloc_r+0x64>
 800935c:	460c      	mov	r4, r1
 800935e:	6849      	ldr	r1, [r1, #4]
 8009360:	e7cc      	b.n	80092fc <_malloc_r+0x2c>
 8009362:	1cc4      	adds	r4, r0, #3
 8009364:	f024 0403 	bic.w	r4, r4, #3
 8009368:	42a0      	cmp	r0, r4
 800936a:	d005      	beq.n	8009378 <_malloc_r+0xa8>
 800936c:	1a21      	subs	r1, r4, r0
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f808 	bl	8009384 <_sbrk_r>
 8009374:	3001      	adds	r0, #1
 8009376:	d0cf      	beq.n	8009318 <_malloc_r+0x48>
 8009378:	6025      	str	r5, [r4, #0]
 800937a:	e7db      	b.n	8009334 <_malloc_r+0x64>
 800937c:	200026fc 	.word	0x200026fc
 8009380:	20002700 	.word	0x20002700

08009384 <_sbrk_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4c06      	ldr	r4, [pc, #24]	; (80093a0 <_sbrk_r+0x1c>)
 8009388:	2300      	movs	r3, #0
 800938a:	4605      	mov	r5, r0
 800938c:	4608      	mov	r0, r1
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	f000 fbd4 	bl	8009b3c <_sbrk>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_sbrk_r+0x1a>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	b103      	cbz	r3, 800939e <_sbrk_r+0x1a>
 800939c:	602b      	str	r3, [r5, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	2000270c 	.word	0x2000270c

080093a4 <_raise_r>:
 80093a4:	291f      	cmp	r1, #31
 80093a6:	b538      	push	{r3, r4, r5, lr}
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	d904      	bls.n	80093b8 <_raise_r+0x14>
 80093ae:	2316      	movs	r3, #22
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093ba:	b112      	cbz	r2, 80093c2 <_raise_r+0x1e>
 80093bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093c0:	b94b      	cbnz	r3, 80093d6 <_raise_r+0x32>
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 f830 	bl	8009428 <_getpid_r>
 80093c8:	462a      	mov	r2, r5
 80093ca:	4601      	mov	r1, r0
 80093cc:	4620      	mov	r0, r4
 80093ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d2:	f000 b817 	b.w	8009404 <_kill_r>
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d00a      	beq.n	80093f0 <_raise_r+0x4c>
 80093da:	1c59      	adds	r1, r3, #1
 80093dc:	d103      	bne.n	80093e6 <_raise_r+0x42>
 80093de:	2316      	movs	r3, #22
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7e7      	b.n	80093b6 <_raise_r+0x12>
 80093e6:	2400      	movs	r4, #0
 80093e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093ec:	4628      	mov	r0, r5
 80093ee:	4798      	blx	r3
 80093f0:	2000      	movs	r0, #0
 80093f2:	e7e0      	b.n	80093b6 <_raise_r+0x12>

080093f4 <raise>:
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <raise+0xc>)
 80093f6:	4601      	mov	r1, r0
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	f7ff bfd3 	b.w	80093a4 <_raise_r>
 80093fe:	bf00      	nop
 8009400:	20000018 	.word	0x20000018

08009404 <_kill_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4c07      	ldr	r4, [pc, #28]	; (8009424 <_kill_r+0x20>)
 8009408:	2300      	movs	r3, #0
 800940a:	4605      	mov	r5, r0
 800940c:	4608      	mov	r0, r1
 800940e:	4611      	mov	r1, r2
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	f000 fb8b 	bl	8009b2c <_kill>
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	d102      	bne.n	8009420 <_kill_r+0x1c>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	b103      	cbz	r3, 8009420 <_kill_r+0x1c>
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	bf00      	nop
 8009424:	2000270c 	.word	0x2000270c

08009428 <_getpid_r>:
 8009428:	f000 bb78 	b.w	8009b1c <_getpid>

0800942c <sniprintf>:
 800942c:	b40c      	push	{r2, r3}
 800942e:	b530      	push	{r4, r5, lr}
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <sniprintf+0x64>)
 8009432:	1e0c      	subs	r4, r1, #0
 8009434:	b09d      	sub	sp, #116	; 0x74
 8009436:	681d      	ldr	r5, [r3, #0]
 8009438:	da08      	bge.n	800944c <sniprintf+0x20>
 800943a:	238b      	movs	r3, #139	; 0x8b
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	f04f 30ff 	mov.w	r0, #4294967295
 8009442:	b01d      	add	sp, #116	; 0x74
 8009444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009448:	b002      	add	sp, #8
 800944a:	4770      	bx	lr
 800944c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009454:	bf14      	ite	ne
 8009456:	f104 33ff 	addne.w	r3, r4, #4294967295
 800945a:	4623      	moveq	r3, r4
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009464:	9002      	str	r0, [sp, #8]
 8009466:	9006      	str	r0, [sp, #24]
 8009468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800946c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800946e:	ab21      	add	r3, sp, #132	; 0x84
 8009470:	a902      	add	r1, sp, #8
 8009472:	4628      	mov	r0, r5
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	f000 f8a3 	bl	80095c0 <_svfiprintf_r>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	bfbc      	itt	lt
 800947e:	238b      	movlt	r3, #139	; 0x8b
 8009480:	602b      	strlt	r3, [r5, #0]
 8009482:	2c00      	cmp	r4, #0
 8009484:	d0dd      	beq.n	8009442 <sniprintf+0x16>
 8009486:	9b02      	ldr	r3, [sp, #8]
 8009488:	2200      	movs	r2, #0
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	e7d9      	b.n	8009442 <sniprintf+0x16>
 800948e:	bf00      	nop
 8009490:	20000018 	.word	0x20000018

08009494 <_vsniprintf_r>:
 8009494:	b530      	push	{r4, r5, lr}
 8009496:	1e14      	subs	r4, r2, #0
 8009498:	4605      	mov	r5, r0
 800949a:	b09b      	sub	sp, #108	; 0x6c
 800949c:	4618      	mov	r0, r3
 800949e:	da05      	bge.n	80094ac <_vsniprintf_r+0x18>
 80094a0:	238b      	movs	r3, #139	; 0x8b
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295
 80094a8:	b01b      	add	sp, #108	; 0x6c
 80094aa:	bd30      	pop	{r4, r5, pc}
 80094ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80094b4:	bf14      	ite	ne
 80094b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094ba:	4623      	moveq	r3, r4
 80094bc:	9302      	str	r3, [sp, #8]
 80094be:	9305      	str	r3, [sp, #20]
 80094c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094c4:	9100      	str	r1, [sp, #0]
 80094c6:	9104      	str	r1, [sp, #16]
 80094c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80094cc:	4602      	mov	r2, r0
 80094ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094d0:	4669      	mov	r1, sp
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 f874 	bl	80095c0 <_svfiprintf_r>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	bfbc      	itt	lt
 80094dc:	238b      	movlt	r3, #139	; 0x8b
 80094de:	602b      	strlt	r3, [r5, #0]
 80094e0:	2c00      	cmp	r4, #0
 80094e2:	d0e1      	beq.n	80094a8 <_vsniprintf_r+0x14>
 80094e4:	9b00      	ldr	r3, [sp, #0]
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	e7dd      	b.n	80094a8 <_vsniprintf_r+0x14>

080094ec <vsniprintf>:
 80094ec:	b507      	push	{r0, r1, r2, lr}
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	460a      	mov	r2, r1
 80094f4:	4601      	mov	r1, r0
 80094f6:	4803      	ldr	r0, [pc, #12]	; (8009504 <vsniprintf+0x18>)
 80094f8:	6800      	ldr	r0, [r0, #0]
 80094fa:	f7ff ffcb 	bl	8009494 <_vsniprintf_r>
 80094fe:	b003      	add	sp, #12
 8009500:	f85d fb04 	ldr.w	pc, [sp], #4
 8009504:	20000018 	.word	0x20000018

08009508 <__malloc_lock>:
 8009508:	4770      	bx	lr

0800950a <__malloc_unlock>:
 800950a:	4770      	bx	lr

0800950c <__ssputs_r>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	688e      	ldr	r6, [r1, #8]
 8009512:	429e      	cmp	r6, r3
 8009514:	4682      	mov	sl, r0
 8009516:	460c      	mov	r4, r1
 8009518:	4690      	mov	r8, r2
 800951a:	4699      	mov	r9, r3
 800951c:	d837      	bhi.n	800958e <__ssputs_r+0x82>
 800951e:	898a      	ldrh	r2, [r1, #12]
 8009520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009524:	d031      	beq.n	800958a <__ssputs_r+0x7e>
 8009526:	6825      	ldr	r5, [r4, #0]
 8009528:	6909      	ldr	r1, [r1, #16]
 800952a:	1a6f      	subs	r7, r5, r1
 800952c:	6965      	ldr	r5, [r4, #20]
 800952e:	2302      	movs	r3, #2
 8009530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009534:	fb95 f5f3 	sdiv	r5, r5, r3
 8009538:	f109 0301 	add.w	r3, r9, #1
 800953c:	443b      	add	r3, r7
 800953e:	429d      	cmp	r5, r3
 8009540:	bf38      	it	cc
 8009542:	461d      	movcc	r5, r3
 8009544:	0553      	lsls	r3, r2, #21
 8009546:	d530      	bpl.n	80095aa <__ssputs_r+0x9e>
 8009548:	4629      	mov	r1, r5
 800954a:	f7ff fec1 	bl	80092d0 <_malloc_r>
 800954e:	4606      	mov	r6, r0
 8009550:	b950      	cbnz	r0, 8009568 <__ssputs_r+0x5c>
 8009552:	230c      	movs	r3, #12
 8009554:	f8ca 3000 	str.w	r3, [sl]
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	f04f 30ff 	mov.w	r0, #4294967295
 8009564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009568:	463a      	mov	r2, r7
 800956a:	6921      	ldr	r1, [r4, #16]
 800956c:	f7ff fe36 	bl	80091dc <memcpy>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	6126      	str	r6, [r4, #16]
 800957e:	6165      	str	r5, [r4, #20]
 8009580:	443e      	add	r6, r7
 8009582:	1bed      	subs	r5, r5, r7
 8009584:	6026      	str	r6, [r4, #0]
 8009586:	60a5      	str	r5, [r4, #8]
 8009588:	464e      	mov	r6, r9
 800958a:	454e      	cmp	r6, r9
 800958c:	d900      	bls.n	8009590 <__ssputs_r+0x84>
 800958e:	464e      	mov	r6, r9
 8009590:	4632      	mov	r2, r6
 8009592:	4641      	mov	r1, r8
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	f7ff fe2c 	bl	80091f2 <memmove>
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	1b9b      	subs	r3, r3, r6
 800959e:	60a3      	str	r3, [r4, #8]
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	441e      	add	r6, r3
 80095a4:	6026      	str	r6, [r4, #0]
 80095a6:	2000      	movs	r0, #0
 80095a8:	e7dc      	b.n	8009564 <__ssputs_r+0x58>
 80095aa:	462a      	mov	r2, r5
 80095ac:	f000 fa88 	bl	8009ac0 <_realloc_r>
 80095b0:	4606      	mov	r6, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d1e2      	bne.n	800957c <__ssputs_r+0x70>
 80095b6:	6921      	ldr	r1, [r4, #16]
 80095b8:	4650      	mov	r0, sl
 80095ba:	f7ff fe3b 	bl	8009234 <_free_r>
 80095be:	e7c8      	b.n	8009552 <__ssputs_r+0x46>

080095c0 <_svfiprintf_r>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	461d      	mov	r5, r3
 80095c6:	898b      	ldrh	r3, [r1, #12]
 80095c8:	061f      	lsls	r7, r3, #24
 80095ca:	b09d      	sub	sp, #116	; 0x74
 80095cc:	4680      	mov	r8, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	4616      	mov	r6, r2
 80095d2:	d50f      	bpl.n	80095f4 <_svfiprintf_r+0x34>
 80095d4:	690b      	ldr	r3, [r1, #16]
 80095d6:	b96b      	cbnz	r3, 80095f4 <_svfiprintf_r+0x34>
 80095d8:	2140      	movs	r1, #64	; 0x40
 80095da:	f7ff fe79 	bl	80092d0 <_malloc_r>
 80095de:	6020      	str	r0, [r4, #0]
 80095e0:	6120      	str	r0, [r4, #16]
 80095e2:	b928      	cbnz	r0, 80095f0 <_svfiprintf_r+0x30>
 80095e4:	230c      	movs	r3, #12
 80095e6:	f8c8 3000 	str.w	r3, [r8]
 80095ea:	f04f 30ff 	mov.w	r0, #4294967295
 80095ee:	e0c8      	b.n	8009782 <_svfiprintf_r+0x1c2>
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	2300      	movs	r3, #0
 80095f6:	9309      	str	r3, [sp, #36]	; 0x24
 80095f8:	2320      	movs	r3, #32
 80095fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095fe:	2330      	movs	r3, #48	; 0x30
 8009600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009604:	9503      	str	r5, [sp, #12]
 8009606:	f04f 0b01 	mov.w	fp, #1
 800960a:	4637      	mov	r7, r6
 800960c:	463d      	mov	r5, r7
 800960e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009612:	b10b      	cbz	r3, 8009618 <_svfiprintf_r+0x58>
 8009614:	2b25      	cmp	r3, #37	; 0x25
 8009616:	d13e      	bne.n	8009696 <_svfiprintf_r+0xd6>
 8009618:	ebb7 0a06 	subs.w	sl, r7, r6
 800961c:	d00b      	beq.n	8009636 <_svfiprintf_r+0x76>
 800961e:	4653      	mov	r3, sl
 8009620:	4632      	mov	r2, r6
 8009622:	4621      	mov	r1, r4
 8009624:	4640      	mov	r0, r8
 8009626:	f7ff ff71 	bl	800950c <__ssputs_r>
 800962a:	3001      	adds	r0, #1
 800962c:	f000 80a4 	beq.w	8009778 <_svfiprintf_r+0x1b8>
 8009630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009632:	4453      	add	r3, sl
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	783b      	ldrb	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 809d 	beq.w	8009778 <_svfiprintf_r+0x1b8>
 800963e:	2300      	movs	r3, #0
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009650:	931a      	str	r3, [sp, #104]	; 0x68
 8009652:	462f      	mov	r7, r5
 8009654:	2205      	movs	r2, #5
 8009656:	f817 1b01 	ldrb.w	r1, [r7], #1
 800965a:	4850      	ldr	r0, [pc, #320]	; (800979c <_svfiprintf_r+0x1dc>)
 800965c:	f7f6 fdc0 	bl	80001e0 <memchr>
 8009660:	9b04      	ldr	r3, [sp, #16]
 8009662:	b9d0      	cbnz	r0, 800969a <_svfiprintf_r+0xda>
 8009664:	06d9      	lsls	r1, r3, #27
 8009666:	bf44      	itt	mi
 8009668:	2220      	movmi	r2, #32
 800966a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800966e:	071a      	lsls	r2, r3, #28
 8009670:	bf44      	itt	mi
 8009672:	222b      	movmi	r2, #43	; 0x2b
 8009674:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009678:	782a      	ldrb	r2, [r5, #0]
 800967a:	2a2a      	cmp	r2, #42	; 0x2a
 800967c:	d015      	beq.n	80096aa <_svfiprintf_r+0xea>
 800967e:	9a07      	ldr	r2, [sp, #28]
 8009680:	462f      	mov	r7, r5
 8009682:	2000      	movs	r0, #0
 8009684:	250a      	movs	r5, #10
 8009686:	4639      	mov	r1, r7
 8009688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800968c:	3b30      	subs	r3, #48	; 0x30
 800968e:	2b09      	cmp	r3, #9
 8009690:	d94d      	bls.n	800972e <_svfiprintf_r+0x16e>
 8009692:	b1b8      	cbz	r0, 80096c4 <_svfiprintf_r+0x104>
 8009694:	e00f      	b.n	80096b6 <_svfiprintf_r+0xf6>
 8009696:	462f      	mov	r7, r5
 8009698:	e7b8      	b.n	800960c <_svfiprintf_r+0x4c>
 800969a:	4a40      	ldr	r2, [pc, #256]	; (800979c <_svfiprintf_r+0x1dc>)
 800969c:	1a80      	subs	r0, r0, r2
 800969e:	fa0b f000 	lsl.w	r0, fp, r0
 80096a2:	4318      	orrs	r0, r3
 80096a4:	9004      	str	r0, [sp, #16]
 80096a6:	463d      	mov	r5, r7
 80096a8:	e7d3      	b.n	8009652 <_svfiprintf_r+0x92>
 80096aa:	9a03      	ldr	r2, [sp, #12]
 80096ac:	1d11      	adds	r1, r2, #4
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	9103      	str	r1, [sp, #12]
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	db01      	blt.n	80096ba <_svfiprintf_r+0xfa>
 80096b6:	9207      	str	r2, [sp, #28]
 80096b8:	e004      	b.n	80096c4 <_svfiprintf_r+0x104>
 80096ba:	4252      	negs	r2, r2
 80096bc:	f043 0302 	orr.w	r3, r3, #2
 80096c0:	9207      	str	r2, [sp, #28]
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	783b      	ldrb	r3, [r7, #0]
 80096c6:	2b2e      	cmp	r3, #46	; 0x2e
 80096c8:	d10c      	bne.n	80096e4 <_svfiprintf_r+0x124>
 80096ca:	787b      	ldrb	r3, [r7, #1]
 80096cc:	2b2a      	cmp	r3, #42	; 0x2a
 80096ce:	d133      	bne.n	8009738 <_svfiprintf_r+0x178>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	1d1a      	adds	r2, r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	9203      	str	r2, [sp, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfb8      	it	lt
 80096dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e0:	3702      	adds	r7, #2
 80096e2:	9305      	str	r3, [sp, #20]
 80096e4:	4d2e      	ldr	r5, [pc, #184]	; (80097a0 <_svfiprintf_r+0x1e0>)
 80096e6:	7839      	ldrb	r1, [r7, #0]
 80096e8:	2203      	movs	r2, #3
 80096ea:	4628      	mov	r0, r5
 80096ec:	f7f6 fd78 	bl	80001e0 <memchr>
 80096f0:	b138      	cbz	r0, 8009702 <_svfiprintf_r+0x142>
 80096f2:	2340      	movs	r3, #64	; 0x40
 80096f4:	1b40      	subs	r0, r0, r5
 80096f6:	fa03 f000 	lsl.w	r0, r3, r0
 80096fa:	9b04      	ldr	r3, [sp, #16]
 80096fc:	4303      	orrs	r3, r0
 80096fe:	3701      	adds	r7, #1
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	7839      	ldrb	r1, [r7, #0]
 8009704:	4827      	ldr	r0, [pc, #156]	; (80097a4 <_svfiprintf_r+0x1e4>)
 8009706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800970a:	2206      	movs	r2, #6
 800970c:	1c7e      	adds	r6, r7, #1
 800970e:	f7f6 fd67 	bl	80001e0 <memchr>
 8009712:	2800      	cmp	r0, #0
 8009714:	d038      	beq.n	8009788 <_svfiprintf_r+0x1c8>
 8009716:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <_svfiprintf_r+0x1e8>)
 8009718:	bb13      	cbnz	r3, 8009760 <_svfiprintf_r+0x1a0>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	3307      	adds	r3, #7
 800971e:	f023 0307 	bic.w	r3, r3, #7
 8009722:	3308      	adds	r3, #8
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009728:	444b      	add	r3, r9
 800972a:	9309      	str	r3, [sp, #36]	; 0x24
 800972c:	e76d      	b.n	800960a <_svfiprintf_r+0x4a>
 800972e:	fb05 3202 	mla	r2, r5, r2, r3
 8009732:	2001      	movs	r0, #1
 8009734:	460f      	mov	r7, r1
 8009736:	e7a6      	b.n	8009686 <_svfiprintf_r+0xc6>
 8009738:	2300      	movs	r3, #0
 800973a:	3701      	adds	r7, #1
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	4619      	mov	r1, r3
 8009740:	250a      	movs	r5, #10
 8009742:	4638      	mov	r0, r7
 8009744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009748:	3a30      	subs	r2, #48	; 0x30
 800974a:	2a09      	cmp	r2, #9
 800974c:	d903      	bls.n	8009756 <_svfiprintf_r+0x196>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0c8      	beq.n	80096e4 <_svfiprintf_r+0x124>
 8009752:	9105      	str	r1, [sp, #20]
 8009754:	e7c6      	b.n	80096e4 <_svfiprintf_r+0x124>
 8009756:	fb05 2101 	mla	r1, r5, r1, r2
 800975a:	2301      	movs	r3, #1
 800975c:	4607      	mov	r7, r0
 800975e:	e7f0      	b.n	8009742 <_svfiprintf_r+0x182>
 8009760:	ab03      	add	r3, sp, #12
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	4622      	mov	r2, r4
 8009766:	4b11      	ldr	r3, [pc, #68]	; (80097ac <_svfiprintf_r+0x1ec>)
 8009768:	a904      	add	r1, sp, #16
 800976a:	4640      	mov	r0, r8
 800976c:	f3af 8000 	nop.w
 8009770:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009774:	4681      	mov	r9, r0
 8009776:	d1d6      	bne.n	8009726 <_svfiprintf_r+0x166>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	065b      	lsls	r3, r3, #25
 800977c:	f53f af35 	bmi.w	80095ea <_svfiprintf_r+0x2a>
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	b01d      	add	sp, #116	; 0x74
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	ab03      	add	r3, sp, #12
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	4622      	mov	r2, r4
 800978e:	4b07      	ldr	r3, [pc, #28]	; (80097ac <_svfiprintf_r+0x1ec>)
 8009790:	a904      	add	r1, sp, #16
 8009792:	4640      	mov	r0, r8
 8009794:	f000 f882 	bl	800989c <_printf_i>
 8009798:	e7ea      	b.n	8009770 <_svfiprintf_r+0x1b0>
 800979a:	bf00      	nop
 800979c:	08009de0 	.word	0x08009de0
 80097a0:	08009de6 	.word	0x08009de6
 80097a4:	08009dea 	.word	0x08009dea
 80097a8:	00000000 	.word	0x00000000
 80097ac:	0800950d 	.word	0x0800950d

080097b0 <_printf_common>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	4691      	mov	r9, r2
 80097b6:	461f      	mov	r7, r3
 80097b8:	688a      	ldr	r2, [r1, #8]
 80097ba:	690b      	ldr	r3, [r1, #16]
 80097bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bfb8      	it	lt
 80097c4:	4613      	movlt	r3, r2
 80097c6:	f8c9 3000 	str.w	r3, [r9]
 80097ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097ce:	4606      	mov	r6, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	b112      	cbz	r2, 80097da <_printf_common+0x2a>
 80097d4:	3301      	adds	r3, #1
 80097d6:	f8c9 3000 	str.w	r3, [r9]
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	0699      	lsls	r1, r3, #26
 80097de:	bf42      	ittt	mi
 80097e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097e4:	3302      	addmi	r3, #2
 80097e6:	f8c9 3000 	strmi.w	r3, [r9]
 80097ea:	6825      	ldr	r5, [r4, #0]
 80097ec:	f015 0506 	ands.w	r5, r5, #6
 80097f0:	d107      	bne.n	8009802 <_printf_common+0x52>
 80097f2:	f104 0a19 	add.w	sl, r4, #25
 80097f6:	68e3      	ldr	r3, [r4, #12]
 80097f8:	f8d9 2000 	ldr.w	r2, [r9]
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	42ab      	cmp	r3, r5
 8009800:	dc28      	bgt.n	8009854 <_printf_common+0xa4>
 8009802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	3300      	adds	r3, #0
 800980a:	bf18      	it	ne
 800980c:	2301      	movne	r3, #1
 800980e:	0692      	lsls	r2, r2, #26
 8009810:	d42d      	bmi.n	800986e <_printf_common+0xbe>
 8009812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009816:	4639      	mov	r1, r7
 8009818:	4630      	mov	r0, r6
 800981a:	47c0      	blx	r8
 800981c:	3001      	adds	r0, #1
 800981e:	d020      	beq.n	8009862 <_printf_common+0xb2>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	68e5      	ldr	r5, [r4, #12]
 8009824:	f8d9 2000 	ldr.w	r2, [r9]
 8009828:	f003 0306 	and.w	r3, r3, #6
 800982c:	2b04      	cmp	r3, #4
 800982e:	bf08      	it	eq
 8009830:	1aad      	subeq	r5, r5, r2
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	bf0c      	ite	eq
 8009838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800983c:	2500      	movne	r5, #0
 800983e:	4293      	cmp	r3, r2
 8009840:	bfc4      	itt	gt
 8009842:	1a9b      	subgt	r3, r3, r2
 8009844:	18ed      	addgt	r5, r5, r3
 8009846:	f04f 0900 	mov.w	r9, #0
 800984a:	341a      	adds	r4, #26
 800984c:	454d      	cmp	r5, r9
 800984e:	d11a      	bne.n	8009886 <_printf_common+0xd6>
 8009850:	2000      	movs	r0, #0
 8009852:	e008      	b.n	8009866 <_printf_common+0xb6>
 8009854:	2301      	movs	r3, #1
 8009856:	4652      	mov	r2, sl
 8009858:	4639      	mov	r1, r7
 800985a:	4630      	mov	r0, r6
 800985c:	47c0      	blx	r8
 800985e:	3001      	adds	r0, #1
 8009860:	d103      	bne.n	800986a <_printf_common+0xba>
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	3501      	adds	r5, #1
 800986c:	e7c3      	b.n	80097f6 <_printf_common+0x46>
 800986e:	18e1      	adds	r1, r4, r3
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	2030      	movs	r0, #48	; 0x30
 8009874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009878:	4422      	add	r2, r4
 800987a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800987e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009882:	3302      	adds	r3, #2
 8009884:	e7c5      	b.n	8009812 <_printf_common+0x62>
 8009886:	2301      	movs	r3, #1
 8009888:	4622      	mov	r2, r4
 800988a:	4639      	mov	r1, r7
 800988c:	4630      	mov	r0, r6
 800988e:	47c0      	blx	r8
 8009890:	3001      	adds	r0, #1
 8009892:	d0e6      	beq.n	8009862 <_printf_common+0xb2>
 8009894:	f109 0901 	add.w	r9, r9, #1
 8009898:	e7d8      	b.n	800984c <_printf_common+0x9c>
	...

0800989c <_printf_i>:
 800989c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80098a4:	460c      	mov	r4, r1
 80098a6:	7e09      	ldrb	r1, [r1, #24]
 80098a8:	b085      	sub	sp, #20
 80098aa:	296e      	cmp	r1, #110	; 0x6e
 80098ac:	4617      	mov	r7, r2
 80098ae:	4606      	mov	r6, r0
 80098b0:	4698      	mov	r8, r3
 80098b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098b4:	f000 80b3 	beq.w	8009a1e <_printf_i+0x182>
 80098b8:	d822      	bhi.n	8009900 <_printf_i+0x64>
 80098ba:	2963      	cmp	r1, #99	; 0x63
 80098bc:	d036      	beq.n	800992c <_printf_i+0x90>
 80098be:	d80a      	bhi.n	80098d6 <_printf_i+0x3a>
 80098c0:	2900      	cmp	r1, #0
 80098c2:	f000 80b9 	beq.w	8009a38 <_printf_i+0x19c>
 80098c6:	2958      	cmp	r1, #88	; 0x58
 80098c8:	f000 8083 	beq.w	80099d2 <_printf_i+0x136>
 80098cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098d4:	e032      	b.n	800993c <_printf_i+0xa0>
 80098d6:	2964      	cmp	r1, #100	; 0x64
 80098d8:	d001      	beq.n	80098de <_printf_i+0x42>
 80098da:	2969      	cmp	r1, #105	; 0x69
 80098dc:	d1f6      	bne.n	80098cc <_printf_i+0x30>
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	6813      	ldr	r3, [r2, #0]
 80098e2:	0605      	lsls	r5, r0, #24
 80098e4:	f103 0104 	add.w	r1, r3, #4
 80098e8:	d52a      	bpl.n	8009940 <_printf_i+0xa4>
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da03      	bge.n	80098fa <_printf_i+0x5e>
 80098f2:	222d      	movs	r2, #45	; 0x2d
 80098f4:	425b      	negs	r3, r3
 80098f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098fa:	486f      	ldr	r0, [pc, #444]	; (8009ab8 <_printf_i+0x21c>)
 80098fc:	220a      	movs	r2, #10
 80098fe:	e039      	b.n	8009974 <_printf_i+0xd8>
 8009900:	2973      	cmp	r1, #115	; 0x73
 8009902:	f000 809d 	beq.w	8009a40 <_printf_i+0x1a4>
 8009906:	d808      	bhi.n	800991a <_printf_i+0x7e>
 8009908:	296f      	cmp	r1, #111	; 0x6f
 800990a:	d020      	beq.n	800994e <_printf_i+0xb2>
 800990c:	2970      	cmp	r1, #112	; 0x70
 800990e:	d1dd      	bne.n	80098cc <_printf_i+0x30>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	f043 0320 	orr.w	r3, r3, #32
 8009916:	6023      	str	r3, [r4, #0]
 8009918:	e003      	b.n	8009922 <_printf_i+0x86>
 800991a:	2975      	cmp	r1, #117	; 0x75
 800991c:	d017      	beq.n	800994e <_printf_i+0xb2>
 800991e:	2978      	cmp	r1, #120	; 0x78
 8009920:	d1d4      	bne.n	80098cc <_printf_i+0x30>
 8009922:	2378      	movs	r3, #120	; 0x78
 8009924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009928:	4864      	ldr	r0, [pc, #400]	; (8009abc <_printf_i+0x220>)
 800992a:	e055      	b.n	80099d8 <_printf_i+0x13c>
 800992c:	6813      	ldr	r3, [r2, #0]
 800992e:	1d19      	adds	r1, r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6011      	str	r1, [r2, #0]
 8009934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800993c:	2301      	movs	r3, #1
 800993e:	e08c      	b.n	8009a5a <_printf_i+0x1be>
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6011      	str	r1, [r2, #0]
 8009944:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009948:	bf18      	it	ne
 800994a:	b21b      	sxthne	r3, r3
 800994c:	e7cf      	b.n	80098ee <_printf_i+0x52>
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	6825      	ldr	r5, [r4, #0]
 8009952:	1d18      	adds	r0, r3, #4
 8009954:	6010      	str	r0, [r2, #0]
 8009956:	0628      	lsls	r0, r5, #24
 8009958:	d501      	bpl.n	800995e <_printf_i+0xc2>
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	e002      	b.n	8009964 <_printf_i+0xc8>
 800995e:	0668      	lsls	r0, r5, #25
 8009960:	d5fb      	bpl.n	800995a <_printf_i+0xbe>
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	4854      	ldr	r0, [pc, #336]	; (8009ab8 <_printf_i+0x21c>)
 8009966:	296f      	cmp	r1, #111	; 0x6f
 8009968:	bf14      	ite	ne
 800996a:	220a      	movne	r2, #10
 800996c:	2208      	moveq	r2, #8
 800996e:	2100      	movs	r1, #0
 8009970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009974:	6865      	ldr	r5, [r4, #4]
 8009976:	60a5      	str	r5, [r4, #8]
 8009978:	2d00      	cmp	r5, #0
 800997a:	f2c0 8095 	blt.w	8009aa8 <_printf_i+0x20c>
 800997e:	6821      	ldr	r1, [r4, #0]
 8009980:	f021 0104 	bic.w	r1, r1, #4
 8009984:	6021      	str	r1, [r4, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d13d      	bne.n	8009a06 <_printf_i+0x16a>
 800998a:	2d00      	cmp	r5, #0
 800998c:	f040 808e 	bne.w	8009aac <_printf_i+0x210>
 8009990:	4665      	mov	r5, ip
 8009992:	2a08      	cmp	r2, #8
 8009994:	d10b      	bne.n	80099ae <_printf_i+0x112>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	07db      	lsls	r3, r3, #31
 800999a:	d508      	bpl.n	80099ae <_printf_i+0x112>
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	6862      	ldr	r2, [r4, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	bfde      	ittt	le
 80099a4:	2330      	movle	r3, #48	; 0x30
 80099a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099ae:	ebac 0305 	sub.w	r3, ip, r5
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	f8cd 8000 	str.w	r8, [sp]
 80099b8:	463b      	mov	r3, r7
 80099ba:	aa03      	add	r2, sp, #12
 80099bc:	4621      	mov	r1, r4
 80099be:	4630      	mov	r0, r6
 80099c0:	f7ff fef6 	bl	80097b0 <_printf_common>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d14d      	bne.n	8009a64 <_printf_i+0x1c8>
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	b005      	add	sp, #20
 80099ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099d2:	4839      	ldr	r0, [pc, #228]	; (8009ab8 <_printf_i+0x21c>)
 80099d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099d8:	6813      	ldr	r3, [r2, #0]
 80099da:	6821      	ldr	r1, [r4, #0]
 80099dc:	1d1d      	adds	r5, r3, #4
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6015      	str	r5, [r2, #0]
 80099e2:	060a      	lsls	r2, r1, #24
 80099e4:	d50b      	bpl.n	80099fe <_printf_i+0x162>
 80099e6:	07ca      	lsls	r2, r1, #31
 80099e8:	bf44      	itt	mi
 80099ea:	f041 0120 	orrmi.w	r1, r1, #32
 80099ee:	6021      	strmi	r1, [r4, #0]
 80099f0:	b91b      	cbnz	r3, 80099fa <_printf_i+0x15e>
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	f022 0220 	bic.w	r2, r2, #32
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	2210      	movs	r2, #16
 80099fc:	e7b7      	b.n	800996e <_printf_i+0xd2>
 80099fe:	064d      	lsls	r5, r1, #25
 8009a00:	bf48      	it	mi
 8009a02:	b29b      	uxthmi	r3, r3
 8009a04:	e7ef      	b.n	80099e6 <_printf_i+0x14a>
 8009a06:	4665      	mov	r5, ip
 8009a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a0c:	fb02 3311 	mls	r3, r2, r1, r3
 8009a10:	5cc3      	ldrb	r3, [r0, r3]
 8009a12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a16:	460b      	mov	r3, r1
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	d1f5      	bne.n	8009a08 <_printf_i+0x16c>
 8009a1c:	e7b9      	b.n	8009992 <_printf_i+0xf6>
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	6825      	ldr	r5, [r4, #0]
 8009a22:	6961      	ldr	r1, [r4, #20]
 8009a24:	1d18      	adds	r0, r3, #4
 8009a26:	6010      	str	r0, [r2, #0]
 8009a28:	0628      	lsls	r0, r5, #24
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	d501      	bpl.n	8009a32 <_printf_i+0x196>
 8009a2e:	6019      	str	r1, [r3, #0]
 8009a30:	e002      	b.n	8009a38 <_printf_i+0x19c>
 8009a32:	066a      	lsls	r2, r5, #25
 8009a34:	d5fb      	bpl.n	8009a2e <_printf_i+0x192>
 8009a36:	8019      	strh	r1, [r3, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	4665      	mov	r5, ip
 8009a3e:	e7b9      	b.n	80099b4 <_printf_i+0x118>
 8009a40:	6813      	ldr	r3, [r2, #0]
 8009a42:	1d19      	adds	r1, r3, #4
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	681d      	ldr	r5, [r3, #0]
 8009a48:	6862      	ldr	r2, [r4, #4]
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7f6 fbc7 	bl	80001e0 <memchr>
 8009a52:	b108      	cbz	r0, 8009a58 <_printf_i+0x1bc>
 8009a54:	1b40      	subs	r0, r0, r5
 8009a56:	6060      	str	r0, [r4, #4]
 8009a58:	6863      	ldr	r3, [r4, #4]
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a62:	e7a7      	b.n	80099b4 <_printf_i+0x118>
 8009a64:	6923      	ldr	r3, [r4, #16]
 8009a66:	462a      	mov	r2, r5
 8009a68:	4639      	mov	r1, r7
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	47c0      	blx	r8
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d0aa      	beq.n	80099c8 <_printf_i+0x12c>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	079b      	lsls	r3, r3, #30
 8009a76:	d413      	bmi.n	8009aa0 <_printf_i+0x204>
 8009a78:	68e0      	ldr	r0, [r4, #12]
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	4298      	cmp	r0, r3
 8009a7e:	bfb8      	it	lt
 8009a80:	4618      	movlt	r0, r3
 8009a82:	e7a3      	b.n	80099cc <_printf_i+0x130>
 8009a84:	2301      	movs	r3, #1
 8009a86:	464a      	mov	r2, r9
 8009a88:	4639      	mov	r1, r7
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	47c0      	blx	r8
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d09a      	beq.n	80099c8 <_printf_i+0x12c>
 8009a92:	3501      	adds	r5, #1
 8009a94:	68e3      	ldr	r3, [r4, #12]
 8009a96:	9a03      	ldr	r2, [sp, #12]
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	42ab      	cmp	r3, r5
 8009a9c:	dcf2      	bgt.n	8009a84 <_printf_i+0x1e8>
 8009a9e:	e7eb      	b.n	8009a78 <_printf_i+0x1dc>
 8009aa0:	2500      	movs	r5, #0
 8009aa2:	f104 0919 	add.w	r9, r4, #25
 8009aa6:	e7f5      	b.n	8009a94 <_printf_i+0x1f8>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1ac      	bne.n	8009a06 <_printf_i+0x16a>
 8009aac:	7803      	ldrb	r3, [r0, #0]
 8009aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab6:	e76c      	b.n	8009992 <_printf_i+0xf6>
 8009ab8:	08009df1 	.word	0x08009df1
 8009abc:	08009e02 	.word	0x08009e02

08009ac0 <_realloc_r>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	460e      	mov	r6, r1
 8009ac8:	b921      	cbnz	r1, 8009ad4 <_realloc_r+0x14>
 8009aca:	4611      	mov	r1, r2
 8009acc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ad0:	f7ff bbfe 	b.w	80092d0 <_malloc_r>
 8009ad4:	b922      	cbnz	r2, 8009ae0 <_realloc_r+0x20>
 8009ad6:	f7ff fbad 	bl	8009234 <_free_r>
 8009ada:	4625      	mov	r5, r4
 8009adc:	4628      	mov	r0, r5
 8009ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae0:	f000 f814 	bl	8009b0c <_malloc_usable_size_r>
 8009ae4:	42a0      	cmp	r0, r4
 8009ae6:	d20f      	bcs.n	8009b08 <_realloc_r+0x48>
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7ff fbf0 	bl	80092d0 <_malloc_r>
 8009af0:	4605      	mov	r5, r0
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0f2      	beq.n	8009adc <_realloc_r+0x1c>
 8009af6:	4631      	mov	r1, r6
 8009af8:	4622      	mov	r2, r4
 8009afa:	f7ff fb6f 	bl	80091dc <memcpy>
 8009afe:	4631      	mov	r1, r6
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7ff fb97 	bl	8009234 <_free_r>
 8009b06:	e7e9      	b.n	8009adc <_realloc_r+0x1c>
 8009b08:	4635      	mov	r5, r6
 8009b0a:	e7e7      	b.n	8009adc <_realloc_r+0x1c>

08009b0c <_malloc_usable_size_r>:
 8009b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b10:	1f18      	subs	r0, r3, #4
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bfbc      	itt	lt
 8009b16:	580b      	ldrlt	r3, [r1, r0]
 8009b18:	18c0      	addlt	r0, r0, r3
 8009b1a:	4770      	bx	lr

08009b1c <_getpid>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <_getpid+0xc>)
 8009b1e:	2258      	movs	r2, #88	; 0x58
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295
 8009b26:	4770      	bx	lr
 8009b28:	2000270c 	.word	0x2000270c

08009b2c <_kill>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <_kill+0xc>)
 8009b2e:	2258      	movs	r2, #88	; 0x58
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	f04f 30ff 	mov.w	r0, #4294967295
 8009b36:	4770      	bx	lr
 8009b38:	2000270c 	.word	0x2000270c

08009b3c <_sbrk>:
 8009b3c:	4b04      	ldr	r3, [pc, #16]	; (8009b50 <_sbrk+0x14>)
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	4602      	mov	r2, r0
 8009b42:	b909      	cbnz	r1, 8009b48 <_sbrk+0xc>
 8009b44:	4903      	ldr	r1, [pc, #12]	; (8009b54 <_sbrk+0x18>)
 8009b46:	6019      	str	r1, [r3, #0]
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	4402      	add	r2, r0
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	4770      	bx	lr
 8009b50:	20002704 	.word	0x20002704
 8009b54:	20002710 	.word	0x20002710

08009b58 <_exit>:
 8009b58:	e7fe      	b.n	8009b58 <_exit>
	...

08009b5c <_init>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	bf00      	nop
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr

08009b68 <_fini>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr
